"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@uniswap";
exports.ids = ["vendor-chunks/@uniswap"];
exports.modules = {

/***/ "(ssr)/./node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARGENT_WALLET_DETECTOR_ADDRESS: () => (/* binding */ ARGENT_WALLET_DETECTOR_ADDRESS),\n/* harmony export */   CHAIN_TO_ADDRESSES_MAP: () => (/* binding */ CHAIN_TO_ADDRESSES_MAP),\n/* harmony export */   ChainId: () => (/* binding */ ChainId),\n/* harmony export */   CurrencyAmount: () => (/* binding */ CurrencyAmount),\n/* harmony export */   ENS_REGISTRAR_ADDRESSES: () => (/* binding */ ENS_REGISTRAR_ADDRESSES),\n/* harmony export */   Ether: () => (/* binding */ Ether),\n/* harmony export */   Fraction: () => (/* binding */ Fraction),\n/* harmony export */   GOVERNANCE_ALPHA_V0_ADDRESSES: () => (/* binding */ GOVERNANCE_ALPHA_V0_ADDRESSES),\n/* harmony export */   GOVERNANCE_ALPHA_V1_ADDRESSES: () => (/* binding */ GOVERNANCE_ALPHA_V1_ADDRESSES),\n/* harmony export */   GOVERNANCE_BRAVO_ADDRESSES: () => (/* binding */ GOVERNANCE_BRAVO_ADDRESSES),\n/* harmony export */   MERKLE_DISTRIBUTOR_ADDRESS: () => (/* binding */ MERKLE_DISTRIBUTOR_ADDRESS),\n/* harmony export */   MIXED_ROUTE_QUOTER_V1_ADDRESSES: () => (/* binding */ MIXED_ROUTE_QUOTER_V1_ADDRESSES),\n/* harmony export */   MULTICALL_ADDRESSES: () => (/* binding */ MULTICALL_ADDRESSES),\n/* harmony export */   MaxUint256: () => (/* binding */ MaxUint256),\n/* harmony export */   NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: () => (/* binding */ NONFUNGIBLE_POSITION_MANAGER_ADDRESSES),\n/* harmony export */   NativeCurrency: () => (/* binding */ NativeCurrency),\n/* harmony export */   NativeCurrencyName: () => (/* binding */ NativeCurrencyName),\n/* harmony export */   Percent: () => (/* binding */ Percent),\n/* harmony export */   Price: () => (/* binding */ Price),\n/* harmony export */   QUOTER_ADDRESSES: () => (/* binding */ QUOTER_ADDRESSES),\n/* harmony export */   Rounding: () => (/* binding */ Rounding),\n/* harmony export */   SOCKS_CONTROLLER_ADDRESSES: () => (/* binding */ SOCKS_CONTROLLER_ADDRESSES),\n/* harmony export */   SUPPORTED_CHAINS: () => (/* binding */ SUPPORTED_CHAINS),\n/* harmony export */   SWAP_ROUTER_02_ADDRESSES: () => (/* binding */ SWAP_ROUTER_02_ADDRESSES),\n/* harmony export */   TICK_LENS_ADDRESSES: () => (/* binding */ TICK_LENS_ADDRESSES),\n/* harmony export */   TIMELOCK_ADDRESSES: () => (/* binding */ TIMELOCK_ADDRESSES),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   TradeType: () => (/* binding */ TradeType),\n/* harmony export */   UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS: () => (/* binding */ UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS),\n/* harmony export */   UNI_ADDRESSES: () => (/* binding */ UNI_ADDRESSES),\n/* harmony export */   V2_FACTORY_ADDRESS: () => (/* binding */ V2_FACTORY_ADDRESS),\n/* harmony export */   V2_FACTORY_ADDRESSES: () => (/* binding */ V2_FACTORY_ADDRESSES),\n/* harmony export */   V2_ROUTER_ADDRESS: () => (/* binding */ V2_ROUTER_ADDRESS),\n/* harmony export */   V2_ROUTER_ADDRESSES: () => (/* binding */ V2_ROUTER_ADDRESSES),\n/* harmony export */   V3_CORE_FACTORY_ADDRESSES: () => (/* binding */ V3_CORE_FACTORY_ADDRESSES),\n/* harmony export */   V3_MIGRATOR_ADDRESSES: () => (/* binding */ V3_MIGRATOR_ADDRESSES),\n/* harmony export */   WETH9: () => (/* binding */ WETH9),\n/* harmony export */   computePriceImpact: () => (/* binding */ computePriceImpact),\n/* harmony export */   sortedInsert: () => (/* binding */ sortedInsert),\n/* harmony export */   sqrt: () => (/* binding */ sqrt),\n/* harmony export */   validateAndParseAddress: () => (/* binding */ validateAndParseAddress)\n/* harmony export */ });\n/* harmony import */ var jsbi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsbi */ \"(ssr)/./node_modules/jsbi/dist/jsbi.mjs\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var decimal_js_light__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! decimal.js-light */ \"(ssr)/./node_modules/decimal.js-light/decimal.mjs\");\n/* harmony import */ var big_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! big.js */ \"(ssr)/./node_modules/big.js/big.mjs\");\n/* harmony import */ var toformat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! toformat */ \"(ssr)/./node_modules/toformat/toFormat.js\");\n/* harmony import */ var toformat__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(toformat__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n\n\n\n\n\n\n\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar ChainId;\n(function(ChainId) {\n    ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n    ChainId[ChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n    ChainId[ChainId[\"SEPOLIA\"] = 11155111] = \"SEPOLIA\";\n    ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n    ChainId[ChainId[\"OPTIMISM_GOERLI\"] = 420] = \"OPTIMISM_GOERLI\";\n    ChainId[ChainId[\"OPTIMISM_SEPOLIA\"] = 11155420] = \"OPTIMISM_SEPOLIA\";\n    ChainId[ChainId[\"ARBITRUM_ONE\"] = 42161] = \"ARBITRUM_ONE\";\n    ChainId[ChainId[\"ARBITRUM_GOERLI\"] = 421613] = \"ARBITRUM_GOERLI\";\n    ChainId[ChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n    ChainId[ChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n    ChainId[ChainId[\"CELO\"] = 42220] = \"CELO\";\n    ChainId[ChainId[\"CELO_ALFAJORES\"] = 44787] = \"CELO_ALFAJORES\";\n    ChainId[ChainId[\"GNOSIS\"] = 100] = \"GNOSIS\";\n    ChainId[ChainId[\"MOONBEAM\"] = 1284] = \"MOONBEAM\";\n    ChainId[ChainId[\"BNB\"] = 56] = \"BNB\";\n    ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n    ChainId[ChainId[\"BASE_GOERLI\"] = 84531] = \"BASE_GOERLI\";\n    ChainId[ChainId[\"BASE\"] = 8453] = \"BASE\";\n})(ChainId || (ChainId = {}));\nvar SUPPORTED_CHAINS = [\n    ChainId.MAINNET,\n    ChainId.OPTIMISM,\n    ChainId.OPTIMISM_GOERLI,\n    ChainId.OPTIMISM_SEPOLIA,\n    ChainId.ARBITRUM_ONE,\n    ChainId.ARBITRUM_GOERLI,\n    ChainId.POLYGON,\n    ChainId.POLYGON_MUMBAI,\n    ChainId.GOERLI,\n    ChainId.SEPOLIA,\n    ChainId.CELO_ALFAJORES,\n    ChainId.CELO,\n    ChainId.BNB,\n    ChainId.AVALANCHE,\n    ChainId.BASE,\n    ChainId.BASE_GOERLI\n];\nvar NativeCurrencyName;\n(function(NativeCurrencyName) {\n    // Strings match input for CLI\n    NativeCurrencyName[\"ETHER\"] = \"ETH\";\n    NativeCurrencyName[\"MATIC\"] = \"MATIC\";\n    NativeCurrencyName[\"CELO\"] = \"CELO\";\n    NativeCurrencyName[\"GNOSIS\"] = \"XDAI\";\n    NativeCurrencyName[\"MOONBEAM\"] = \"GLMR\";\n    NativeCurrencyName[\"BNB\"] = \"BNB\";\n    NativeCurrencyName[\"AVAX\"] = \"AVAX\";\n})(NativeCurrencyName || (NativeCurrencyName = {}));\nvar _CHAIN_TO_ADDRESSES_M, _GOVERNANCE_ALPHA_V1_, _GOVERNANCE_BRAVO_ADD, _MERKLE_DISTRIBUTOR_A, _ARGENT_WALLET_DETECT, _SOCKS_CONTROLLER_ADD;\nvar DEFAULT_NETWORKS = [\n    ChainId.MAINNET,\n    ChainId.GOERLI,\n    ChainId.SEPOLIA\n];\nfunction constructSameAddressMap(address, additionalNetworks) {\n    if (additionalNetworks === void 0) {\n        additionalNetworks = [];\n    }\n    return DEFAULT_NETWORKS.concat(additionalNetworks).reduce(function(memo, chainId) {\n        memo[chainId] = address;\n        return memo;\n    }, {});\n}\nvar UNI_ADDRESSES = /*#__PURE__*/ constructSameAddressMap(\"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\", [\n    ChainId.OPTIMISM,\n    ChainId.ARBITRUM_ONE,\n    ChainId.POLYGON,\n    ChainId.POLYGON_MUMBAI,\n    ChainId.SEPOLIA\n]);\nvar UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = \"0x8B799381ac40b838BBA4131ffB26197C432AFe78\";\nvar V2_FACTORY_ADDRESS = \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\";\nvar V2_FACTORY_ADDRESSES = /*#__PURE__*/ constructSameAddressMap(V2_FACTORY_ADDRESS, [\n    ChainId.POLYGON,\n    ChainId.OPTIMISM,\n    ChainId.CELO,\n    ChainId.ARBITRUM_ONE,\n    ChainId.BNB,\n    ChainId.AVALANCHE,\n    ChainId.BASE\n]);\nvar V2_ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nvar V2_ROUTER_ADDRESSES = /*#__PURE__*/ constructSameAddressMap(V2_ROUTER_ADDRESS); // Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nvar DEFAULT_ADDRESSES = {\n    v3CoreFactoryAddress: \"0x1F98431c8aD98523631AE4a59f267346ea31F984\",\n    multicallAddress: \"0x1F98415757620B543A52E61c46B32eB19261F984\",\n    quoterAddress: \"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6\",\n    v3MigratorAddress: \"0xA5644E29708357803b5A882D272c41cC0dF92B34\",\n    nonfungiblePositionManagerAddress: \"0xC36442b4a4522E871399CD717aBDD847Ab11FE88\"\n};\nvar MAINNET_ADDRESSES = /*#__PURE__*/ _extends({}, DEFAULT_ADDRESSES, {\n    v1MixedRouteQuoterAddress: \"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E\"\n});\nvar GOERLI_ADDRESSES = /*#__PURE__*/ _extends({}, DEFAULT_ADDRESSES, {\n    v1MixedRouteQuoterAddress: \"0xBa60b6e6fF25488308789E6e0A65D838be34194e\"\n});\nvar OPTIMISM_ADDRESSES = DEFAULT_ADDRESSES;\nvar ARBITRUM_ONE_ADDRESSES = /*#__PURE__*/ _extends({}, DEFAULT_ADDRESSES, {\n    multicallAddress: \"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB\",\n    tickLensAddress: \"0xbfd8137f7d1516D3ea5cA83523914859ec47F573\"\n});\nvar POLYGON_ADDRESSES = DEFAULT_ADDRESSES; // celo v3 addresses\nvar CELO_ADDRESSES = {\n    v3CoreFactoryAddress: \"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc\",\n    multicallAddress: \"0x633987602DE5C4F337e3DbF265303A1080324204\",\n    quoterAddress: \"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8\",\n    v3MigratorAddress: \"0x3cFd4d48EDfDCC53D3f173F596f621064614C582\",\n    nonfungiblePositionManagerAddress: \"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A\",\n    tickLensAddress: \"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D\"\n}; // BNB v3 addresses\nvar BNB_ADDRESSES = {\n    v3CoreFactoryAddress: \"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7\",\n    multicallAddress: \"0x963Df249eD09c358A4819E39d9Cd5736c3087184\",\n    quoterAddress: \"0x78D78E420Da98ad378D7799bE8f4AF69033EB077\",\n    v3MigratorAddress: \"0x32681814957e0C13117ddc0c2aba232b5c9e760f\",\n    nonfungiblePositionManagerAddress: \"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613\",\n    tickLensAddress: \"0xD9270014D396281579760619CCf4c3af0501A47C\",\n    swapRouter02Address: \"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2\"\n}; // optimism goerli addresses\nvar OPTIMISM_GOERLI_ADDRESSES = {\n    v3CoreFactoryAddress: \"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10\",\n    multicallAddress: \"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd\",\n    quoterAddress: \"0x9569CbA925c8ca2248772A9A4976A516743A246F\",\n    v3MigratorAddress: \"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8\",\n    nonfungiblePositionManagerAddress: \"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6\",\n    tickLensAddress: \"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e\"\n}; // optimism sepolia addresses\nvar OPTIMISM_SEPOLIA_ADDRESSES = {\n    v3CoreFactoryAddress: \"0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF\",\n    multicallAddress: \"0x80e4e06841bb76AA9735E0448cB8d003C0EF009a\",\n    quoterAddress: \"0x0FBEa6cf957d95ee9313490050F6A0DA68039404\",\n    v3MigratorAddress: \"0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07\",\n    nonfungiblePositionManagerAddress: \"0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d\",\n    tickLensAddress: \"0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5\"\n}; // arbitrum goerli v3 addresses\nvar ARBITRUM_GOERLI_ADDRESSES = {\n    v3CoreFactoryAddress: \"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6\",\n    multicallAddress: \"0x8260CB40247290317a4c062F3542622367F206Ee\",\n    quoterAddress: \"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA\",\n    v3MigratorAddress: \"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3\",\n    nonfungiblePositionManagerAddress: \"0x622e4726a167799826d1E1D150b076A7725f5D81\",\n    tickLensAddress: \"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8\"\n}; // sepolia v3 addresses\nvar SEPOLIA_ADDRESSES = {\n    v3CoreFactoryAddress: \"0x0227628f3F023bb0B980b67D528571c95c6DaC1c\",\n    multicallAddress: \"0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07\",\n    quoterAddress: \"0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3\",\n    v3MigratorAddress: \"0x729004182cF005CEC8Bd85df140094b6aCbe8b15\",\n    nonfungiblePositionManagerAddress: \"0x1238536071E1c677A632429e3655c799b22cDA52\",\n    tickLensAddress: \"0xd7f33bcdb21b359c8ee6f0251d30e94832baad07\"\n}; // Avalanche v3 addresses\nvar AVALANCHE_ADDRESSES = {\n    v3CoreFactoryAddress: \"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD\",\n    multicallAddress: \"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2\",\n    quoterAddress: \"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F\",\n    v3MigratorAddress: \"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97\",\n    nonfungiblePositionManagerAddress: \"0x655C406EBFa14EE2006250925e54ec43AD184f8B\",\n    tickLensAddress: \"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950\",\n    swapRouter02Address: \"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE\"\n};\nvar BASE_ADDRESSES = {\n    v3CoreFactoryAddress: \"0x33128a8fC17869897dcE68Ed026d694621f6FDfD\",\n    multicallAddress: \"0x091e99cb1C49331a94dD62755D168E941AbD0693\",\n    quoterAddress: \"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a\",\n    v3MigratorAddress: \"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7\",\n    nonfungiblePositionManagerAddress: \"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1\",\n    tickLensAddress: \"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d\",\n    swapRouter02Address: \"0x2626664c2603336E57B271c5C0b26F421741e481\"\n}; // Base Goerli v3 addresses\nvar BASE_GOERLI_ADDRESSES = {\n    v3CoreFactoryAddress: \"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2\",\n    multicallAddress: \"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439\",\n    quoterAddress: \"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9\",\n    v3MigratorAddress: \"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE\",\n    nonfungiblePositionManagerAddress: \"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30\",\n    tickLensAddress: \"0x1acB873Ee909D0c98adB18e4474943249F931b92\",\n    swapRouter02Address: \"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d\"\n};\nvar CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_SEPOLIA] = OPTIMISM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M);\n/* V3 Contract Addresses */ var V3_CORE_FACTORY_ADDRESSES = /*#__PURE__*/ _extends({}, /*#__PURE__*/ SUPPORTED_CHAINS.reduce(function(memo, chainId) {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;\n    return memo;\n}, {}));\nvar V3_MIGRATOR_ADDRESSES = /*#__PURE__*/ _extends({}, /*#__PURE__*/ SUPPORTED_CHAINS.reduce(function(memo, chainId) {\n    var v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress;\n    if (v3MigratorAddress) {\n        memo[chainId] = v3MigratorAddress;\n    }\n    return memo;\n}, {}));\nvar MULTICALL_ADDRESSES = /*#__PURE__*/ _extends({}, /*#__PURE__*/ SUPPORTED_CHAINS.reduce(function(memo, chainId) {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress;\n    return memo;\n}, {}));\n/**\r\n * The oldest V0 governance address\r\n */ var GOVERNANCE_ALPHA_V0_ADDRESSES = /*#__PURE__*/ constructSameAddressMap(\"0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F\");\n/**\r\n * The older V1 governance address\r\n */ var GOVERNANCE_ALPHA_V1_ADDRESSES = (_GOVERNANCE_ALPHA_V1_ = {}, _GOVERNANCE_ALPHA_V1_[ChainId.MAINNET] = \"0xC4e172459f1E7939D522503B81AFAaC1014CE6F6\", _GOVERNANCE_ALPHA_V1_);\n/**\r\n * The latest governor bravo that is currently admin of timelock\r\n */ var GOVERNANCE_BRAVO_ADDRESSES = (_GOVERNANCE_BRAVO_ADD = {}, _GOVERNANCE_BRAVO_ADD[ChainId.MAINNET] = \"0x408ED6354d4973f66138C91495F2f2FCbd8724C3\", _GOVERNANCE_BRAVO_ADD);\nvar TIMELOCK_ADDRESSES = /*#__PURE__*/ constructSameAddressMap(\"0x1a9C8182C09F50C8318d769245beA52c32BE35BC\");\nvar MERKLE_DISTRIBUTOR_ADDRESS = (_MERKLE_DISTRIBUTOR_A = {}, _MERKLE_DISTRIBUTOR_A[ChainId.MAINNET] = \"0x090D4613473dEE047c3f2706764f49E0821D256e\", _MERKLE_DISTRIBUTOR_A);\nvar ARGENT_WALLET_DETECTOR_ADDRESS = (_ARGENT_WALLET_DETECT = {}, _ARGENT_WALLET_DETECT[ChainId.MAINNET] = \"0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8\", _ARGENT_WALLET_DETECT);\nvar QUOTER_ADDRESSES = /*#__PURE__*/ _extends({}, /*#__PURE__*/ SUPPORTED_CHAINS.reduce(function(memo, chainId) {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress;\n    return memo;\n}, {}));\nvar NONFUNGIBLE_POSITION_MANAGER_ADDRESSES = /*#__PURE__*/ _extends({}, /*#__PURE__*/ SUPPORTED_CHAINS.reduce(function(memo, chainId) {\n    var nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress;\n    if (nonfungiblePositionManagerAddress) {\n        memo[chainId] = nonfungiblePositionManagerAddress;\n    }\n    return memo;\n}, {}));\nvar ENS_REGISTRAR_ADDRESSES = /*#__PURE__*/ _extends({}, /*#__PURE__*/ constructSameAddressMap(\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"));\nvar SOCKS_CONTROLLER_ADDRESSES = (_SOCKS_CONTROLLER_ADD = {}, _SOCKS_CONTROLLER_ADD[ChainId.MAINNET] = \"0x65770b5283117639760beA3F867b69b3697a91dd\", _SOCKS_CONTROLLER_ADD);\nvar TICK_LENS_ADDRESSES = /*#__PURE__*/ _extends({}, /*#__PURE__*/ SUPPORTED_CHAINS.reduce(function(memo, chainId) {\n    var tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress;\n    if (tickLensAddress) {\n        memo[chainId] = tickLensAddress;\n    }\n    return memo;\n}, {}));\nvar MIXED_ROUTE_QUOTER_V1_ADDRESSES = /*#__PURE__*/ SUPPORTED_CHAINS.reduce(function(memo, chainId) {\n    var v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress;\n    if (v1MixedRouteQuoterAddress) {\n        memo[chainId] = v1MixedRouteQuoterAddress;\n    }\n    return memo;\n}, {});\nvar SWAP_ROUTER_02_ADDRESSES = function SWAP_ROUTER_02_ADDRESSES(chainId) {\n    if (chainId == ChainId.BNB) {\n        return CHAIN_TO_ADDRESSES_MAP[chainId].swapRouter02Address;\n    }\n    return \"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45\";\n};\nvar TradeType;\n(function(TradeType) {\n    TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n    TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\nvar Rounding;\n(function(Rounding) {\n    Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n    Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n    Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\nvar MaxUint256 = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nvar _toSignificantRoundin, _toFixedRounding;\nvar Decimal = /*#__PURE__*/ toformat__WEBPACK_IMPORTED_MODULE_4___default()(decimal_js_light__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\nvar Big = /*#__PURE__*/ toformat__WEBPACK_IMPORTED_MODULE_4___default()(big_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\nvar Fraction = /*#__PURE__*/ function() {\n    function Fraction(numerator, denominator) {\n        if (denominator === void 0) {\n            denominator = jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(1);\n        }\n        this.numerator = jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(numerator);\n        this.denominator = jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(denominator);\n    }\n    Fraction.tryParseFraction = function tryParseFraction(fractionish) {\n        if (fractionish instanceof jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"] || typeof fractionish === \"number\" || typeof fractionish === \"string\") return new Fraction(fractionish);\n        if (\"numerator\" in fractionish && \"denominator\" in fractionish) return fractionish;\n        throw new Error(\"Could not parse fraction\");\n    } // performs floor division\n    ;\n    var _proto = Fraction.prototype;\n    _proto.invert = function invert() {\n        return new Fraction(this.denominator, this.numerator);\n    };\n    _proto.add = function add(other) {\n        var otherParsed = Fraction.tryParseFraction(other);\n        if (jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this.numerator, otherParsed.numerator), this.denominator);\n        }\n        return new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.numerator, otherParsed.denominator), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(otherParsed.numerator, this.denominator)), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.denominator, otherParsed.denominator));\n    };\n    _proto.subtract = function subtract(other) {\n        var otherParsed = Fraction.tryParseFraction(other);\n        if (jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].subtract(this.numerator, otherParsed.numerator), this.denominator);\n        }\n        return new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].subtract(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.numerator, otherParsed.denominator), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(otherParsed.numerator, this.denominator)), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.denominator, otherParsed.denominator));\n    };\n    _proto.lessThan = function lessThan(other) {\n        var otherParsed = Fraction.tryParseFraction(other);\n        return jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lessThan(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.numerator, otherParsed.denominator), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(otherParsed.numerator, this.denominator));\n    };\n    _proto.equalTo = function equalTo(other) {\n        var otherParsed = Fraction.tryParseFraction(other);\n        return jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].equal(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.numerator, otherParsed.denominator), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(otherParsed.numerator, this.denominator));\n    };\n    _proto.greaterThan = function greaterThan(other) {\n        var otherParsed = Fraction.tryParseFraction(other);\n        return jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].greaterThan(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.numerator, otherParsed.denominator), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(otherParsed.numerator, this.denominator));\n    };\n    _proto.multiply = function multiply(other) {\n        var otherParsed = Fraction.tryParseFraction(other);\n        return new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.numerator, otherParsed.numerator), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.denominator, otherParsed.denominator));\n    };\n    _proto.divide = function divide(other) {\n        var otherParsed = Fraction.tryParseFraction(other);\n        return new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.numerator, otherParsed.denominator), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(this.denominator, otherParsed.numerator));\n    };\n    _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n        if (format === void 0) {\n            format = {\n                groupSeparator: \"\"\n            };\n        }\n        if (rounding === void 0) {\n            rounding = Rounding.ROUND_HALF_UP;\n        }\n        !Number.isInteger(significantDigits) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, significantDigits + \" is not an integer.\") : 0 : void 0;\n        !(significantDigits > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, significantDigits + \" is not positive.\") : 0 : void 0;\n        Decimal.set({\n            precision: significantDigits + 1,\n            rounding: toSignificantRounding[rounding]\n        });\n        var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n        return quotient.toFormat(quotient.decimalPlaces(), format);\n    };\n    _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n        if (format === void 0) {\n            format = {\n                groupSeparator: \"\"\n            };\n        }\n        if (rounding === void 0) {\n            rounding = Rounding.ROUND_HALF_UP;\n        }\n        !Number.isInteger(decimalPlaces) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, decimalPlaces + \" is not an integer.\") : 0 : void 0;\n        !(decimalPlaces >= 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, decimalPlaces + \" is negative.\") : 0 : void 0;\n        Big.DP = decimalPlaces;\n        Big.RM = toFixedRounding[rounding];\n        return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n    } /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */ ;\n    _createClass(Fraction, [\n        {\n            key: \"quotient\",\n            get: function get() {\n                return jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].divide(this.numerator, this.denominator);\n            } // remainder after floor division\n        },\n        {\n            key: \"remainder\",\n            get: function get() {\n                return new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remainder(this.numerator, this.denominator), this.denominator);\n            }\n        },\n        {\n            key: \"asFraction\",\n            get: function get() {\n                return new Fraction(this.numerator, this.denominator);\n            }\n        }\n    ]);\n    return Fraction;\n}();\nvar Big$1 = /*#__PURE__*/ toformat__WEBPACK_IMPORTED_MODULE_4___default()(big_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\nvar CurrencyAmount = /*#__PURE__*/ function(_Fraction) {\n    _inheritsLoose(CurrencyAmount, _Fraction);\n    function CurrencyAmount(currency, numerator, denominator) {\n        var _this;\n        _this = _Fraction.call(this, numerator, denominator) || this;\n        !jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lessThanOrEqual(_this.quotient, MaxUint256) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"AMOUNT\") : 0 : void 0;\n        _this.currency = currency;\n        _this.decimalScale = jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exponentiate(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(10), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(currency.decimals));\n        return _this;\n    }\n    /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */ CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {\n        return new CurrencyAmount(currency, rawAmount);\n    } /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */ ;\n    CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {\n        return new CurrencyAmount(currency, numerator, denominator);\n    };\n    var _proto = CurrencyAmount.prototype;\n    _proto.add = function add(other) {\n        !this.currency.equals(other.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"CURRENCY\") : 0 : void 0;\n        var added = _Fraction.prototype.add.call(this, other);\n        return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n    };\n    _proto.subtract = function subtract(other) {\n        !this.currency.equals(other.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"CURRENCY\") : 0 : void 0;\n        var subtracted = _Fraction.prototype.subtract.call(this, other);\n        return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n    };\n    _proto.multiply = function multiply(other) {\n        var multiplied = _Fraction.prototype.multiply.call(this, other);\n        return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n    };\n    _proto.divide = function divide(other) {\n        var divided = _Fraction.prototype.divide.call(this, other);\n        return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n    };\n    _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n        if (significantDigits === void 0) {\n            significantDigits = 6;\n        }\n        if (rounding === void 0) {\n            rounding = Rounding.ROUND_DOWN;\n        }\n        return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);\n    };\n    _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n        if (decimalPlaces === void 0) {\n            decimalPlaces = this.currency.decimals;\n        }\n        if (rounding === void 0) {\n            rounding = Rounding.ROUND_DOWN;\n        }\n        !(decimalPlaces <= this.currency.decimals) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"DECIMALS\") : 0 : void 0;\n        return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);\n    };\n    _proto.toExact = function toExact(format) {\n        if (format === void 0) {\n            format = {\n                groupSeparator: \"\"\n            };\n        }\n        Big$1.DP = this.currency.decimals;\n        return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n    };\n    _createClass(CurrencyAmount, [\n        {\n            key: \"wrapped\",\n            get: function get() {\n                if (this.currency.isToken) return this;\n                return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n            }\n        }\n    ]);\n    return CurrencyAmount;\n}(Fraction);\nvar ONE_HUNDRED = /*#__PURE__*/ new Fraction(/*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(100));\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */ function toPercent(fraction) {\n    return new Percent(fraction.numerator, fraction.denominator);\n}\nvar Percent = /*#__PURE__*/ function(_Fraction) {\n    _inheritsLoose(Percent, _Fraction);\n    function Percent() {\n        var _this;\n        _this = _Fraction.apply(this, arguments) || this;\n        /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */ _this.isPercent = true;\n        return _this;\n    }\n    var _proto = Percent.prototype;\n    _proto.add = function add(other) {\n        return toPercent(_Fraction.prototype.add.call(this, other));\n    };\n    _proto.subtract = function subtract(other) {\n        return toPercent(_Fraction.prototype.subtract.call(this, other));\n    };\n    _proto.multiply = function multiply(other) {\n        return toPercent(_Fraction.prototype.multiply.call(this, other));\n    };\n    _proto.divide = function divide(other) {\n        return toPercent(_Fraction.prototype.divide.call(this, other));\n    };\n    _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n        if (significantDigits === void 0) {\n            significantDigits = 5;\n        }\n        return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n    };\n    _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n        if (decimalPlaces === void 0) {\n            decimalPlaces = 2;\n        }\n        return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n    };\n    return Percent;\n}(Fraction);\nvar Price = /*#__PURE__*/ function(_Fraction) {\n    _inheritsLoose(Price, _Fraction);\n    /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */ function Price() {\n        var _this;\n        var baseCurrency, quoteCurrency, denominator, numerator;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (args.length === 4) {\n            baseCurrency = args[0];\n            quoteCurrency = args[1];\n            denominator = args[2];\n            numerator = args[3];\n        } else {\n            var result = args[0].quoteAmount.divide(args[0].baseAmount);\n            var _ref = [\n                args[0].baseAmount.currency,\n                args[0].quoteAmount.currency,\n                result.denominator,\n                result.numerator\n            ];\n            baseCurrency = _ref[0];\n            quoteCurrency = _ref[1];\n            denominator = _ref[2];\n            numerator = _ref[3];\n        }\n        _this = _Fraction.call(this, numerator, denominator) || this;\n        _this.baseCurrency = baseCurrency;\n        _this.quoteCurrency = quoteCurrency;\n        _this.scalar = new Fraction(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exponentiate(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(10), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(baseCurrency.decimals)), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].exponentiate(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(10), jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(quoteCurrency.decimals)));\n        return _this;\n    }\n    /**\r\n   * Flip the price, switching the base and quote currency\r\n   */ var _proto = Price.prototype;\n    _proto.invert = function invert() {\n        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n    } /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */ ;\n    _proto.multiply = function multiply(other) {\n        !this.quoteCurrency.equals(other.baseCurrency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        var fraction = _Fraction.prototype.multiply.call(this, other);\n        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n    } /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */ ;\n    _proto.quote = function quote(currencyAmount) {\n        !currencyAmount.currency.equals(this.baseCurrency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        var result = _Fraction.prototype.multiply.call(this, currencyAmount);\n        return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n    } /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */ ;\n    _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n        if (significantDigits === void 0) {\n            significantDigits = 6;\n        }\n        return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n    };\n    _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n        if (decimalPlaces === void 0) {\n            decimalPlaces = 4;\n        }\n        return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n    };\n    _createClass(Price, [\n        {\n            key: \"adjustedForDecimals\",\n            get: function get() {\n                return _Fraction.prototype.multiply.call(this, this.scalar);\n            }\n        }\n    ]);\n    return Price;\n}(Fraction);\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */ var BaseCurrency = /**\r\n * Constructs an instance of the base class `BaseCurrency`.\r\n * @param chainId the chain ID on which this currency resides\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */ function BaseCurrency(chainId, decimals, symbol, name) {\n    !Number.isSafeInteger(chainId) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"CHAIN_ID\") : 0 : void 0;\n    !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"DECIMALS\") : 0 : void 0;\n    this.chainId = chainId;\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n};\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */ var NativeCurrency = /*#__PURE__*/ function(_BaseCurrency) {\n    _inheritsLoose(NativeCurrency, _BaseCurrency);\n    function NativeCurrency() {\n        var _this;\n        _this = _BaseCurrency.apply(this, arguments) || this;\n        _this.isNative = true;\n        _this.isToken = false;\n        return _this;\n    }\n    return NativeCurrency;\n}(BaseCurrency);\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */ function validateAndParseAddress(address) {\n    try {\n        return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_5__.getAddress)(address);\n    } catch (error) {\n        throw new Error(address + \" is not a valid address.\");\n    }\n} // Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nvar startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;\n/**\r\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\r\n * @param address the unchecksummed hex address\r\n */ function checkValidAddress(address) {\n    if (startsWith0xLen42HexRegex.test(address)) {\n        return address;\n    }\n    throw new Error(address + \" is not a valid address.\");\n}\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */ var Token = /*#__PURE__*/ function(_BaseCurrency) {\n    _inheritsLoose(Token, _BaseCurrency);\n    /**\r\n   *\r\n   * @param chainId {@link BaseCurrency#chainId}\r\n   * @param address The contract address on the chain on which this token lives\r\n   * @param decimals {@link BaseCurrency#decimals}\r\n   * @param symbol {@link BaseCurrency#symbol}\r\n   * @param name {@link BaseCurrency#name}\r\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\r\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\r\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\r\n   */ function Token(chainId, address, decimals, symbol, name, bypassChecksum, buyFeeBps, sellFeeBps) {\n        var _this;\n        _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;\n        _this.isNative = false;\n        _this.isToken = true;\n        if (bypassChecksum) {\n            _this.address = checkValidAddress(address);\n        } else {\n            _this.address = validateAndParseAddress(address);\n        }\n        if (buyFeeBps) {\n            !buyFeeBps.gte(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"NON-NEGATIVE FOT FEES\") : 0 : void 0;\n        }\n        if (sellFeeBps) {\n            !sellFeeBps.gte(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_6__.BigNumber.from(0)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"NON-NEGATIVE FOT FEES\") : 0 : void 0;\n        }\n        _this.buyFeeBps = buyFeeBps;\n        _this.sellFeeBps = sellFeeBps;\n        return _this;\n    }\n    /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */ var _proto = Token.prototype;\n    _proto.equals = function equals(other) {\n        return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase();\n    } /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */ ;\n    _proto.sortsBefore = function sortsBefore(other) {\n        !(this.chainId === other.chainId) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"CHAIN_IDS\") : 0 : void 0;\n        !(this.address.toLowerCase() !== other.address.toLowerCase()) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"ADDRESSES\") : 0 : void 0;\n        return this.address.toLowerCase() < other.address.toLowerCase();\n    } /**\r\n   * Return this token, which does not need to be wrapped\r\n   */ ;\n    _createClass(Token, [\n        {\n            key: \"wrapped\",\n            get: function get() {\n                return this;\n            }\n        }\n    ]);\n    return Token;\n}(BaseCurrency);\nvar _WETH;\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */ var WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/ new Token(1, \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[3] = /*#__PURE__*/ new Token(3, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[4] = /*#__PURE__*/ new Token(4, \"0xc778417E063141139Fce010982780140Aa0cD5Ab\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[5] = /*#__PURE__*/ new Token(5, \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[42] = /*#__PURE__*/ new Token(42, \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[10] = /*#__PURE__*/ new Token(10, \"0x4200000000000000000000000000000000000006\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[69] = /*#__PURE__*/ new Token(69, \"0x4200000000000000000000000000000000000006\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[11155420] = /*#__PURE__*/ new Token(11155420, \"0x4200000000000000000000000000000000000006\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[42161] = /*#__PURE__*/ new Token(42161, \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[421611] = /*#__PURE__*/ new Token(421611, \"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[8453] = /*#__PURE__*/ new Token(8453, \"0x4200000000000000000000000000000000000006\", 18, \"WETH\", \"Wrapped Ether\"), _WETH[56] = /*#__PURE__*/ new Token(56, \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\", 18, \"WBNB\", \"Wrapped BNB\"), _WETH[137] = /*#__PURE__*/ new Token(137, \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\", 18, \"WMATIC\", \"Wrapped MATIC\"), _WETH[43114] = /*#__PURE__*/ new Token(43114, \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\", 18, \"WAVAX\", \"Wrapped AVAX\"), _WETH);\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */ var Ether = /*#__PURE__*/ function(_NativeCurrency) {\n    _inheritsLoose(Ether, _NativeCurrency);\n    function Ether(chainId) {\n        return _NativeCurrency.call(this, chainId, 18, \"ETH\", \"Ether\") || this;\n    }\n    Ether.onChain = function onChain(chainId) {\n        var _this$_etherCache$cha;\n        return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);\n    };\n    var _proto = Ether.prototype;\n    _proto.equals = function equals(other) {\n        return other.isNative && other.chainId === this.chainId;\n    };\n    _createClass(Ether, [\n        {\n            key: \"wrapped\",\n            get: function get() {\n                var weth9 = WETH9[this.chainId];\n                !!!weth9 ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"WRAPPED\") : 0 : void 0;\n                return weth9;\n            }\n        }\n    ]);\n    return Ether;\n}(NativeCurrency);\nEther._etherCache = {};\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */ function computePriceImpact(midPrice, inputAmount, outputAmount) {\n    var quotedOutputAmount = midPrice.quote(inputAmount); // calculate price impact := (exactQuote - outputAmount) / exactQuote\n    var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n    return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n// `maxSize` by removing the last item\nfunction sortedInsert(items, add, maxSize, comparator) {\n    !(maxSize > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"MAX_SIZE_ZERO\") : 0 : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n    !(items.length <= maxSize) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"ITEMS_SIZE\") : 0 : void 0; // short circuit first item add\n    if (items.length === 0) {\n        items.push(add);\n        return null;\n    } else {\n        var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n        if (isFull && comparator(items[items.length - 1], add) <= 0) {\n            return add;\n        }\n        var lo = 0, hi = items.length;\n        while(lo < hi){\n            var mid = lo + hi >>> 1;\n            if (comparator(items[mid], add) <= 0) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        items.splice(lo, 0, add);\n        return isFull ? items.pop() : null;\n    }\n}\nvar MAX_SAFE_INTEGER = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(Number.MAX_SAFE_INTEGER);\nvar ZERO = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(0);\nvar ONE = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(1);\nvar TWO = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(2);\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */ function sqrt(value) {\n    !jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].greaterThanOrEqual(value, ZERO) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(false, \"NEGATIVE\") : 0 : void 0; // rely on built in sqrt if possible\n    if (jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lessThan(value, MAX_SAFE_INTEGER)) {\n        return jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BigInt(Math.floor(Math.sqrt(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toNumber(value))));\n    }\n    var z;\n    var x;\n    z = value;\n    x = jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].divide(value, TWO), ONE);\n    while(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lessThan(x, z)){\n        z = x;\n        x = jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].divide(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_0__[\"default\"].divide(value, x), x), TWO);\n    }\n    return z;\n}\n //# sourceMappingURL=sdk-core.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FACTORY_ADDRESS_MAP: () => (/* binding */ FACTORY_ADDRESS_MAP),\n/* harmony export */   INIT_CODE_HASH: () => (/* binding */ INIT_CODE_HASH),\n/* harmony export */   InsufficientInputAmountError: () => (/* binding */ InsufficientInputAmountError),\n/* harmony export */   InsufficientReservesError: () => (/* binding */ InsufficientReservesError),\n/* harmony export */   MINIMUM_LIQUIDITY: () => (/* binding */ MINIMUM_LIQUIDITY),\n/* harmony export */   Pair: () => (/* binding */ Pair),\n/* harmony export */   Route: () => (/* binding */ Route),\n/* harmony export */   Router: () => (/* binding */ Router),\n/* harmony export */   Trade: () => (/* binding */ Trade),\n/* harmony export */   computePairAddress: () => (/* binding */ computePairAddress),\n/* harmony export */   inputOutputComparator: () => (/* binding */ inputOutputComparator),\n/* harmony export */   tradeComparator: () => (/* binding */ tradeComparator)\n/* harmony export */ });\n/* harmony import */ var _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uniswap/sdk-core */ \"(ssr)/./node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js\");\n/* harmony import */ var jsbi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsbi */ \"(ssr)/./node_modules/jsbi/dist/jsbi.mjs\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var _ethersproject_solidity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethersproject/solidity */ \"(ssr)/./node_modules/@ethersproject/solidity/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_address__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n\n\n\n\n\n\nvar FACTORY_ADDRESS_MAP = {\n    // Mainnet\n    1: \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\",\n    // Ropsten\n    3: \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\",\n    // Goerli\n    5: \"0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\",\n    // Optimism\n    10: \"0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf\",\n    // Arbitrum\n    42161: \"0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9\",\n    // Avalanche\n    43114: \"0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C\",\n    // Base\n    8453: \"0x8909dc15e40173ff4699343b6eb8132c65e18ec6\",\n    // BNB\n    56: \"0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6\",\n    // Polygon\n    137: \"0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C\"\n};\nvar INIT_CODE_HASH = \"0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\";\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(1000); // exports for internal consumption\nvar ZERO = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(0);\nvar ONE = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(1);\nvar FIVE = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(5);\nvar _997 = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(997);\nvar _1000 = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(1000);\nvar BASIS_POINTS = /*#__PURE__*/ jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(10000);\nvar ZERO_PERCENT = /*#__PURE__*/ new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(ZERO);\nvar ONE_HUNDRED_PERCENT = /*#__PURE__*/ new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(ONE);\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _construct(Parent, args, Class) {\n    if (_isNativeReflectConstruct()) {\n        _construct = Reflect.construct;\n    } else {\n        _construct = function _construct(Parent, args, Class) {\n            var a = [\n                null\n            ];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n            if (Class) _setPrototypeOf(instance, Class.prototype);\n            return instance;\n        };\n    }\n    return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n        if (Class === null || !_isNativeFunction(Class)) return Class;\n        if (typeof Class !== \"function\") {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n        function Wrapper() {\n            return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, {\n            constructor: {\n                value: Wrapper,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        return _setPrototypeOf(Wrapper, Class);\n    };\n    return _wrapNativeSuper(Class);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it;\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            return function() {\n                if (i >= o.length) return {\n                    done: true\n                };\n                return {\n                    done: false,\n                    value: o[i++]\n                };\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    it = o[Symbol.iterator]();\n    return it.next.bind(it);\n}\n// see https://stackoverflow.com/a/41102306\nvar CAN_SET_PROTOTYPE = \"setPrototypeOf\" in Object;\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */ var InsufficientReservesError = /*#__PURE__*/ function(_Error) {\n    _inheritsLoose(InsufficientReservesError, _Error);\n    function InsufficientReservesError() {\n        var _this;\n        _this = _Error.call(this) || this;\n        _this.isInsufficientReservesError = true;\n        _this.name = _this.constructor.name;\n        if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n        return _this;\n    }\n    return InsufficientReservesError;\n}(/*#__PURE__*/ _wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */ var InsufficientInputAmountError = /*#__PURE__*/ function(_Error2) {\n    _inheritsLoose(InsufficientInputAmountError, _Error2);\n    function InsufficientInputAmountError() {\n        var _this2;\n        _this2 = _Error2.call(this) || this;\n        _this2.isInsufficientInputAmountError = true;\n        _this2.name = _this2.constructor.name;\n        if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n        return _this2;\n    }\n    return InsufficientInputAmountError;\n}(/*#__PURE__*/ _wrapNativeSuper(Error));\nvar computePairAddress = function computePairAddress(_ref) {\n    var factoryAddress = _ref.factoryAddress, tokenA = _ref.tokenA, tokenB = _ref.tokenB;\n    var _ref2 = tokenA.sortsBefore(tokenB) ? [\n        tokenA,\n        tokenB\n    ] : [\n        tokenB,\n        tokenA\n    ], token0 = _ref2[0], token1 = _ref2[1]; // does safety checks\n    return (0,_ethersproject_address__WEBPACK_IMPORTED_MODULE_3__.getCreate2Address)(factoryAddress, (0,_ethersproject_solidity__WEBPACK_IMPORTED_MODULE_4__.keccak256)([\n        \"bytes\"\n    ], [\n        (0,_ethersproject_solidity__WEBPACK_IMPORTED_MODULE_4__.pack)([\n            \"address\",\n            \"address\"\n        ], [\n            token0.address,\n            token1.address\n        ])\n    ]), INIT_CODE_HASH);\n};\nvar Pair = /*#__PURE__*/ function() {\n    function Pair(currencyAmountA, tokenAmountB) {\n        var tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n         ? [\n            currencyAmountA,\n            tokenAmountB\n        ] : [\n            tokenAmountB,\n            currencyAmountA\n        ];\n        this.liquidityToken = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, \"UNI-V2\", \"Uniswap V2\");\n        this.tokenAmounts = tokenAmounts;\n    }\n    Pair.getAddress = function getAddress(tokenA, tokenB) {\n        return computePairAddress({\n            factoryAddress: FACTORY_ADDRESS_MAP[tokenA.chainId],\n            tokenA: tokenA,\n            tokenB: tokenB\n        });\n    } /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */ ;\n    var _proto = Pair.prototype;\n    _proto.involvesToken = function involvesToken(token) {\n        return token.equals(this.token0) || token.equals(this.token1);\n    } /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */ ;\n    /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */ _proto.priceOf = function priceOf(token) {\n        !this.involvesToken(token) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        return token.equals(this.token0) ? this.token0Price : this.token1Price;\n    } /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */ ;\n    _proto.reserveOf = function reserveOf(token) {\n        !this.involvesToken(token) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n    } /**\r\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\r\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\r\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\r\n   *\r\n   * With fee-on-transfer tax, intuitively it's just:\r\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\r\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\r\n   * where amountInWithFee is the amountIn after taking out the LP fees\r\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   *\r\n   * But we are illustrating the math deduction below to ensure that's the case.\r\n   *\r\n   * before swap A * B = K where A = reserveIn B = reserveOut\r\n   *\r\n   * after swap A' * B' = K where only k is a constant value\r\n   *\r\n   * getAmountOut\r\n   *\r\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\r\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\r\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\r\n   *             /\r\n   *             (1 - amountOut.buyFeesBips / 10000)\r\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\r\n   *                                                    /\r\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\r\n   *\r\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\r\n   *                       /\r\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\r\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\r\n   *                       /\r\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\r\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\r\n   *                       /\r\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\r\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\r\n   *                       /\r\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\r\n   *                     = (B * inputAmountWithFeeAndTax)\r\n   *                       /\r\n   *                       (1000 * A + inputAmountWithFeeAndTax)\r\n   *\r\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\r\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   *\r\n   * @param inputAmount\r\n   * @param calculateFotFees\r\n   */ ;\n    _proto.getOutputAmount = function getOutputAmount(inputAmount, calculateFotFees) {\n        if (calculateFotFees === void 0) {\n            calculateFotFees = false;\n        }\n        !this.involvesToken(inputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve0.quotient, ZERO) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve1.quotient, ZERO)) {\n            throw new InsufficientReservesError();\n        }\n        var inputReserve = this.reserveOf(inputAmount.currency);\n        var outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n        var percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT;\n        var inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(inputAmount.currency, percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        ) : inputAmount;\n        var inputAmountWithFeeAndAfterTax = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputAmountAfterTax.quotient, _997);\n        var numerator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient);\n        var denominator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax);\n        var outputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n        );\n        if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(outputAmount.quotient, ZERO)) {\n            throw new InsufficientInputAmountError();\n        }\n        var percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT;\n        var outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(outputAmount.currency, outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        ) : outputAmount;\n        if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(outputAmountAfterTax.quotient, ZERO)) {\n            throw new InsufficientInputAmountError();\n        }\n        return [\n            outputAmountAfterTax,\n            new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax))\n        ];\n    } /**\r\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\r\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\r\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\r\n   *\r\n   * With fee-on-transfer fees, intuitively it's just:\r\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\r\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\r\n   *\r\n   * But we are illustrating the math deduction below to ensure that's the case.\r\n   *\r\n   * before swap A * B = K where A = reserveIn B = reserveOut\r\n   *\r\n   * after swap A' * B' = K where only k is a constant value\r\n   *\r\n   * getAmountIn\r\n   *\r\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\r\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\r\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\r\n   *            /\r\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\r\n   *            /\r\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *\r\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\r\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\r\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\r\n   *\r\n   * @param outputAmount\r\n   */ ;\n    _proto.getInputAmount = function getInputAmount(outputAmount, calculateFotFees) {\n        if (calculateFotFees === void 0) {\n            calculateFotFees = false;\n        }\n        !this.involvesToken(outputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        var percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT;\n        var outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(outputAmount.currency, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        ) : outputAmount;\n        if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve0.quotient, ZERO) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(this.reserve1.quotient, ZERO) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) || jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)) {\n            throw new InsufficientReservesError();\n        }\n        var outputReserve = this.reserveOf(outputAmount.currency);\n        var inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n        var numerator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000);\n        var denominator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997);\n        var inputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n        );\n        var percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT;\n        var inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT) ? _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(inputAmount.currency, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        ) : inputAmount;\n        return [\n            inputAmountBeforeTax,\n            new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))\n        ];\n    };\n    _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n        !totalSupply.currency.equals(this.liquidityToken) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"LIQUIDITY\") : 0 : void 0;\n        var tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n         ? [\n            tokenAmountA,\n            tokenAmountB\n        ] : [\n            tokenAmountB,\n            tokenAmountA\n        ];\n        !(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        var liquidity;\n        if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(totalSupply.quotient, ZERO)) {\n            liquidity = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract((0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sqrt)(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)), MINIMUM_LIQUIDITY);\n        } else {\n            var amount0 = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient);\n            var amount1 = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient);\n            liquidity = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n        }\n        if (!jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError();\n        }\n        return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\n    };\n    _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n        if (feeOn === void 0) {\n            feeOn = false;\n        }\n        !this.involvesToken(token) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TOKEN\") : 0 : void 0;\n        !totalSupply.currency.equals(this.liquidityToken) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TOTAL_SUPPLY\") : 0 : void 0;\n        !liquidity.currency.equals(this.liquidityToken) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"LIQUIDITY\") : 0 : void 0;\n        !jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lessThanOrEqual(liquidity.quotient, totalSupply.quotient) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"LIQUIDITY\") : 0 : void 0;\n        var totalSupplyAdjusted;\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply;\n        } else {\n            !!!kLast ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"K_LAST\") : 0 : void 0;\n            var kLastParsed = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(kLast);\n            if (!jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].equal(kLastParsed, ZERO)) {\n                var rootK = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sqrt)(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(this.reserve0.quotient, this.reserve1.quotient));\n                var rootKLast = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sqrt)(kLastParsed);\n                if (jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].greaterThan(rootK, rootKLast)) {\n                    var numerator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(totalSupply.quotient, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(rootK, rootKLast));\n                    var denominator = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(rootK, FIVE), rootKLast);\n                    var feeLiquidity = jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(numerator, denominator);\n                    totalSupplyAdjusted = totalSupply.add(_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity));\n                } else {\n                    totalSupplyAdjusted = totalSupply;\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply;\n            }\n        }\n        return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(token, jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].divide(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient));\n    };\n    _proto.derivePercentAfterSellFees = function derivePercentAfterSellFees(inputAmount) {\n        var sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency) ? this.token0.wrapped.sellFeeBps : this.token1.wrapped.sellFeeBps;\n        if (sellFeeBips != null && sellFeeBips.gt(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(0))) {\n            return ONE_HUNDRED_PERCENT.subtract(new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(sellFeeBips)).divide(BASIS_POINTS));\n        } else {\n            return ZERO_PERCENT;\n        }\n    };\n    _proto.derivePercentAfterBuyFees = function derivePercentAfterBuyFees(outputAmount) {\n        var buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency) ? this.token0.wrapped.buyFeeBps : this.token1.wrapped.buyFeeBps;\n        if (buyFeeBps != null && buyFeeBps.gt(_ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_5__.BigNumber.from(0))) {\n            return ONE_HUNDRED_PERCENT.subtract(new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Percent(jsbi__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BigInt(buyFeeBps)).divide(BASIS_POINTS));\n        } else {\n            return ZERO_PERCENT;\n        }\n    };\n    _createClass(Pair, [\n        {\n            key: \"token0Price\",\n            get: function get() {\n                var result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\n                return new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.token0, this.token1, result.denominator, result.numerator);\n            }\n        },\n        {\n            key: \"token1Price\",\n            get: function get() {\n                var result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\n                return new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.token1, this.token0, result.denominator, result.numerator);\n            }\n        },\n        {\n            key: \"chainId\",\n            get: function get() {\n                return this.token0.chainId;\n            }\n        },\n        {\n            key: \"token0\",\n            get: function get() {\n                return this.tokenAmounts[0].currency;\n            }\n        },\n        {\n            key: \"token1\",\n            get: function get() {\n                return this.tokenAmounts[1].currency;\n            }\n        },\n        {\n            key: \"reserve0\",\n            get: function get() {\n                return this.tokenAmounts[0];\n            }\n        },\n        {\n            key: \"reserve1\",\n            get: function get() {\n                return this.tokenAmounts[1];\n            }\n        }\n    ]);\n    return Pair;\n}();\nvar Route = /*#__PURE__*/ function() {\n    function Route(pairs, input, output) {\n        this._midPrice = null;\n        !(pairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"PAIRS\") : 0 : void 0;\n        var chainId = pairs[0].chainId;\n        !pairs.every(function(pair) {\n            return pair.chainId === chainId;\n        }) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"CHAIN_IDS\") : 0 : void 0;\n        var wrappedInput = input.wrapped;\n        !pairs[0].involvesToken(wrappedInput) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"INPUT\") : 0 : void 0;\n        !(typeof output === \"undefined\" || pairs[pairs.length - 1].involvesToken(output.wrapped)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"OUTPUT\") : 0 : void 0;\n        var path = [\n            wrappedInput\n        ];\n        for(var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;){\n            var _step$value = _step.value, i = _step$value[0], pair = _step$value[1];\n            var currentInput = path[i];\n            !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"PATH\") : 0 : void 0;\n            var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n            path.push(_output);\n        }\n        this.pairs = pairs;\n        this.path = path;\n        this.input = input;\n        this.output = output;\n    }\n    _createClass(Route, [\n        {\n            key: \"midPrice\",\n            get: function get() {\n                if (this._midPrice !== null) return this._midPrice;\n                var prices = [];\n                for(var _iterator2 = _createForOfIteratorHelperLoose(this.pairs.entries()), _step2; !(_step2 = _iterator2()).done;){\n                    var _step2$value = _step2.value, i = _step2$value[0], pair = _step2$value[1];\n                    prices.push(this.path[i].equals(pair.token0) ? new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient) : new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient));\n                }\n                var reduced = prices.slice(1).reduce(function(accumulator, currentValue) {\n                    return accumulator.multiply(currentValue);\n                }, prices[0]);\n                return this._midPrice = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.input, this.output, reduced.denominator, reduced.numerator);\n            }\n        },\n        {\n            key: \"chainId\",\n            get: function get() {\n                return this.pairs[0].chainId;\n            }\n        }\n    ]);\n    return Route;\n}();\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nfunction inputOutputComparator(a, b) {\n    // must have same input and output token for comparison\n    !a.inputAmount.currency.equals(b.inputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"INPUT_CURRENCY\") : 0 : void 0;\n    !a.outputAmount.currency.equals(b.outputAmount.currency) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"OUTPUT_CURRENCY\") : 0 : void 0;\n    if (a.outputAmount.equalTo(b.outputAmount)) {\n        if (a.inputAmount.equalTo(b.inputAmount)) {\n            return 0;\n        } // trade A requires less input than trade B, so A should come first\n        if (a.inputAmount.lessThan(b.inputAmount)) {\n            return -1;\n        } else {\n            return 1;\n        }\n    } else {\n        // tradeA has less output than trade B, so should come second\n        if (a.outputAmount.lessThan(b.outputAmount)) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\nfunction tradeComparator(a, b) {\n    var ioComp = inputOutputComparator(a, b);\n    if (ioComp !== 0) {\n        return ioComp;\n    } // consider lowest slippage next, since these are less likely to fail\n    if (a.priceImpact.lessThan(b.priceImpact)) {\n        return -1;\n    } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n        return 1;\n    } // finally consider the number of hops since each hop costs gas\n    return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */ var Trade = /*#__PURE__*/ function() {\n    function Trade(route, amount, tradeType) {\n        this.route = route;\n        this.tradeType = tradeType;\n        var tokenAmounts = new Array(route.path.length);\n        if (tradeType === _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT) {\n            !amount.currency.equals(route.input) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"INPUT\") : 0 : void 0;\n            tokenAmounts[0] = amount.wrapped;\n            for(var i = 0; i < route.path.length - 1; i++){\n                var pair = route.pairs[i];\n                var _pair$getOutputAmount = pair.getOutputAmount(tokenAmounts[i]), outputAmount = _pair$getOutputAmount[0];\n                tokenAmounts[i + 1] = outputAmount;\n            }\n            this.inputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator);\n            this.outputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.output, tokenAmounts[tokenAmounts.length - 1].numerator, tokenAmounts[tokenAmounts.length - 1].denominator);\n        } else {\n            !amount.currency.equals(route.output) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"OUTPUT\") : 0 : void 0;\n            tokenAmounts[tokenAmounts.length - 1] = amount.wrapped;\n            for(var _i = route.path.length - 1; _i > 0; _i--){\n                var _pair = route.pairs[_i - 1];\n                var _pair$getInputAmount = _pair.getInputAmount(tokenAmounts[_i]), inputAmount = _pair$getInputAmount[0];\n                tokenAmounts[_i - 1] = inputAmount;\n            }\n            this.inputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator);\n            this.outputAmount = _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator);\n        }\n        this.executionPrice = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.quotient, this.outputAmount.quotient);\n        this.priceImpact = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.computePriceImpact)(route.midPrice, this.inputAmount, this.outputAmount);\n    }\n    /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */ Trade.exactIn = function exactIn(route, amountIn) {\n        return new Trade(route, amountIn, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT);\n    } /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */ ;\n    Trade.exactOut = function exactOut(route, amountOut) {\n        return new Trade(route, amountOut, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT);\n    } /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */ ;\n    var _proto = Trade.prototype;\n    _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n        !!slippageTolerance.lessThan(ZERO) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"SLIPPAGE_TOLERANCE\") : 0 : void 0;\n        if (this.tradeType === _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT) {\n            return this.outputAmount;\n        } else {\n            var slippageAdjustedAmountOut = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.quotient).quotient;\n            return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut);\n        }\n    } /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */ ;\n    _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n        !!slippageTolerance.lessThan(ZERO) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"SLIPPAGE_TOLERANCE\") : 0 : void 0;\n        if (this.tradeType === _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT) {\n            return this.inputAmount;\n        } else {\n            var slippageAdjustedAmountIn = new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient).quotient;\n            return _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n        }\n    } /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */ ;\n    Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, currentPairs, nextAmountIn, bestTrades) {\n        var _ref = _temp === void 0 ? {} : _temp, _ref$maxNumResults = _ref.maxNumResults, maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults, _ref$maxHops = _ref.maxHops, maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n        if (currentPairs === void 0) {\n            currentPairs = [];\n        }\n        if (nextAmountIn === void 0) {\n            nextAmountIn = currencyAmountIn;\n        }\n        if (bestTrades === void 0) {\n            bestTrades = [];\n        }\n        !(pairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"PAIRS\") : 0 : void 0;\n        !(maxHops > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"MAX_HOPS\") : 0 : void 0;\n        !(currencyAmountIn === nextAmountIn || currentPairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"INVALID_RECURSION\") : 0 : void 0;\n        var amountIn = nextAmountIn.wrapped;\n        var tokenOut = currencyOut.wrapped;\n        for(var i = 0; i < pairs.length; i++){\n            var pair = pairs[i]; // pair irrelevant\n            if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue;\n            if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n            var amountOut = void 0;\n            try {\n                ;\n                var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n                amountOut = _pair$getOutputAmount2[0];\n            } catch (error) {\n                // input too low\n                if (error.isInsufficientInputAmountError) {\n                    continue;\n                }\n                throw error;\n            } // we have arrived at the output token, so this is the final trade of one of the paths\n            if (amountOut.currency.equals(tokenOut)) {\n                (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sortedInsert)(bestTrades, new Trade(new Route([].concat(currentPairs, [\n                    pair\n                ]), currencyAmountIn.currency, currencyOut), currencyAmountIn, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n            } else if (maxHops > 1 && pairs.length > 1) {\n                var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n                Trade.bestTradeExactIn(pairsExcludingThisPair, currencyAmountIn, currencyOut, {\n                    maxNumResults: maxNumResults,\n                    maxHops: maxHops - 1\n                }, [].concat(currentPairs, [\n                    pair\n                ]), amountOut, bestTrades);\n            }\n        }\n        return bestTrades;\n    } /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */ ;\n    _proto.worstExecutionPrice = function worstExecutionPrice(slippageTolerance) {\n        return new _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.Price(this.inputAmount.currency, this.outputAmount.currency, this.maximumAmountIn(slippageTolerance).quotient, this.minimumAmountOut(slippageTolerance).quotient);\n    } /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */ ;\n    Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, currentPairs, nextAmountOut, bestTrades) {\n        var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$maxNumResults = _ref2.maxNumResults, maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults, _ref2$maxHops = _ref2.maxHops, maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n        if (currentPairs === void 0) {\n            currentPairs = [];\n        }\n        if (nextAmountOut === void 0) {\n            nextAmountOut = currencyAmountOut;\n        }\n        if (bestTrades === void 0) {\n            bestTrades = [];\n        }\n        !(pairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"PAIRS\") : 0 : void 0;\n        !(maxHops > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"MAX_HOPS\") : 0 : void 0;\n        !(currencyAmountOut === nextAmountOut || currentPairs.length > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"INVALID_RECURSION\") : 0 : void 0;\n        var amountOut = nextAmountOut.wrapped;\n        var tokenIn = currencyIn.wrapped;\n        for(var i = 0; i < pairs.length; i++){\n            var pair = pairs[i]; // pair irrelevant\n            if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue;\n            if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n            var amountIn = void 0;\n            try {\n                ;\n                var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n                amountIn = _pair$getInputAmount2[0];\n            } catch (error) {\n                // not enough liquidity in this pair\n                if (error.isInsufficientReservesError) {\n                    continue;\n                }\n                throw error;\n            } // we have arrived at the input token, so this is the first trade of one of the paths\n            if (amountIn.currency.equals(tokenIn)) {\n                (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.sortedInsert)(bestTrades, new Trade(new Route([\n                    pair\n                ].concat(currentPairs), currencyIn, currencyAmountOut.currency), currencyAmountOut, _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n            } else if (maxHops > 1 && pairs.length > 1) {\n                var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n                Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, currencyAmountOut, {\n                    maxNumResults: maxNumResults,\n                    maxHops: maxHops - 1\n                }, [\n                    pair\n                ].concat(currentPairs), amountIn, bestTrades);\n            }\n        }\n        return bestTrades;\n    };\n    return Trade;\n}();\nfunction toHex(currencyAmount) {\n    return \"0x\" + currencyAmount.quotient.toString(16);\n}\nvar ZERO_HEX = \"0x0\";\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */ var Router = /*#__PURE__*/ function() {\n    /**\r\n   * Cannot be constructed.\r\n   */ function Router() {}\n    /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */ Router.swapCallParameters = function swapCallParameters(trade, options) {\n        var etherIn = trade.inputAmount.currency.isNative;\n        var etherOut = trade.outputAmount.currency.isNative; // the router does not support both ether in and out\n        !!(etherIn && etherOut) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"ETHER_IN_OUT\") : 0 : void 0;\n        !(!(\"ttl\" in options) || options.ttl > 0) ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"TTL\") : 0 : void 0;\n        var to = (0,_uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.validateAndParseAddress)(options.recipient);\n        var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n        var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n        var path = trade.route.path.map(function(token) {\n            return token.address;\n        });\n        var deadline = \"ttl\" in options ? \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : \"0x\" + options.deadline.toString(16);\n        var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n        var methodName;\n        var args;\n        var value;\n        switch(trade.tradeType){\n            case _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_INPUT:\n                if (etherIn) {\n                    methodName = useFeeOnTransfer ? \"swapExactETHForTokensSupportingFeeOnTransferTokens\" : \"swapExactETHForTokens\"; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n                    args = [\n                        amountOut,\n                        path,\n                        to,\n                        deadline\n                    ];\n                    value = amountIn;\n                } else if (etherOut) {\n                    methodName = useFeeOnTransfer ? \"swapExactTokensForETHSupportingFeeOnTransferTokens\" : \"swapExactTokensForETH\"; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n                    args = [\n                        amountIn,\n                        amountOut,\n                        path,\n                        to,\n                        deadline\n                    ];\n                    value = ZERO_HEX;\n                } else {\n                    methodName = useFeeOnTransfer ? \"swapExactTokensForTokensSupportingFeeOnTransferTokens\" : \"swapExactTokensForTokens\"; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n                    args = [\n                        amountIn,\n                        amountOut,\n                        path,\n                        to,\n                        deadline\n                    ];\n                    value = ZERO_HEX;\n                }\n                break;\n            case _uniswap_sdk_core__WEBPACK_IMPORTED_MODULE_0__.TradeType.EXACT_OUTPUT:\n                !!useFeeOnTransfer ?  true ? (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(false, \"EXACT_OUT_FOT\") : 0 : void 0;\n                if (etherIn) {\n                    methodName = \"swapETHForExactTokens\"; // (uint amountOut, address[] calldata path, address to, uint deadline)\n                    args = [\n                        amountOut,\n                        path,\n                        to,\n                        deadline\n                    ];\n                    value = amountIn;\n                } else if (etherOut) {\n                    methodName = \"swapTokensForExactETH\"; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n                    args = [\n                        amountOut,\n                        amountIn,\n                        path,\n                        to,\n                        deadline\n                    ];\n                    value = ZERO_HEX;\n                } else {\n                    methodName = \"swapTokensForExactTokens\"; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n                    args = [\n                        amountOut,\n                        amountIn,\n                        path,\n                        to,\n                        deadline\n                    ];\n                    value = ZERO_HEX;\n                }\n                break;\n        }\n        return {\n            methodName: methodName,\n            args: args,\n            value: value\n        };\n    };\n    return Router;\n}();\n //# sourceMappingURL=v2-sdk.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js\n");

/***/ })

};
;