"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-block-tracker";
exports.ids = ["vendor-chunks/eth-block-tracker"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-block-tracker/dist/BaseBlockTracker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/eth-block-tracker/dist/BaseBlockTracker.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseBlockTracker = void 0;\nconst safe_event_emitter_1 = __importDefault(__webpack_require__(/*! @metamask/safe-event-emitter */ \"(ssr)/./node_modules/@metamask/safe-event-emitter/index.js\"));\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue)=>accumulator + currentValue;\nconst blockTrackerEvents = [\n    \"sync\",\n    \"latest\"\n];\nclass BaseBlockTracker extends safe_event_emitter_1.default {\n    constructor(opts){\n        super();\n        // config\n        this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n        // state\n        this._currentBlock = null;\n        this._isRunning = false;\n        // bind functions for internal use\n        this._onNewListener = this._onNewListener.bind(this);\n        this._onRemoveListener = this._onRemoveListener.bind(this);\n        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n        // listen for handler changes\n        this._setupInternalEvents();\n    }\n    async destroy() {\n        this._cancelBlockResetTimeout();\n        await this._maybeEnd();\n        super.removeAllListeners();\n    }\n    isRunning() {\n        return this._isRunning;\n    }\n    getCurrentBlock() {\n        return this._currentBlock;\n    }\n    async getLatestBlock() {\n        // return if available\n        if (this._currentBlock) {\n            return this._currentBlock;\n        }\n        // wait for a new latest block\n        const latestBlock = await new Promise((resolve)=>this.once(\"latest\", resolve));\n        // return newly set current block\n        return latestBlock;\n    }\n    // dont allow module consumer to remove our internal event listeners\n    removeAllListeners(eventName) {\n        // perform default behavior, preserve fn arity\n        if (eventName) {\n            super.removeAllListeners(eventName);\n        } else {\n            super.removeAllListeners();\n        }\n        // re-add internal events\n        this._setupInternalEvents();\n        // trigger stop check just in case\n        this._onRemoveListener();\n        return this;\n    }\n    _setupInternalEvents() {\n        // first remove listeners for idempotence\n        this.removeListener(\"newListener\", this._onNewListener);\n        this.removeListener(\"removeListener\", this._onRemoveListener);\n        // then add them\n        this.on(\"newListener\", this._onNewListener);\n        this.on(\"removeListener\", this._onRemoveListener);\n    }\n    _onNewListener(eventName) {\n        // `newListener` is called *before* the listener is added\n        if (blockTrackerEvents.includes(eventName)) {\n            this._maybeStart();\n        }\n    }\n    _onRemoveListener() {\n        // `removeListener` is called *after* the listener is removed\n        if (this._getBlockTrackerEventCount() > 0) {\n            return;\n        }\n        this._maybeEnd();\n    }\n    async _maybeStart() {\n        if (this._isRunning) {\n            return;\n        }\n        this._isRunning = true;\n        // cancel setting latest block to stale\n        this._cancelBlockResetTimeout();\n        await this._start();\n        this.emit(\"_started\");\n    }\n    async _maybeEnd() {\n        if (!this._isRunning) {\n            return;\n        }\n        this._isRunning = false;\n        this._setupBlockResetTimeout();\n        await this._end();\n        this.emit(\"_ended\");\n    }\n    _getBlockTrackerEventCount() {\n        return blockTrackerEvents.map((eventName)=>this.listenerCount(eventName)).reduce(calculateSum);\n    }\n    _newPotentialLatest(newBlock) {\n        const currentBlock = this._currentBlock;\n        // only update if blok number is higher\n        if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) {\n            return;\n        }\n        this._setCurrentBlock(newBlock);\n    }\n    _setCurrentBlock(newBlock) {\n        const oldBlock = this._currentBlock;\n        this._currentBlock = newBlock;\n        this.emit(\"latest\", newBlock);\n        this.emit(\"sync\", {\n            oldBlock,\n            newBlock\n        });\n    }\n    _setupBlockResetTimeout() {\n        // clear any existing timeout\n        this._cancelBlockResetTimeout();\n        // clear latest block when stale\n        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n        // nodejs - dont hold process open\n        if (this._blockResetTimeout.unref) {\n            this._blockResetTimeout.unref();\n        }\n    }\n    _cancelBlockResetTimeout() {\n        if (this._blockResetTimeout) {\n            clearTimeout(this._blockResetTimeout);\n        }\n    }\n    _resetCurrentBlock() {\n        this._currentBlock = null;\n    }\n}\nexports.BaseBlockTracker = BaseBlockTracker;\n/**\n * Converts a number represented as a string in hexadecimal format into a native\n * number.\n *\n * @param hexInt - The hex string.\n * @returns The number.\n */ function hexToInt(hexInt) {\n    return Number.parseInt(hexInt, 16);\n} //# sourceMappingURL=BaseBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/dist/BaseBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/dist/PollingBlockTracker.js":
/*!********************************************************************!*\
  !*** ./node_modules/eth-block-tracker/dist/PollingBlockTracker.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PollingBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(__webpack_require__(/*! json-rpc-random-id */ \"(ssr)/./node_modules/json-rpc-random-id/index.js\"));\nconst pify_1 = __importDefault(__webpack_require__(/*! pify */ \"(ssr)/./node_modules/eth-block-tracker/node_modules/pify/index.js\"));\nconst BaseBlockTracker_1 = __webpack_require__(/*! ./BaseBlockTracker */ \"(ssr)/./node_modules/eth-block-tracker/dist/BaseBlockTracker.js\");\nconst logging_utils_1 = __webpack_require__(/*! ./logging-utils */ \"(ssr)/./node_modules/eth-block-tracker/dist/logging-utils.js\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, \"polling-block-tracker\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nconst sec = 1000;\nclass PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n    constructor(opts = {}){\n        var _a;\n        // parse + validate args\n        if (!opts.provider) {\n            throw new Error(\"PollingBlockTracker - no provider specified.\");\n        }\n        super({\n            blockResetDuration: (_a = opts.blockResetDuration) !== null && _a !== void 0 ? _a : opts.pollingInterval\n        });\n        // config\n        this._provider = opts.provider;\n        this._pollingInterval = opts.pollingInterval || 20 * sec;\n        this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;\n        this._keepEventLoopActive = opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;\n        this._setSkipCacheFlag = opts.setSkipCacheFlag || false;\n    }\n    // trigger block polling\n    async checkForLatestBlock() {\n        await this._updateLatestBlock();\n        return await this.getLatestBlock();\n    }\n    async _start() {\n        this._synchronize();\n    }\n    async _end() {\n    // No-op\n    }\n    async _synchronize() {\n        var _a;\n        while(this._isRunning){\n            try {\n                await this._updateLatestBlock();\n                const promise = timeout(this._pollingInterval, !this._keepEventLoopActive);\n                this.emit(\"_waitingForNextIteration\");\n                await promise;\n            } catch (err) {\n                const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${(_a = err.stack) !== null && _a !== void 0 ? _a : err}`);\n                try {\n                    this.emit(\"error\", newErr);\n                } catch (emitErr) {\n                    console.error(newErr);\n                }\n                const promise = timeout(this._retryTimeout, !this._keepEventLoopActive);\n                this.emit(\"_waitingForNextIteration\");\n                await promise;\n            }\n        }\n    }\n    async _updateLatestBlock() {\n        // fetch + set latest block\n        const latestBlock = await this._fetchLatestBlock();\n        this._newPotentialLatest(latestBlock);\n    }\n    async _fetchLatestBlock() {\n        const req = {\n            jsonrpc: \"2.0\",\n            id: createRandomId(),\n            method: \"eth_blockNumber\",\n            params: []\n        };\n        if (this._setSkipCacheFlag) {\n            req.skipCache = true;\n        }\n        log(\"Making request\", req);\n        const res = await (0, pify_1.default)((cb)=>this._provider.sendAsync(req, cb))();\n        log(\"Got response\", res);\n        if (res.error) {\n            throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error.message}`);\n        }\n        return res.result;\n    }\n}\nexports.PollingBlockTracker = PollingBlockTracker;\n/**\n * Waits for the specified amount of time.\n *\n * @param duration - The amount of time in milliseconds.\n * @param unref - Assuming this function is run in a Node context, governs\n * whether Node should wait before the `setTimeout` has completed before ending\n * the process (true for no, false for yes). Defaults to false.\n * @returns A promise that can be used to wait.\n */ function timeout(duration, unref) {\n    return new Promise((resolve)=>{\n        const timeoutRef = setTimeout(resolve, duration);\n        // don't keep process open\n        if (timeoutRef.unref && unref) {\n            timeoutRef.unref();\n        }\n    });\n} //# sourceMappingURL=PollingBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/dist/PollingBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js":
/*!**********************************************************************!*\
  !*** ./node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SubscribeBlockTracker = void 0;\nconst json_rpc_random_id_1 = __importDefault(__webpack_require__(/*! json-rpc-random-id */ \"(ssr)/./node_modules/json-rpc-random-id/index.js\"));\nconst BaseBlockTracker_1 = __webpack_require__(/*! ./BaseBlockTracker */ \"(ssr)/./node_modules/eth-block-tracker/dist/BaseBlockTracker.js\");\nconst createRandomId = (0, json_rpc_random_id_1.default)();\nclass SubscribeBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {\n    constructor(opts = {}){\n        // parse + validate args\n        if (!opts.provider) {\n            throw new Error(\"SubscribeBlockTracker - no provider specified.\");\n        }\n        // BaseBlockTracker constructor\n        super(opts);\n        // config\n        this._provider = opts.provider;\n        this._subscriptionId = null;\n    }\n    async checkForLatestBlock() {\n        return await this.getLatestBlock();\n    }\n    async _start() {\n        if (this._subscriptionId === undefined || this._subscriptionId === null) {\n            try {\n                const blockNumber = await this._call(\"eth_blockNumber\");\n                this._subscriptionId = await this._call(\"eth_subscribe\", \"newHeads\");\n                this._provider.on(\"data\", this._handleSubData.bind(this));\n                this._newPotentialLatest(blockNumber);\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        }\n    }\n    async _end() {\n        if (this._subscriptionId !== null && this._subscriptionId !== undefined) {\n            try {\n                await this._call(\"eth_unsubscribe\", this._subscriptionId);\n                this._subscriptionId = null;\n            } catch (e) {\n                this.emit(\"error\", e);\n            }\n        }\n    }\n    _call(method, ...params) {\n        return new Promise((resolve, reject)=>{\n            this._provider.sendAsync({\n                id: createRandomId(),\n                method,\n                params,\n                jsonrpc: \"2.0\"\n            }, (err, res)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(res.result);\n                }\n            });\n        });\n    }\n    _handleSubData(_, response) {\n        var _a;\n        if (response.method === \"eth_subscription\" && ((_a = response.params) === null || _a === void 0 ? void 0 : _a.subscription) === this._subscriptionId) {\n            this._newPotentialLatest(response.params.result.number);\n        }\n    }\n}\nexports.SubscribeBlockTracker = SubscribeBlockTracker; //# sourceMappingURL=SubscribeBlockTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC9TdWJzY3JpYmVCbG9ja1RyYWNrZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUs7QUFDckMsTUFBTUcsdUJBQXVCUixnQkFBZ0JTLG1CQUFPQSxDQUFDLDRFQUFvQjtBQUN6RSxNQUFNQyxxQkFBcUJELG1CQUFPQSxDQUFDLDJGQUFvQjtBQUN2RCxNQUFNRSxpQkFBaUIsQ0FBQyxHQUFHSCxxQkFBcUJJLE9BQU87QUFDdkQsTUFBTUwsOEJBQThCRyxtQkFBbUJHLGdCQUFnQjtJQUNuRUMsWUFBWUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUNuQix3QkFBd0I7UUFDeEIsSUFBSSxDQUFDQSxLQUFLQyxRQUFRLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsK0JBQStCO1FBQy9CLEtBQUssQ0FBQ0Y7UUFDTixTQUFTO1FBQ1QsSUFBSSxDQUFDRyxTQUFTLEdBQUdILEtBQUtDLFFBQVE7UUFDOUIsSUFBSSxDQUFDRyxlQUFlLEdBQUc7SUFDM0I7SUFDQSxNQUFNQyxzQkFBc0I7UUFDeEIsT0FBTyxNQUFNLElBQUksQ0FBQ0MsY0FBYztJQUNwQztJQUNBLE1BQU1DLFNBQVM7UUFDWCxJQUFJLElBQUksQ0FBQ0gsZUFBZSxLQUFLSSxhQUFhLElBQUksQ0FBQ0osZUFBZSxLQUFLLE1BQU07WUFDckUsSUFBSTtnQkFDQSxNQUFNSyxjQUFlLE1BQU0sSUFBSSxDQUFDQyxLQUFLLENBQUM7Z0JBQ3RDLElBQUksQ0FBQ04sZUFBZSxHQUFJLE1BQU0sSUFBSSxDQUFDTSxLQUFLLENBQUMsaUJBQWlCO2dCQUMxRCxJQUFJLENBQUNQLFNBQVMsQ0FBQ1EsRUFBRSxDQUFDLFFBQVEsSUFBSSxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJO2dCQUN2RCxJQUFJLENBQUNDLG1CQUFtQixDQUFDTDtZQUM3QixFQUNBLE9BQU9NLEdBQUc7Z0JBQ04sSUFBSSxDQUFDQyxJQUFJLENBQUMsU0FBU0Q7WUFDdkI7UUFDSjtJQUNKO0lBQ0EsTUFBTUUsT0FBTztRQUNULElBQUksSUFBSSxDQUFDYixlQUFlLEtBQUssUUFBUSxJQUFJLENBQUNBLGVBQWUsS0FBS0ksV0FBVztZQUNyRSxJQUFJO2dCQUNBLE1BQU0sSUFBSSxDQUFDRSxLQUFLLENBQUMsbUJBQW1CLElBQUksQ0FBQ04sZUFBZTtnQkFDeEQsSUFBSSxDQUFDQSxlQUFlLEdBQUc7WUFDM0IsRUFDQSxPQUFPVyxHQUFHO2dCQUNOLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFNBQVNEO1lBQ3ZCO1FBQ0o7SUFDSjtJQUNBTCxNQUFNUSxNQUFNLEVBQUUsR0FBR0MsTUFBTSxFQUFFO1FBQ3JCLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztZQUN6QixJQUFJLENBQUNuQixTQUFTLENBQUNvQixTQUFTLENBQUM7Z0JBQ3JCQyxJQUFJNUI7Z0JBQ0pzQjtnQkFDQUM7Z0JBQ0FNLFNBQVM7WUFDYixHQUFHLENBQUNDLEtBQUtDO2dCQUNMLElBQUlELEtBQUs7b0JBQ0xKLE9BQU9JO2dCQUNYLE9BQ0s7b0JBQ0RMLFFBQVFNLElBQUlDLE1BQU07Z0JBQ3RCO1lBQ0o7UUFDSjtJQUNKO0lBQ0FoQixlQUFlaUIsQ0FBQyxFQUFFQyxRQUFRLEVBQUU7UUFDeEIsSUFBSUM7UUFDSixJQUFJRCxTQUFTWixNQUFNLEtBQUssc0JBQ3BCLENBQUMsQ0FBQ2EsS0FBS0QsU0FBU1gsTUFBTSxNQUFNLFFBQVFZLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0MsWUFBWSxNQUFNLElBQUksQ0FBQzVCLGVBQWUsRUFBRTtZQUN4RyxJQUFJLENBQUNVLG1CQUFtQixDQUFDZ0IsU0FBU1gsTUFBTSxDQUFDUyxNQUFNLENBQUNLLE1BQU07UUFDMUQ7SUFDSjtBQUNKO0FBQ0EzQyw2QkFBNkIsR0FBR0UsdUJBQ2hDLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9ldGgtYmxvY2stdHJhY2tlci9kaXN0L1N1YnNjcmliZUJsb2NrVHJhY2tlci5qcz9iZDhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdWJzY3JpYmVCbG9ja1RyYWNrZXIgPSB2b2lkIDA7XG5jb25zdCBqc29uX3JwY19yYW5kb21faWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianNvbi1ycGMtcmFuZG9tLWlkXCIpKTtcbmNvbnN0IEJhc2VCbG9ja1RyYWNrZXJfMSA9IHJlcXVpcmUoXCIuL0Jhc2VCbG9ja1RyYWNrZXJcIik7XG5jb25zdCBjcmVhdGVSYW5kb21JZCA9ICgwLCBqc29uX3JwY19yYW5kb21faWRfMS5kZWZhdWx0KSgpO1xuY2xhc3MgU3Vic2NyaWJlQmxvY2tUcmFja2VyIGV4dGVuZHMgQmFzZUJsb2NrVHJhY2tlcl8xLkJhc2VCbG9ja1RyYWNrZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgICAgICAvLyBwYXJzZSArIHZhbGlkYXRlIGFyZ3NcbiAgICAgICAgaWYgKCFvcHRzLnByb3ZpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1YnNjcmliZUJsb2NrVHJhY2tlciAtIG5vIHByb3ZpZGVyIHNwZWNpZmllZC4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBCYXNlQmxvY2tUcmFja2VyIGNvbnN0cnVjdG9yXG4gICAgICAgIHN1cGVyKG9wdHMpO1xuICAgICAgICAvLyBjb25maWdcbiAgICAgICAgdGhpcy5fcHJvdmlkZXIgPSBvcHRzLnByb3ZpZGVyO1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25JZCA9IG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGNoZWNrRm9yTGF0ZXN0QmxvY2soKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldExhdGVzdEJsb2NrKCk7XG4gICAgfVxuICAgIGFzeW5jIF9zdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvbklkID09PSB1bmRlZmluZWQgfHwgdGhpcy5fc3Vic2NyaXB0aW9uSWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSAoYXdhaXQgdGhpcy5fY2FsbCgnZXRoX2Jsb2NrTnVtYmVyJykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbklkID0gKGF3YWl0IHRoaXMuX2NhbGwoJ2V0aF9zdWJzY3JpYmUnLCAnbmV3SGVhZHMnKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvdmlkZXIub24oJ2RhdGEnLCB0aGlzLl9oYW5kbGVTdWJEYXRhLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX25ld1BvdGVudGlhbExhdGVzdChibG9ja051bWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBfZW5kKCkge1xuICAgICAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uSWQgIT09IG51bGwgJiYgdGhpcy5fc3Vic2NyaXB0aW9uSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9jYWxsKCdldGhfdW5zdWJzY3JpYmUnLCB0aGlzLl9zdWJzY3JpcHRpb25JZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uSWQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NhbGwobWV0aG9kLCAuLi5wYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3ZpZGVyLnNlbmRBc3luYyh7XG4gICAgICAgICAgICAgICAgaWQ6IGNyZWF0ZVJhbmRvbUlkKCksXG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgIH0sIChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcy5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2hhbmRsZVN1YkRhdGEoXywgcmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAocmVzcG9uc2UubWV0aG9kID09PSAnZXRoX3N1YnNjcmlwdGlvbicgJiZcbiAgICAgICAgICAgICgoX2EgPSByZXNwb25zZS5wYXJhbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpcHRpb24pID09PSB0aGlzLl9zdWJzY3JpcHRpb25JZCkge1xuICAgICAgICAgICAgdGhpcy5fbmV3UG90ZW50aWFsTGF0ZXN0KHJlc3BvbnNlLnBhcmFtcy5yZXN1bHQubnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuU3Vic2NyaWJlQmxvY2tUcmFja2VyID0gU3Vic2NyaWJlQmxvY2tUcmFja2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlQmxvY2tUcmFja2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTdWJzY3JpYmVCbG9ja1RyYWNrZXIiLCJqc29uX3JwY19yYW5kb21faWRfMSIsInJlcXVpcmUiLCJCYXNlQmxvY2tUcmFja2VyXzEiLCJjcmVhdGVSYW5kb21JZCIsImRlZmF1bHQiLCJCYXNlQmxvY2tUcmFja2VyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwicHJvdmlkZXIiLCJFcnJvciIsIl9wcm92aWRlciIsIl9zdWJzY3JpcHRpb25JZCIsImNoZWNrRm9yTGF0ZXN0QmxvY2siLCJnZXRMYXRlc3RCbG9jayIsIl9zdGFydCIsInVuZGVmaW5lZCIsImJsb2NrTnVtYmVyIiwiX2NhbGwiLCJvbiIsIl9oYW5kbGVTdWJEYXRhIiwiYmluZCIsIl9uZXdQb3RlbnRpYWxMYXRlc3QiLCJlIiwiZW1pdCIsIl9lbmQiLCJtZXRob2QiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNlbmRBc3luYyIsImlkIiwianNvbnJwYyIsImVyciIsInJlcyIsInJlc3VsdCIsIl8iLCJyZXNwb25zZSIsIl9hIiwic3Vic2NyaXB0aW9uIiwibnVtYmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/eth-block-tracker/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./PollingBlockTracker */ \"(ssr)/./node_modules/eth-block-tracker/dist/PollingBlockTracker.js\"), exports);\n__exportStar(__webpack_require__(/*! ./SubscribeBlockTracker */ \"(ssr)/./node_modules/eth-block-tracker/dist/SubscribeBlockTracker.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/eth-block-tracker/dist/types.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBTUMsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JKLE9BQU9PLGNBQWMsQ0FBQ0wsR0FBR0csSUFBSTtRQUFFRyxZQUFZO1FBQU1DLEtBQUs7WUFBYSxPQUFPTixDQUFDLENBQUNDLEVBQUU7UUFBRTtJQUFFO0FBQ3RGLElBQU0sU0FBU0YsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSU0sZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTUCxDQUFDLEVBQUVRLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLVCxFQUFHLElBQUlTLE1BQU0sYUFBYSxDQUFDWixPQUFPYSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJYixnQkFBZ0JZLFVBQVNSLEdBQUdTO0FBQzNIO0FBQ0FaLDhDQUE2QztJQUFFZ0IsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE4sYUFBYU8sbUJBQU9BLENBQUMsaUdBQXVCLEdBQUdOO0FBQy9DRCxhQUFhTyxtQkFBT0EsQ0FBQyxxR0FBeUIsR0FBR047QUFDakRELGFBQWFPLG1CQUFPQSxDQUFDLHFFQUFTLEdBQUdOLFVBQ2pDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BzZS0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9ldGgtYmxvY2stdHJhY2tlci9kaXN0L2luZGV4LmpzP2FiYWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Qb2xsaW5nQmxvY2tUcmFja2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9TdWJzY3JpYmVCbG9ja1RyYWNrZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9fZXhwb3J0U3RhciIsImV4cG9ydHMiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidmFsdWUiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/dist/logging-utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/eth-block-tracker/dist/logging-utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createModuleLogger = exports.projectLogger = void 0;\nconst utils_1 = __webpack_require__(/*! @metamask/utils */ \"(ssr)/./node_modules/@metamask/utils/dist/index.js\");\nObject.defineProperty(exports, \"createModuleLogger\", ({\n    enumerable: true,\n    get: function() {\n        return utils_1.createModuleLogger;\n    }\n}));\nexports.projectLogger = (0, utils_1.createProjectLogger)(\"eth-block-tracker\"); //# sourceMappingURL=logging-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC9sb2dnaW5nLXV0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUMxRCxNQUFNSSxVQUFVQyxtQkFBT0EsQ0FBQywyRUFBaUI7QUFDekNQLHNEQUFxRDtJQUFFUSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxRQUFRRixrQkFBa0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNuSUYscUJBQXFCLEdBQUcsQ0FBQyxHQUFHSSxRQUFRSSxtQkFBbUIsRUFBRSxzQkFDekQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL2Rpc3QvbG9nZ2luZy11dGlscy5qcz9kYTE2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVNb2R1bGVMb2dnZXIgPSBleHBvcnRzLnByb2plY3RMb2dnZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBtZXRhbWFzay91dGlsc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZU1vZHVsZUxvZ2dlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMS5jcmVhdGVNb2R1bGVMb2dnZXI7IH0gfSk7XG5leHBvcnRzLnByb2plY3RMb2dnZXIgPSAoMCwgdXRpbHNfMS5jcmVhdGVQcm9qZWN0TG9nZ2VyKSgnZXRoLWJsb2NrLXRyYWNrZXInKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmctdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JlYXRlTW9kdWxlTG9nZ2VyIiwicHJvamVjdExvZ2dlciIsInV0aWxzXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsImNyZWF0ZVByb2plY3RMb2dnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/dist/logging-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/dist/types.js":
/*!******************************************************!*\
  !*** ./node_modules/eth-block-tracker/dist/types.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQyxFQUM3RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2UtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvZGlzdC90eXBlcy5qcz9kN2RiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/dist/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/node_modules/pify/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/eth-block-tracker/node_modules/pify/index.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\nconst processFn = (fn, opts)=>function() {\n        const P = opts.promiseModule;\n        const args = new Array(arguments.length);\n        for(let i = 0; i < arguments.length; i++){\n            args[i] = arguments[i];\n        }\n        return new P((resolve, reject)=>{\n            if (opts.errorFirst) {\n                args.push(function(err, result) {\n                    if (opts.multiArgs) {\n                        const results = new Array(arguments.length - 1);\n                        for(let i = 1; i < arguments.length; i++){\n                            results[i - 1] = arguments[i];\n                        }\n                        if (err) {\n                            results.unshift(err);\n                            reject(results);\n                        } else {\n                            resolve(results);\n                        }\n                    } else if (err) {\n                        reject(err);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            } else {\n                args.push(function(result) {\n                    if (opts.multiArgs) {\n                        const results = new Array(arguments.length - 1);\n                        for(let i = 0; i < arguments.length; i++){\n                            results[i] = arguments[i];\n                        }\n                        resolve(results);\n                    } else {\n                        resolve(result);\n                    }\n                });\n            }\n            fn.apply(this, args);\n        });\n    };\nmodule.exports = (obj, opts)=>{\n    opts = Object.assign({\n        exclude: [\n            /.+(Sync|Stream)$/\n        ],\n        errorFirst: true,\n        promiseModule: Promise\n    }, opts);\n    const filter = (key)=>{\n        const match = (pattern)=>typeof pattern === \"string\" ? key === pattern : pattern.test(key);\n        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);\n    };\n    let ret;\n    if (typeof obj === \"function\") {\n        ret = function() {\n            if (opts.excludeMain) {\n                return obj.apply(this, arguments);\n            }\n            return processFn(obj, opts).apply(this, arguments);\n        };\n    } else {\n        ret = Object.create(Object.getPrototypeOf(obj));\n    }\n    for(const key in obj){\n        const x = obj[key];\n        ret[key] = typeof x === \"function\" && filter(key) ? processFn(x, opts) : x;\n    }\n    return ret;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3BpZnkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxZQUFZLENBQUNDLElBQUlDLE9BQVM7UUFDL0IsTUFBTUMsSUFBSUQsS0FBS0UsYUFBYTtRQUM1QixNQUFNQyxPQUFPLElBQUlDLE1BQU1DLFVBQVVDLE1BQU07UUFFdkMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLFVBQVVDLE1BQU0sRUFBRUMsSUFBSztZQUMxQ0osSUFBSSxDQUFDSSxFQUFFLEdBQUdGLFNBQVMsQ0FBQ0UsRUFBRTtRQUN2QjtRQUVBLE9BQU8sSUFBSU4sRUFBRSxDQUFDTyxTQUFTQztZQUN0QixJQUFJVCxLQUFLVSxVQUFVLEVBQUU7Z0JBQ3BCUCxLQUFLUSxJQUFJLENBQUMsU0FBVUMsR0FBRyxFQUFFQyxNQUFNO29CQUM5QixJQUFJYixLQUFLYyxTQUFTLEVBQUU7d0JBQ25CLE1BQU1DLFVBQVUsSUFBSVgsTUFBTUMsVUFBVUMsTUFBTSxHQUFHO3dCQUU3QyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsVUFBVUMsTUFBTSxFQUFFQyxJQUFLOzRCQUMxQ1EsT0FBTyxDQUFDUixJQUFJLEVBQUUsR0FBR0YsU0FBUyxDQUFDRSxFQUFFO3dCQUM5Qjt3QkFFQSxJQUFJSyxLQUFLOzRCQUNSRyxRQUFRQyxPQUFPLENBQUNKOzRCQUNoQkgsT0FBT007d0JBQ1IsT0FBTzs0QkFDTlAsUUFBUU87d0JBQ1Q7b0JBQ0QsT0FBTyxJQUFJSCxLQUFLO3dCQUNmSCxPQUFPRztvQkFDUixPQUFPO3dCQUNOSixRQUFRSztvQkFDVDtnQkFDRDtZQUNELE9BQU87Z0JBQ05WLEtBQUtRLElBQUksQ0FBQyxTQUFVRSxNQUFNO29CQUN6QixJQUFJYixLQUFLYyxTQUFTLEVBQUU7d0JBQ25CLE1BQU1DLFVBQVUsSUFBSVgsTUFBTUMsVUFBVUMsTUFBTSxHQUFHO3dCQUU3QyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsVUFBVUMsTUFBTSxFQUFFQyxJQUFLOzRCQUMxQ1EsT0FBTyxDQUFDUixFQUFFLEdBQUdGLFNBQVMsQ0FBQ0UsRUFBRTt3QkFDMUI7d0JBRUFDLFFBQVFPO29CQUNULE9BQU87d0JBQ05QLFFBQVFLO29CQUNUO2dCQUNEO1lBQ0Q7WUFFQWQsR0FBR2tCLEtBQUssQ0FBQyxJQUFJLEVBQUVkO1FBQ2hCO0lBQ0Q7QUFFQWUsT0FBT0MsT0FBTyxHQUFHLENBQUNDLEtBQUtwQjtJQUN0QkEsT0FBT3FCLE9BQU9DLE1BQU0sQ0FBQztRQUNwQkMsU0FBUztZQUFDO1NBQW1CO1FBQzdCYixZQUFZO1FBQ1pSLGVBQWVzQjtJQUNoQixHQUFHeEI7SUFFSCxNQUFNeUIsU0FBU0MsQ0FBQUE7UUFDZCxNQUFNQyxRQUFRQyxDQUFBQSxVQUFXLE9BQU9BLFlBQVksV0FBV0YsUUFBUUUsVUFBVUEsUUFBUUMsSUFBSSxDQUFDSDtRQUN0RixPQUFPMUIsS0FBSzhCLE9BQU8sR0FBRzlCLEtBQUs4QixPQUFPLENBQUNDLElBQUksQ0FBQ0osU0FBUyxDQUFDM0IsS0FBS3VCLE9BQU8sQ0FBQ1EsSUFBSSxDQUFDSjtJQUNyRTtJQUVBLElBQUlLO0lBQ0osSUFBSSxPQUFPWixRQUFRLFlBQVk7UUFDOUJZLE1BQU07WUFDTCxJQUFJaEMsS0FBS2lDLFdBQVcsRUFBRTtnQkFDckIsT0FBT2IsSUFBSUgsS0FBSyxDQUFDLElBQUksRUFBRVo7WUFDeEI7WUFFQSxPQUFPUCxVQUFVc0IsS0FBS3BCLE1BQU1pQixLQUFLLENBQUMsSUFBSSxFQUFFWjtRQUN6QztJQUNELE9BQU87UUFDTjJCLE1BQU1YLE9BQU9hLE1BQU0sQ0FBQ2IsT0FBT2MsY0FBYyxDQUFDZjtJQUMzQztJQUVBLElBQUssTUFBTU0sT0FBT04sSUFBSztRQUN0QixNQUFNZ0IsSUFBSWhCLEdBQUcsQ0FBQ00sSUFBSTtRQUNsQk0sR0FBRyxDQUFDTixJQUFJLEdBQUcsT0FBT1UsTUFBTSxjQUFjWCxPQUFPQyxPQUFPNUIsVUFBVXNDLEdBQUdwQyxRQUFRb0M7SUFDMUU7SUFFQSxPQUFPSjtBQUNSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNlLTIvbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2V0aC1ibG9jay10cmFja2VyL25vZGVfbW9kdWxlcy9waWZ5L2luZGV4LmpzP2MxNWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwcm9jZXNzRm4gPSAoZm4sIG9wdHMpID0+IGZ1bmN0aW9uICgpIHtcblx0Y29uc3QgUCA9IG9wdHMucHJvbWlzZU1vZHVsZTtcblx0Y29uc3QgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG5cdH1cblxuXHRyZXR1cm4gbmV3IFAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGlmIChvcHRzLmVycm9yRmlyc3QpIHtcblx0XHRcdGFyZ3MucHVzaChmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcblx0XHRcdFx0aWYgKG9wdHMubXVsdGlBcmdzKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmVzdWx0cyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG5cblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0cmVzdWx0c1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdFx0cmVzdWx0cy51bnNoaWZ0KGVycik7XG5cdFx0XHRcdFx0XHRyZWplY3QocmVzdWx0cyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc29sdmUocmVzdWx0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGVycikge1xuXHRcdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc29sdmUocmVzdWx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFyZ3MucHVzaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0XHRcdGlmIChvcHRzLm11bHRpQXJncykge1xuXHRcdFx0XHRcdGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHJlc3VsdHNbaV0gPSBhcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmVzb2x2ZShyZXN1bHRzKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXNvbHZlKHJlc3VsdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHR9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKG9iaiwgb3B0cykgPT4ge1xuXHRvcHRzID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0ZXhjbHVkZTogWy8uKyhTeW5jfFN0cmVhbSkkL10sXG5cdFx0ZXJyb3JGaXJzdDogdHJ1ZSxcblx0XHRwcm9taXNlTW9kdWxlOiBQcm9taXNlXG5cdH0sIG9wdHMpO1xuXG5cdGNvbnN0IGZpbHRlciA9IGtleSA9PiB7XG5cdFx0Y29uc3QgbWF0Y2ggPSBwYXR0ZXJuID0+IHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJyA/IGtleSA9PT0gcGF0dGVybiA6IHBhdHRlcm4udGVzdChrZXkpO1xuXHRcdHJldHVybiBvcHRzLmluY2x1ZGUgPyBvcHRzLmluY2x1ZGUuc29tZShtYXRjaCkgOiAhb3B0cy5leGNsdWRlLnNvbWUobWF0Y2gpO1xuXHR9O1xuXG5cdGxldCByZXQ7XG5cdGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKG9wdHMuZXhjbHVkZU1haW4pIHtcblx0XHRcdFx0cmV0dXJuIG9iai5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcHJvY2Vzc0ZuKG9iaiwgb3B0cykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHJldCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpO1xuXHR9XG5cblx0Zm9yIChjb25zdCBrZXkgaW4gb2JqKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ3VhcmQtZm9yLWluXG5cdFx0Y29uc3QgeCA9IG9ialtrZXldO1xuXHRcdHJldFtrZXldID0gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgJiYgZmlsdGVyKGtleSkgPyBwcm9jZXNzRm4oeCwgb3B0cykgOiB4O1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG4iXSwibmFtZXMiOlsicHJvY2Vzc0ZuIiwiZm4iLCJvcHRzIiwiUCIsInByb21pc2VNb2R1bGUiLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yRmlyc3QiLCJwdXNoIiwiZXJyIiwicmVzdWx0IiwibXVsdGlBcmdzIiwicmVzdWx0cyIsInVuc2hpZnQiLCJhcHBseSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJPYmplY3QiLCJhc3NpZ24iLCJleGNsdWRlIiwiUHJvbWlzZSIsImZpbHRlciIsImtleSIsIm1hdGNoIiwicGF0dGVybiIsInRlc3QiLCJpbmNsdWRlIiwic29tZSIsInJldCIsImV4Y2x1ZGVNYWluIiwiY3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJ4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/node_modules/pify/index.js\n");

/***/ })

};
;