/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_walletconnect_ethereum-provider_dist_index_es_js"],{

/***/ "(app-pages-browser)/./node_modules/@stablelib/ed25519/lib/ed25519.js":
/*!********************************************************!*\
  !*** ./node_modules/@stablelib/ed25519/lib/ed25519.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.convertSecretKeyToX25519 = exports.convertPublicKeyToX25519 = exports.verify = exports.sign = exports.extractPublicKeyFromSecretKey = exports.generateKeyPair = exports.generateKeyPairFromSeed = exports.SEED_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.SIGNATURE_LENGTH = void 0;\n/**\n * Package ed25519 implements Ed25519 public-key signature algorithm.\n */ const random_1 = __webpack_require__(/*! @stablelib/random */ \"(app-pages-browser)/./node_modules/@stablelib/random/lib/random.js\");\nconst sha512_1 = __webpack_require__(/*! @stablelib/sha512 */ \"(app-pages-browser)/./node_modules/@stablelib/sha512/lib/sha512.js\");\nconst wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(app-pages-browser)/./node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.SIGNATURE_LENGTH = 64;\nexports.PUBLIC_KEY_LENGTH = 32;\nexports.SECRET_KEY_LENGTH = 64;\nexports.SEED_LENGTH = 32;\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init) {\n    const r = new Float64Array(16);\n    if (init) {\n        for(let i = 0; i < init.length; i++){\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n// Base point.\nconst _9 = new Uint8Array(32);\n_9[0] = 9;\nconst gf0 = gf();\nconst gf1 = gf([\n    1\n]);\nconst D = gf([\n    0x78a3,\n    0x1359,\n    0x4dca,\n    0x75eb,\n    0xd8ab,\n    0x4141,\n    0x0a4d,\n    0x0070,\n    0xe898,\n    0x7779,\n    0x4079,\n    0x8cc7,\n    0xfe73,\n    0x2b6f,\n    0x6cee,\n    0x5203\n]);\nconst D2 = gf([\n    0xf159,\n    0x26b2,\n    0x9b94,\n    0xebd6,\n    0xb156,\n    0x8283,\n    0x149a,\n    0x00e0,\n    0xd130,\n    0xeef3,\n    0x80f2,\n    0x198e,\n    0xfce7,\n    0x56df,\n    0xd9dc,\n    0x2406\n]);\nconst X = gf([\n    0xd51a,\n    0x8f25,\n    0x2d60,\n    0xc956,\n    0xa7b2,\n    0x9525,\n    0xc760,\n    0x692c,\n    0xdc5c,\n    0xfdd6,\n    0xe231,\n    0xc0a4,\n    0x53fe,\n    0xcd6e,\n    0x36d3,\n    0x2169\n]);\nconst Y = gf([\n    0x6658,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666\n]);\nconst I = gf([\n    0xa0b0,\n    0x4a0e,\n    0x1b27,\n    0xc4ee,\n    0xe478,\n    0xad2f,\n    0x1806,\n    0x2f43,\n    0xd7a7,\n    0x3dfb,\n    0x0099,\n    0x2b4d,\n    0xdf0b,\n    0x4fc1,\n    0x2480,\n    0x2b83\n]);\nfunction set25519(r, a) {\n    for(let i = 0; i < 16; i++){\n        r[i] = a[i] | 0;\n    }\n}\nfunction car25519(o) {\n    let c = 1;\n    for(let i = 0; i < 16; i++){\n        let v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction sel25519(p, q, b) {\n    const c = ~(b - 1);\n    for(let i = 0; i < 16; i++){\n        const t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nfunction pack25519(o, n) {\n    const m = gf();\n    const t = gf();\n    for(let i = 0; i < 16; i++){\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for(let j = 0; j < 2; j++){\n        m[0] = t[0] - 0xffed;\n        for(let i = 1; i < 15; i++){\n            m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);\n        const b = m[15] >> 16 & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for(let i = 0; i < 16; i++){\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction verify32(x, y) {\n    let d = 0;\n    for(let i = 0; i < 32; i++){\n        d |= x[i] ^ y[i];\n    }\n    return (1 & d - 1 >>> 8) - 1;\n}\nfunction neq25519(a, b) {\n    const c = new Uint8Array(32);\n    const d = new Uint8Array(32);\n    pack25519(c, a);\n    pack25519(d, b);\n    return verify32(c, d);\n}\nfunction par25519(a) {\n    const d = new Uint8Array(32);\n    pack25519(d, a);\n    return d[0] & 1;\n}\nfunction unpack25519(o, n) {\n    for(let i = 0; i < 16; i++){\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\nfunction add(o, a, b) {\n    for(let i = 0; i < 16; i++){\n        o[i] = a[i] + b[i];\n    }\n}\nfunction sub(o, a, b) {\n    for(let i = 0; i < 16; i++){\n        o[i] = a[i] - b[i];\n    }\n}\nfunction mul(o, a, b) {\n    let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction square(o, a) {\n    mul(o, a, a);\n}\nfunction inv25519(o, i) {\n    const c = gf();\n    let a;\n    for(a = 0; a < 16; a++){\n        c[a] = i[a];\n    }\n    for(a = 253; a >= 0; a--){\n        square(c, c);\n        if (a !== 2 && a !== 4) {\n            mul(c, c, i);\n        }\n    }\n    for(a = 0; a < 16; a++){\n        o[a] = c[a];\n    }\n}\nfunction pow2523(o, i) {\n    const c = gf();\n    let a;\n    for(a = 0; a < 16; a++){\n        c[a] = i[a];\n    }\n    for(a = 250; a >= 0; a--){\n        square(c, c);\n        if (a !== 1) {\n            mul(c, c, i);\n        }\n    }\n    for(a = 0; a < 16; a++){\n        o[a] = c[a];\n    }\n}\nfunction edadd(p, q) {\n    const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n    sub(a, p[1], p[0]);\n    sub(t, q[1], q[0]);\n    mul(a, a, t);\n    add(b, p[0], p[1]);\n    add(t, q[0], q[1]);\n    mul(b, b, t);\n    mul(c, p[3], q[3]);\n    mul(c, c, D2);\n    mul(d, p[2], q[2]);\n    add(d, d, d);\n    sub(e, b, a);\n    sub(f, d, c);\n    add(g, d, c);\n    add(h, b, a);\n    mul(p[0], e, f);\n    mul(p[1], h, g);\n    mul(p[2], g, f);\n    mul(p[3], e, h);\n}\nfunction cswap(p, q, b) {\n    for(let i = 0; i < 4; i++){\n        sel25519(p[i], q[i], b);\n    }\n}\nfunction pack(r, p) {\n    const tx = gf(), ty = gf(), zi = gf();\n    inv25519(zi, p[2]);\n    mul(tx, p[0], zi);\n    mul(ty, p[1], zi);\n    pack25519(r, ty);\n    r[31] ^= par25519(tx) << 7;\n}\nfunction scalarmult(p, q, s) {\n    set25519(p[0], gf0);\n    set25519(p[1], gf1);\n    set25519(p[2], gf1);\n    set25519(p[3], gf0);\n    for(let i = 255; i >= 0; --i){\n        const b = s[i / 8 | 0] >> (i & 7) & 1;\n        cswap(p, q, b);\n        edadd(q, p);\n        edadd(p, p);\n        cswap(p, q, b);\n    }\n}\nfunction scalarbase(p, s) {\n    const q = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    set25519(q[0], X);\n    set25519(q[1], Y);\n    set25519(q[2], gf1);\n    mul(q[3], X, Y);\n    scalarmult(p, q, s);\n}\n// Generates key pair from secret 32-byte seed.\nfunction generateKeyPairFromSeed(seed) {\n    if (seed.length !== exports.SEED_LENGTH) {\n        throw new Error(\"ed25519: seed must be \".concat(exports.SEED_LENGTH, \" bytes\"));\n    }\n    const d = (0, sha512_1.hash)(seed);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const publicKey = new Uint8Array(32);\n    const p = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    scalarbase(p, d);\n    pack(publicKey, p);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return {\n        publicKey,\n        secretKey\n    };\n}\nexports.generateKeyPairFromSeed = generateKeyPairFromSeed;\nfunction generateKeyPair(prng) {\n    const seed = (0, random_1.randomBytes)(32, prng);\n    const result = generateKeyPairFromSeed(seed);\n    (0, wipe_1.wipe)(seed);\n    return result;\n}\nexports.generateKeyPair = generateKeyPair;\nfunction extractPublicKeyFromSecretKey(secretKey) {\n    if (secretKey.length !== exports.SECRET_KEY_LENGTH) {\n        throw new Error(\"ed25519: secret key must be \".concat(exports.SECRET_KEY_LENGTH, \" bytes\"));\n    }\n    return new Uint8Array(secretKey.subarray(32));\n}\nexports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;\nconst L = new Float64Array([\n    0xed,\n    0xd3,\n    0xf5,\n    0x5c,\n    0x1a,\n    0x63,\n    0x12,\n    0x58,\n    0xd6,\n    0x9c,\n    0xf7,\n    0xa2,\n    0xde,\n    0xf9,\n    0xde,\n    0x14,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0x10\n]);\nfunction modL(r, x) {\n    let carry;\n    let i;\n    let j;\n    let k;\n    for(i = 63; i >= 32; --i){\n        carry = 0;\n        for(j = i - 32, k = i - 12; j < k; ++j){\n            x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n            carry = Math.floor((x[j] + 128) / 256);\n            x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for(j = 0; j < 32; j++){\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for(j = 0; j < 32; j++){\n        x[j] -= carry * L[j];\n    }\n    for(i = 0; i < 32; i++){\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n    }\n}\nfunction reduce(r) {\n    const x = new Float64Array(64);\n    for(let i = 0; i < 64; i++){\n        x[i] = r[i];\n    }\n    for(let i = 0; i < 64; i++){\n        r[i] = 0;\n    }\n    modL(r, x);\n}\n// Returns 64-byte signature of the message under the 64-byte secret key.\nfunction sign(secretKey, message) {\n    const x = new Float64Array(64);\n    const p = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    const d = (0, sha512_1.hash)(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const signature = new Uint8Array(64);\n    signature.set(d.subarray(32), 32);\n    const hs = new sha512_1.SHA512();\n    hs.update(signature.subarray(32));\n    hs.update(message);\n    const r = hs.digest();\n    hs.clean();\n    reduce(r);\n    scalarbase(p, r);\n    pack(signature, p);\n    hs.reset();\n    hs.update(signature.subarray(0, 32));\n    hs.update(secretKey.subarray(32));\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n    for(let i = 0; i < 32; i++){\n        x[i] = r[i];\n    }\n    for(let i = 0; i < 32; i++){\n        for(let j = 0; j < 32; j++){\n            x[i + j] += h[i] * d[j];\n        }\n    }\n    modL(signature.subarray(32), x);\n    return signature;\n}\nexports.sign = sign;\nfunction unpackneg(r, p) {\n    const t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n    set25519(r[2], gf1);\n    unpack25519(r[1], p);\n    square(num, r[1]);\n    mul(den, num, D);\n    sub(num, num, r[2]);\n    add(den, r[2], den);\n    square(den2, den);\n    square(den4, den2);\n    mul(den6, den4, den2);\n    mul(t, den6, num);\n    mul(t, t, den);\n    pow2523(t, t);\n    mul(t, t, num);\n    mul(t, t, den);\n    mul(t, t, den);\n    mul(r[0], t, den);\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        mul(r[0], r[0], I);\n    }\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        return -1;\n    }\n    if (par25519(r[0]) === p[31] >> 7) {\n        sub(r[0], gf0, r[0]);\n    }\n    mul(r[3], r[0], r[1]);\n    return 0;\n}\nfunction verify(publicKey, message, signature) {\n    const t = new Uint8Array(32);\n    const p = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    const q = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    if (signature.length !== exports.SIGNATURE_LENGTH) {\n        throw new Error(\"ed25519: signature must be \".concat(exports.SIGNATURE_LENGTH, \" bytes\"));\n    }\n    if (unpackneg(q, publicKey)) {\n        return false;\n    }\n    const hs = new sha512_1.SHA512();\n    hs.update(signature.subarray(0, 32));\n    hs.update(publicKey);\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n    scalarmult(p, q, h);\n    scalarbase(q, signature.subarray(32));\n    edadd(p, q);\n    pack(t, p);\n    if (verify32(signature, t)) {\n        return false;\n    }\n    return true;\n}\nexports.verify = verify;\n/**\n * Convert Ed25519 public key to X25519 public key.\n *\n * Throws if given an invalid public key.\n */ function convertPublicKeyToX25519(publicKey) {\n    let q = [\n        gf(),\n        gf(),\n        gf(),\n        gf()\n    ];\n    if (unpackneg(q, publicKey)) {\n        throw new Error(\"Ed25519: invalid public key\");\n    }\n    // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p\n    let a = gf();\n    let b = gf();\n    let y = q[1];\n    add(a, gf1, y);\n    sub(b, gf1, y);\n    inv25519(b, b);\n    mul(a, a, b);\n    let z = new Uint8Array(32);\n    pack25519(z, a);\n    return z;\n}\nexports.convertPublicKeyToX25519 = convertPublicKeyToX25519;\n/**\n *  Convert Ed25519 secret (private) key to X25519 secret key.\n */ function convertSecretKeyToX25519(secretKey) {\n    const d = (0, sha512_1.hash)(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const o = new Uint8Array(d.subarray(0, 32));\n    (0, wipe_1.wipe)(d);\n    return o;\n}\nexports.convertSecretKeyToX25519 = convertSecretKeyToX25519; //# sourceMappingURL=ed25519.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@stablelib/ed25519/lib/ed25519.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@stablelib/sha512/lib/sha512.js":
/*!******************************************************!*\
  !*** ./node_modules/@stablelib/sha512/lib/sha512.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar binary_1 = __webpack_require__(/*! @stablelib/binary */ \"(app-pages-browser)/./node_modules/@stablelib/binary/lib/binary.js\");\nvar wipe_1 = __webpack_require__(/*! @stablelib/wipe */ \"(app-pages-browser)/./node_modules/@stablelib/wipe/lib/wipe.js\");\nexports.DIGEST_LENGTH = 64;\nexports.BLOCK_SIZE = 128;\n/**\n * SHA-2-512 cryptographic hash algorithm.\n */ var SHA512 = /** @class */ function() {\n    function SHA512() {\n        /** Length of hash output */ this.digestLength = exports.DIGEST_LENGTH;\n        /** Block size */ this.blockSize = exports.BLOCK_SIZE;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this._stateHi = new Int32Array(8); // hash state, high bytes\n        this._stateLo = new Int32Array(8); // hash state, low bytes\n        this._tempHi = new Int32Array(16); // temporary state, high bytes\n        this._tempLo = new Int32Array(16); // temporary state, low bytes\n        this._buffer = new Uint8Array(256); // buffer for data to hash\n        this._bufferLength = 0; // number of bytes in buffer\n        this._bytesHashed = 0; // number of total bytes hashed\n        this._finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    SHA512.prototype._initState = function() {\n        this._stateHi[0] = 0x6a09e667;\n        this._stateHi[1] = 0xbb67ae85;\n        this._stateHi[2] = 0x3c6ef372;\n        this._stateHi[3] = 0xa54ff53a;\n        this._stateHi[4] = 0x510e527f;\n        this._stateHi[5] = 0x9b05688c;\n        this._stateHi[6] = 0x1f83d9ab;\n        this._stateHi[7] = 0x5be0cd19;\n        this._stateLo[0] = 0xf3bcc908;\n        this._stateLo[1] = 0x84caa73b;\n        this._stateLo[2] = 0xfe94f82b;\n        this._stateLo[3] = 0x5f1d36f1;\n        this._stateLo[4] = 0xade682d1;\n        this._stateLo[5] = 0x2b3e6c1f;\n        this._stateLo[6] = 0xfb41bd6b;\n        this._stateLo[7] = 0x137e2179;\n    };\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */ SHA512.prototype.reset = function() {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans internal buffers and resets hash state.\n     */ SHA512.prototype.clean = function() {\n        wipe_1.wipe(this._buffer);\n        wipe_1.wipe(this._tempHi);\n        wipe_1.wipe(this._tempLo);\n        this.reset();\n    };\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */ SHA512.prototype.update = function(data, dataLength) {\n        if (dataLength === void 0) {\n            dataLength = data.length;\n        }\n        if (this._finished) {\n            throw new Error(\"SHA512: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while(this._bufferLength < exports.BLOCK_SIZE && dataLength > 0){\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while(dataLength > 0){\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */ SHA512.prototype.finish = function(out) {\n        if (!this._finished) {\n            var bytesHashed = this._bytesHashed;\n            var left = this._bufferLength;\n            var bitLenHi = bytesHashed / 0x20000000 | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = bytesHashed % 128 < 112 ? 128 : 256;\n            this._buffer[left] = 0x80;\n            for(var i = left + 1; i < padLength - 8; i++){\n                this._buffer[i] = 0;\n            }\n            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for(var i = 0; i < this.digestLength / 8; i++){\n            binary_1.writeUint32BE(this._stateHi[i], out, i * 8);\n            binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);\n        }\n        return this;\n    };\n    /**\n     * Returns the final hash digest.\n     */ SHA512.prototype.digest = function() {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be\n     * used with restoreState(). Only chain value is saved, not buffers or\n     * other state variables.\n     */ SHA512.prototype.saveState = function() {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            stateHi: new Int32Array(this._stateHi),\n            stateLo: new Int32Array(this._stateLo),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    };\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Restores state saved by\n     * saveState() and sets bytesHashed to the given value.\n     */ SHA512.prototype.restoreState = function(savedState) {\n        this._stateHi.set(savedState.stateHi);\n        this._stateLo.set(savedState.stateLo);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    };\n    /**\n     * Cleans state returned by saveState().\n     */ SHA512.prototype.cleanSavedState = function(savedState) {\n        wipe_1.wipe(savedState.stateHi);\n        wipe_1.wipe(savedState.stateLo);\n        if (savedState.buffer) {\n            wipe_1.wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    };\n    return SHA512;\n}();\nexports.SHA512 = SHA512;\n// Constants\nvar K = new Int32Array([\n    0x428a2f98,\n    0xd728ae22,\n    0x71374491,\n    0x23ef65cd,\n    0xb5c0fbcf,\n    0xec4d3b2f,\n    0xe9b5dba5,\n    0x8189dbbc,\n    0x3956c25b,\n    0xf348b538,\n    0x59f111f1,\n    0xb605d019,\n    0x923f82a4,\n    0xaf194f9b,\n    0xab1c5ed5,\n    0xda6d8118,\n    0xd807aa98,\n    0xa3030242,\n    0x12835b01,\n    0x45706fbe,\n    0x243185be,\n    0x4ee4b28c,\n    0x550c7dc3,\n    0xd5ffb4e2,\n    0x72be5d74,\n    0xf27b896f,\n    0x80deb1fe,\n    0x3b1696b1,\n    0x9bdc06a7,\n    0x25c71235,\n    0xc19bf174,\n    0xcf692694,\n    0xe49b69c1,\n    0x9ef14ad2,\n    0xefbe4786,\n    0x384f25e3,\n    0x0fc19dc6,\n    0x8b8cd5b5,\n    0x240ca1cc,\n    0x77ac9c65,\n    0x2de92c6f,\n    0x592b0275,\n    0x4a7484aa,\n    0x6ea6e483,\n    0x5cb0a9dc,\n    0xbd41fbd4,\n    0x76f988da,\n    0x831153b5,\n    0x983e5152,\n    0xee66dfab,\n    0xa831c66d,\n    0x2db43210,\n    0xb00327c8,\n    0x98fb213f,\n    0xbf597fc7,\n    0xbeef0ee4,\n    0xc6e00bf3,\n    0x3da88fc2,\n    0xd5a79147,\n    0x930aa725,\n    0x06ca6351,\n    0xe003826f,\n    0x14292967,\n    0x0a0e6e70,\n    0x27b70a85,\n    0x46d22ffc,\n    0x2e1b2138,\n    0x5c26c926,\n    0x4d2c6dfc,\n    0x5ac42aed,\n    0x53380d13,\n    0x9d95b3df,\n    0x650a7354,\n    0x8baf63de,\n    0x766a0abb,\n    0x3c77b2a8,\n    0x81c2c92e,\n    0x47edaee6,\n    0x92722c85,\n    0x1482353b,\n    0xa2bfe8a1,\n    0x4cf10364,\n    0xa81a664b,\n    0xbc423001,\n    0xc24b8b70,\n    0xd0f89791,\n    0xc76c51a3,\n    0x0654be30,\n    0xd192e819,\n    0xd6ef5218,\n    0xd6990624,\n    0x5565a910,\n    0xf40e3585,\n    0x5771202a,\n    0x106aa070,\n    0x32bbd1b8,\n    0x19a4c116,\n    0xb8d2d0c8,\n    0x1e376c08,\n    0x5141ab53,\n    0x2748774c,\n    0xdf8eeb99,\n    0x34b0bcb5,\n    0xe19b48a8,\n    0x391c0cb3,\n    0xc5c95a63,\n    0x4ed8aa4a,\n    0xe3418acb,\n    0x5b9cca4f,\n    0x7763e373,\n    0x682e6ff3,\n    0xd6b2b8a3,\n    0x748f82ee,\n    0x5defb2fc,\n    0x78a5636f,\n    0x43172f60,\n    0x84c87814,\n    0xa1f0ab72,\n    0x8cc70208,\n    0x1a6439ec,\n    0x90befffa,\n    0x23631e28,\n    0xa4506ceb,\n    0xde82bde9,\n    0xbef9a3f7,\n    0xb2c67915,\n    0xc67178f2,\n    0xe372532b,\n    0xca273ece,\n    0xea26619c,\n    0xd186b8c7,\n    0x21c0c207,\n    0xeada7dd6,\n    0xcde0eb1e,\n    0xf57d4f7f,\n    0xee6ed178,\n    0x06f067aa,\n    0x72176fba,\n    0x0a637dc5,\n    0xa2c898a6,\n    0x113f9804,\n    0xbef90dae,\n    0x1b710b35,\n    0x131c471b,\n    0x28db77f5,\n    0x23047d84,\n    0x32caab7b,\n    0x40c72493,\n    0x3c9ebe0a,\n    0x15c9bebc,\n    0x431d67c4,\n    0x9c100d4c,\n    0x4cc5d4be,\n    0xcb3e42b6,\n    0x597f299c,\n    0xfc657e2a,\n    0x5fcb6fab,\n    0x3ad6faec,\n    0x6c44198c,\n    0x4a475817\n]);\nfunction hashBlocks(wh, wl, hh, hl, m, pos, len) {\n    var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];\n    var h, l;\n    var th, tl;\n    var a, b, c, d;\n    while(len >= 128){\n        for(var i = 0; i < 16; i++){\n            var j = 8 * i + pos;\n            wh[i] = binary_1.readUint32BE(m, j);\n            wl[i] = binary_1.readUint32BE(m, j + 4);\n        }\n        for(var i = 0; i < 80; i++){\n            var bh0 = ah0;\n            var bh1 = ah1;\n            var bh2 = ah2;\n            var bh3 = ah3;\n            var bh4 = ah4;\n            var bh5 = ah5;\n            var bh6 = ah6;\n            var bh7 = ah7;\n            var bl0 = al0;\n            var bl1 = al1;\n            var bl2 = al2;\n            var bl3 = al3;\n            var bl4 = al4;\n            var bl5 = al5;\n            var bl6 = al6;\n            var bl7 = al7;\n            // add\n            h = ah7;\n            l = al7;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma1\n            h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));\n            l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Ch\n            h = ah4 & ah5 ^ ~ah4 & ah6;\n            l = al4 & al5 ^ ~al4 & al6;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // K\n            h = K[i * 2];\n            l = K[i * 2 + 1];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // w\n            h = wh[i % 16];\n            l = wl[i % 16];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            th = c & 0xffff | d << 16;\n            tl = a & 0xffff | b << 16;\n            // add\n            h = th;\n            l = tl;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma0\n            h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));\n            l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Maj\n            h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;\n            l = al0 & al1 ^ al0 & al2 ^ al1 & al2;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh7 = c & 0xffff | d << 16;\n            bl7 = a & 0xffff | b << 16;\n            // add\n            h = bh3;\n            l = bl3;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = th;\n            l = tl;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh3 = c & 0xffff | d << 16;\n            bl3 = a & 0xffff | b << 16;\n            ah1 = bh0;\n            ah2 = bh1;\n            ah3 = bh2;\n            ah4 = bh3;\n            ah5 = bh4;\n            ah6 = bh5;\n            ah7 = bh6;\n            ah0 = bh7;\n            al1 = bl0;\n            al2 = bl1;\n            al3 = bl2;\n            al4 = bl3;\n            al5 = bl4;\n            al6 = bl5;\n            al7 = bl6;\n            al0 = bl7;\n            if (i % 16 === 15) {\n                for(var j = 0; j < 16; j++){\n                    // add\n                    h = wh[j];\n                    l = wl[j];\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = wh[(j + 9) % 16];\n                    l = wl[(j + 9) % 16];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma0\n                    th = wh[(j + 1) % 16];\n                    tl = wl[(j + 1) % 16];\n                    h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;\n                    l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma1\n                    th = wh[(j + 14) % 16];\n                    tl = wl[(j + 14) % 16];\n                    h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;\n                    l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    wh[j] = c & 0xffff | d << 16;\n                    wl[j] = a & 0xffff | b << 16;\n                }\n            }\n        }\n        // add\n        h = ah0;\n        l = al0;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[0];\n        l = hl[0];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[0] = ah0 = c & 0xffff | d << 16;\n        hl[0] = al0 = a & 0xffff | b << 16;\n        h = ah1;\n        l = al1;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[1];\n        l = hl[1];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[1] = ah1 = c & 0xffff | d << 16;\n        hl[1] = al1 = a & 0xffff | b << 16;\n        h = ah2;\n        l = al2;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[2];\n        l = hl[2];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[2] = ah2 = c & 0xffff | d << 16;\n        hl[2] = al2 = a & 0xffff | b << 16;\n        h = ah3;\n        l = al3;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[3];\n        l = hl[3];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[3] = ah3 = c & 0xffff | d << 16;\n        hl[3] = al3 = a & 0xffff | b << 16;\n        h = ah4;\n        l = al4;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[4];\n        l = hl[4];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[4] = ah4 = c & 0xffff | d << 16;\n        hl[4] = al4 = a & 0xffff | b << 16;\n        h = ah5;\n        l = al5;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[5];\n        l = hl[5];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[5] = ah5 = c & 0xffff | d << 16;\n        hl[5] = al5 = a & 0xffff | b << 16;\n        h = ah6;\n        l = al6;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[6];\n        l = hl[6];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[6] = ah6 = c & 0xffff | d << 16;\n        hl[6] = al6 = a & 0xffff | b << 16;\n        h = ah7;\n        l = al7;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[7];\n        l = hl[7];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[7] = ah7 = c & 0xffff | d << 16;\n        hl[7] = al7 = a & 0xffff | b << 16;\n        pos += 128;\n        len -= 128;\n    }\n    return pos;\n}\nfunction hash(data) {\n    var h = new SHA512();\n    h.update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash; //# sourceMappingURL=sha512.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@stablelib/sha512/lib/sha512.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/core/dist/index.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@walletconnect/core/dist/index.es.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_CONTEXT: function() { return /* binding */ Q; },\n/* harmony export */   CORE_DEFAULT: function() { return /* binding */ Qe; },\n/* harmony export */   CORE_PROTOCOL: function() { return /* binding */ le; },\n/* harmony export */   CORE_STORAGE_OPTIONS: function() { return /* binding */ Ze; },\n/* harmony export */   CORE_STORAGE_PREFIX: function() { return /* binding */ O; },\n/* harmony export */   CORE_VERSION: function() { return /* binding */ Xe; },\n/* harmony export */   CRYPTO_CLIENT_SEED: function() { return /* binding */ de; },\n/* harmony export */   CRYPTO_CONTEXT: function() { return /* binding */ et; },\n/* harmony export */   CRYPTO_JWT_TTL: function() { return /* binding */ tt; },\n/* harmony export */   Core: function() { return /* binding */ Nr; },\n/* harmony export */   Crypto: function() { return /* binding */ Tt; },\n/* harmony export */   EXPIRER_CONTEXT: function() { return /* binding */ Ct; },\n/* harmony export */   EXPIRER_DEFAULT_TTL: function() { return /* binding */ yr; },\n/* harmony export */   EXPIRER_EVENTS: function() { return /* binding */ v; },\n/* harmony export */   EXPIRER_STORAGE_VERSION: function() { return /* binding */ Rt; },\n/* harmony export */   Expirer: function() { return /* binding */ Bt; },\n/* harmony export */   HISTORY_CONTEXT: function() { return /* binding */ vt; },\n/* harmony export */   HISTORY_EVENTS: function() { return /* binding */ R; },\n/* harmony export */   HISTORY_STORAGE_VERSION: function() { return /* binding */ It; },\n/* harmony export */   JsonRpcHistory: function() { return /* binding */ Kt; },\n/* harmony export */   KEYCHAIN_CONTEXT: function() { return /* binding */ it; },\n/* harmony export */   KEYCHAIN_STORAGE_VERSION: function() { return /* binding */ st; },\n/* harmony export */   KeyChain: function() { return /* binding */ St; },\n/* harmony export */   MESSAGES_CONTEXT: function() { return /* binding */ rt; },\n/* harmony export */   MESSAGES_STORAGE_VERSION: function() { return /* binding */ nt; },\n/* harmony export */   MessageTracker: function() { return /* binding */ Pt; },\n/* harmony export */   PAIRING_CONTEXT: function() { return /* binding */ Et; },\n/* harmony export */   PAIRING_DEFAULT_TTL: function() { return /* binding */ Dr; },\n/* harmony export */   PAIRING_EVENTS: function() { return /* binding */ V; },\n/* harmony export */   PAIRING_RPC_OPTS: function() { return /* binding */ F; },\n/* harmony export */   PAIRING_STORAGE_VERSION: function() { return /* binding */ wt; },\n/* harmony export */   PENDING_SUB_RESOLUTION_TIMEOUT: function() { return /* binding */ ft; },\n/* harmony export */   PUBLISHER_CONTEXT: function() { return /* binding */ at; },\n/* harmony export */   PUBLISHER_DEFAULT_TTL: function() { return /* binding */ ot; },\n/* harmony export */   Pairing: function() { return /* binding */ kt; },\n/* harmony export */   RELAYER_CONTEXT: function() { return /* binding */ ut; },\n/* harmony export */   RELAYER_DEFAULT_LOGGER: function() { return /* binding */ ct; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ ht; },\n/* harmony export */   RELAYER_DEFAULT_RELAY_URL: function() { return /* binding */ ge; },\n/* harmony export */   RELAYER_EVENTS: function() { return /* binding */ D; },\n/* harmony export */   RELAYER_FAILOVER_RELAY_URL: function() { return /* binding */ pe; },\n/* harmony export */   RELAYER_PROVIDER_EVENTS: function() { return /* binding */ P; },\n/* harmony export */   RELAYER_RECONNECT_TIMEOUT: function() { return /* binding */ dt; },\n/* harmony export */   RELAYER_SDK_VERSION: function() { return /* binding */ gt; },\n/* harmony export */   RELAYER_STORAGE_OPTIONS: function() { return /* binding */ gr; },\n/* harmony export */   RELAYER_SUBSCRIBER_SUFFIX: function() { return /* binding */ lt; },\n/* harmony export */   RELAYER_TRANSPORT_CUTOFF: function() { return /* binding */ pt; },\n/* harmony export */   Relayer: function() { return /* binding */ Ut; },\n/* harmony export */   STORE_STORAGE_VERSION: function() { return /* binding */ Dt; },\n/* harmony export */   SUBSCRIBER_CONTEXT: function() { return /* binding */ mt; },\n/* harmony export */   SUBSCRIBER_DEFAULT_TTL: function() { return /* binding */ pr; },\n/* harmony export */   SUBSCRIBER_EVENTS: function() { return /* binding */ w; },\n/* harmony export */   SUBSCRIBER_STORAGE_VERSION: function() { return /* binding */ bt; },\n/* harmony export */   Store: function() { return /* binding */ Mt; },\n/* harmony export */   Subscriber: function() { return /* binding */ At; },\n/* harmony export */   TRUSTED_VERIFY_URLS: function() { return /* binding */ _t; },\n/* harmony export */   VERIFY_CONTEXT: function() { return /* binding */ Z; },\n/* harmony export */   VERIFY_FALLBACK_SERVER: function() { return /* binding */ ee; },\n/* harmony export */   VERIFY_SERVER: function() { return /* binding */ $; },\n/* harmony export */   Verify: function() { return /* binding */ Vt; },\n/* harmony export */   WALLETCONNECT_CLIENT_ID: function() { return /* binding */ yt; },\n/* harmony export */   \"default\": function() { return /* binding */ te; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/keyvaluestorage */ \"(app-pages-browser)/./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\");\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @walletconnect/types */ \"(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8arrays */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/jsonrpc-ws-connection */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.isequal */ \"(app-pages-browser)/./node_modules/lodash.isequal/index.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_11__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Vi(r, e) {\n    if (r.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), i = 0; i < t.length; i++)t[i] = 255;\n    for(var s = 0; s < r.length; s++){\n        var n = r.charAt(s), o = n.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        t[o] = s;\n    }\n    var a = r.length, h = r.charAt(0), l = Math.log(a) / Math.log(256), d = Math.log(256) / Math.log(a);\n    function p(u) {\n        if (u instanceof Uint8Array || (ArrayBuffer.isView(u) ? u = new Uint8Array(u.buffer, u.byteOffset, u.byteLength) : Array.isArray(u) && (u = Uint8Array.from(u))), !(u instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (u.length === 0) return \"\";\n        for(var m = 0, z = 0, I = 0, _ = u.length; I !== _ && u[I] === 0;)I++, m++;\n        for(var S = (_ - I) * d + 1 >>> 0, b = new Uint8Array(S); I !== _;){\n            for(var T = u[I], A = 0, C = S - 1; (T !== 0 || A < z) && C !== -1; C--, A++)T += 256 * b[C] >>> 0, b[C] = T % a >>> 0, T = T / a >>> 0;\n            if (T !== 0) throw new Error(\"Non-zero carry\");\n            z = A, I++;\n        }\n        for(var x = S - z; x !== S && b[x] === 0;)x++;\n        for(var j = h.repeat(m); x < S; ++x)j += r.charAt(b[x]);\n        return j;\n    }\n    function y(u) {\n        if (typeof u != \"string\") throw new TypeError(\"Expected String\");\n        if (u.length === 0) return new Uint8Array;\n        var m = 0;\n        if (u[m] !== \" \") {\n            for(var z = 0, I = 0; u[m] === h;)z++, m++;\n            for(var _ = (u.length - m) * l + 1 >>> 0, S = new Uint8Array(_); u[m];){\n                var b = t[u.charCodeAt(m)];\n                if (b === 255) return;\n                for(var T = 0, A = _ - 1; (b !== 0 || T < I) && A !== -1; A--, T++)b += a * S[A] >>> 0, S[A] = b % 256 >>> 0, b = b / 256 >>> 0;\n                if (b !== 0) throw new Error(\"Non-zero carry\");\n                I = T, m++;\n            }\n            if (u[m] !== \" \") {\n                for(var C = _ - I; C !== _ && S[C] === 0;)C++;\n                for(var x = new Uint8Array(z + (_ - C)), j = z; C !== _;)x[j++] = S[C++];\n                return x;\n            }\n        }\n    }\n    function M(u) {\n        var m = y(u);\n        if (m) return m;\n        throw new Error(\"Non-\".concat(e, \" character\"));\n    }\n    return {\n        encode: p,\n        decodeUnsafe: y,\n        decode: M\n    };\n}\n_c = Vi;\nvar qi = Vi, ji = qi;\nconst Ne = (r)=>{\n    if (r instanceof Uint8Array && r.constructor.name === \"Uint8Array\") return r;\n    if (r instanceof ArrayBuffer) return new Uint8Array(r);\n    if (ArrayBuffer.isView(r)) return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Gi = (r)=>new TextEncoder().encode(r), Yi = (r)=>new TextDecoder().decode(r);\nclass Hi {\n    encode(e) {\n        if (e instanceof Uint8Array) return \"\".concat(this.prefix).concat(this.baseEncode(e));\n        throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, t, i){\n        this.name = e, this.prefix = t, this.baseEncode = i;\n    }\n}\nclass Ji {\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return Ue(this, e);\n    }\n    constructor(e, t, i){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i;\n    }\n}\nclass Wi {\n    or(e) {\n        return Ue(this, e);\n    }\n    decode(e) {\n        const t = e[0], i = this.decoders[t];\n        if (i) return i.decode(e);\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n    }\n    constructor(e){\n        this.decoders = e;\n    }\n}\nconst Ue = (r, e)=>new Wi({\n        ...r.decoders || {\n            [r.prefix]: r\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\n_c1 = Ue;\nclass Xi {\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n    constructor(e, t, i, s){\n        this.name = e, this.prefix = t, this.baseEncode = i, this.baseDecode = s, this.encoder = new Hi(e, t, i), this.decoder = new Ji(e, t, s);\n    }\n}\nconst X = (param)=>{\n    let { name: r, prefix: e, encode: t, decode: i } = param;\n    return new Xi(r, e, t, i);\n}, B = (param)=>{\n    let { prefix: r, name: e, alphabet: t } = param;\n    const { encode: i, decode: s } = ji(t, e);\n    return X({\n        prefix: r,\n        name: e,\n        encode: i,\n        decode: (n)=>Ne(s(n))\n    });\n}, Qi = (r, e, t, i)=>{\n    const s = {};\n    for(let d = 0; d < e.length; ++d)s[e[d]] = d;\n    let n = r.length;\n    for(; r[n - 1] === \"=\";)--n;\n    const o = new Uint8Array(n * t / 8 | 0);\n    let a = 0, h = 0, l = 0;\n    for(let d = 0; d < n; ++d){\n        const p = s[r[d]];\n        if (p === void 0) throw new SyntaxError(\"Non-\".concat(i, \" character\"));\n        h = h << t | p, a += t, a >= 8 && (a -= 8, o[l++] = 255 & h >> a);\n    }\n    if (a >= t || 255 & h << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, Zi = (r, e, t)=>{\n    const i = e[e.length - 1] === \"=\", s = (1 << t) - 1;\n    let n = \"\", o = 0, a = 0;\n    for(let h = 0; h < r.length; ++h)for(a = a << 8 | r[h], o += 8; o > t;)o -= t, n += e[s & a >> o];\n    if (o && (n += e[s & a << t - o]), i) for(; n.length * t & 7;)n += \"=\";\n    return n;\n}, g = (param)=>{\n    let { name: r, prefix: e, bitsPerChar: t, alphabet: i } = param;\n    return X({\n        prefix: e,\n        name: r,\n        encode (s) {\n            return Zi(s, i, t);\n        },\n        decode (s) {\n            return Qi(s, i, t, r);\n        }\n    });\n}, es = X({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (r)=>Yi(r),\n    decode: (r)=>Gi(r)\n});\nvar ts = Object.freeze({\n    __proto__: null,\n    identity: es\n});\nconst is = g({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar ss = Object.freeze({\n    __proto__: null,\n    base2: is\n});\nconst rs = g({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar ns = Object.freeze({\n    __proto__: null,\n    base8: rs\n});\nconst os = B({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar as = Object.freeze({\n    __proto__: null,\n    base10: os\n});\nconst hs = g({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), cs = g({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar us = Object.freeze({\n    __proto__: null,\n    base16: hs,\n    base16upper: cs\n});\nconst ls = g({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), ds = g({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), gs = g({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), ps = g({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), Ds = g({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), ys = g({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), ms = g({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), bs = g({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), fs = g({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Es = Object.freeze({\n    __proto__: null,\n    base32: ls,\n    base32upper: ds,\n    base32pad: gs,\n    base32padupper: ps,\n    base32hex: Ds,\n    base32hexupper: ys,\n    base32hexpad: ms,\n    base32hexpadupper: bs,\n    base32z: fs\n});\nconst ws = B({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), vs = B({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar Is = Object.freeze({\n    __proto__: null,\n    base36: ws,\n    base36upper: vs\n});\nconst Cs = B({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Rs = B({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar _s = Object.freeze({\n    __proto__: null,\n    base58btc: Cs,\n    base58flickr: Rs\n});\nconst Ss = g({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Ts = g({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), Ps = g({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), xs = g({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Os = Object.freeze({\n    __proto__: null,\n    base64: Ss,\n    base64pad: Ts,\n    base64url: Ps,\n    base64urlpad: xs\n});\nconst Le = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), As = Le.reduce((r, e, t)=>(r[t] = e, r), []), zs = Le.reduce((r, e, t)=>(r[e.codePointAt(0)] = t, r), []);\nfunction Ns(r) {\n    return r.reduce((e, t)=>(e += As[t], e), \"\");\n}\n_c2 = Ns;\nfunction Us(r) {\n    const e = [];\n    for (const t of r){\n        const i = zs[t.codePointAt(0)];\n        if (i === void 0) throw new Error(\"Non-base256emoji character: \".concat(t));\n        e.push(i);\n    }\n    return new Uint8Array(e);\n}\n_c3 = Us;\nconst Ls = X({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Ns,\n    decode: Us\n});\nvar Fs = Object.freeze({\n    __proto__: null,\n    base256emoji: Ls\n}), $s = $e, Fe = 128, Ms = 127, ks = ~Ms, Ks = Math.pow(2, 31);\nfunction $e(r, e, t) {\n    e = e || [], t = t || 0;\n    for(var i = t; r >= Ks;)e[t++] = r & 255 | Fe, r /= 128;\n    for(; r & ks;)e[t++] = r & 255 | Fe, r >>>= 7;\n    return e[t] = r | 0, $e.bytes = t - i + 1, e;\n}\nvar Bs = he, Vs = 128, Me = 127;\nfunction he(r, i) {\n    var t = 0, i = i || 0, s = 0, n = i, o, a = r.length;\n    do {\n        if (n >= a) throw he.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = r[n++], t += s < 28 ? (o & Me) << s : (o & Me) * Math.pow(2, s), s += 7;\n    }while (o >= Vs);\n    return he.bytes = n - i, t;\n}\nvar qs = Math.pow(2, 7), js = Math.pow(2, 14), Gs = Math.pow(2, 21), Ys = Math.pow(2, 28), Hs = Math.pow(2, 35), Js = Math.pow(2, 42), Ws = Math.pow(2, 49), Xs = Math.pow(2, 56), Qs = Math.pow(2, 63), Zs = function(r) {\n    return r < qs ? 1 : r < js ? 2 : r < Gs ? 3 : r < Ys ? 4 : r < Hs ? 5 : r < Js ? 6 : r < Ws ? 7 : r < Xs ? 8 : r < Qs ? 9 : 10;\n}, er = {\n    encode: $s,\n    decode: Bs,\n    encodingLength: Zs\n}, ke = er;\nconst Ke = function(r, e) {\n    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return ke.encode(r, e, t), e;\n}, Be = (r)=>ke.encodingLength(r), ce = (r, e)=>{\n    const t = e.byteLength, i = Be(r), s = i + Be(t), n = new Uint8Array(s + t);\n    return Ke(r, n, 0), Ke(t, n, i), n.set(e, s), new tr(r, t, e, n);\n};\nclass tr {\n    constructor(e, t, i, s){\n        this.code = e, this.size = t, this.digest = i, this.bytes = s;\n    }\n}\nconst Ve = (param)=>{\n    let { name: r, code: e, encode: t } = param;\n    return new ir(r, e, t);\n};\n_c4 = Ve;\nclass ir {\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? ce(this.code, t) : t.then((i)=>ce(this.code, i));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, t, i){\n        this.name = e, this.code = t, this.encode = i;\n    }\n}\nconst qe = (r)=>async (e)=>new Uint8Array(await crypto.subtle.digest(r, e)), sr = Ve({\n    name: \"sha2-256\",\n    code: 18,\n    encode: qe(\"SHA-256\")\n}), rr = Ve({\n    name: \"sha2-512\",\n    code: 19,\n    encode: qe(\"SHA-512\")\n});\nvar nr = Object.freeze({\n    __proto__: null,\n    sha256: sr,\n    sha512: rr\n});\nconst je = 0, or = \"identity\", Ge = Ne, ar = (r)=>ce(je, Ge(r)), hr = {\n    code: je,\n    name: or,\n    encode: Ge,\n    digest: ar\n};\nvar cr = Object.freeze({\n    __proto__: null,\n    identity: hr\n});\nnew TextEncoder, new TextDecoder;\nconst Ye = {\n    ...ts,\n    ...ss,\n    ...ns,\n    ...as,\n    ...us,\n    ...Es,\n    ...Is,\n    ..._s,\n    ...Os,\n    ...Fs\n};\n({\n    ...nr,\n    ...cr\n});\nfunction He(r) {\n    return globalThis.Buffer != null ? new Uint8Array(r.buffer, r.byteOffset, r.byteLength) : r;\n}\n_c5 = He;\nfunction ur() {\n    let r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? He(globalThis.Buffer.allocUnsafe(r)) : new Uint8Array(r);\n}\nfunction Je(r, e, t, i) {\n    return {\n        name: r,\n        prefix: e,\n        encoder: {\n            name: r,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: i\n        }\n    };\n}\n_c6 = Je;\nconst We = Je(\"utf8\", \"u\", (r)=>\"u\" + new TextDecoder(\"utf8\").decode(r), (r)=>new TextEncoder().encode(r.substring(1))), ue = Je(\"ascii\", \"a\", (r)=>{\n    let e = \"a\";\n    for(let t = 0; t < r.length; t++)e += String.fromCharCode(r[t]);\n    return e;\n}, (r)=>{\n    r = r.substring(1);\n    const e = ur(r.length);\n    for(let t = 0; t < r.length; t++)e[t] = r.charCodeAt(t);\n    return e;\n}), lr = {\n    utf8: We,\n    \"utf-8\": We,\n    hex: Ye.base16,\n    latin1: ue,\n    ascii: ue,\n    binary: ue,\n    ...Ye\n};\nfunction dr(r) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const t = lr[e];\n    if (!t) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? He(globalThis.Buffer.from(r, \"utf-8\")) : t.decoder.decode(\"\".concat(t.prefix).concat(r));\n}\nconst le = \"wc\", Xe = 2, Q = \"core\", O = \"\".concat(le, \"@2:\").concat(Q, \":\"), Qe = {\n    name: Q,\n    logger: \"error\"\n}, Ze = {\n    database: \":memory:\"\n}, et = \"crypto\", de = \"client_ed25519_seed\", tt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, it = \"keychain\", st = \"0.3\", rt = \"messages\", nt = \"0.3\", ot = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.SIX_HOURS, at = \"publisher\", ht = \"irn\", ct = \"error\", ge = \"wss://relay.walletconnect.com\", pe = \"wss://relay.walletconnect.org\", ut = \"relayer\", D = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, lt = \"_subscription\", P = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, dt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND, gr = {\n    database: \":memory:\"\n}, gt = \"2.10.6\", pt = 1e4, Dt = \"0.3\", yt = \"WALLETCONNECT_CLIENT_ID\", w = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, pr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, mt = \"subscription\", bt = \"0.3\", ft = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS * 1e3, Et = \"pairing\", wt = \"0.3\", Dr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, F = {\n    wc_pairingDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, V = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, R = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, vt = \"history\", It = \"0.3\", Ct = \"expirer\", v = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Rt = \"0.3\", yr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, Z = \"verify-api\", $ = \"https://verify.walletconnect.com\", ee = \"https://verify.walletconnect.org\", _t = [\n    $,\n    ee\n];\nclass St {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.mapToObj)(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        this.core = e, this.logger = t, this.keychain = new Map, this.name = it, this.version = st, this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            if (!this.initialized) {\n                const i = await this.getKeyChain();\n                typeof i < \"u\" && (this.keychain = i), this.initialized = !0;\n            }\n        }, this.has = (i)=>(this.isInitialized(), this.keychain.has(i)), this.set = async (i, s)=>{\n            this.isInitialized(), this.keychain.set(i, s), await this.persist();\n        }, this.get = (i)=>{\n            this.isInitialized();\n            const s = this.keychain.get(i);\n            if (typeof s > \"u\") {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(i));\n                throw new Error(n);\n            }\n            return s;\n        }, this.del = async (i)=>{\n            this.isInitialized(), this.keychain.delete(i), await this.persist();\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nclass Tt {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(de);\n        } catch (e1) {\n            e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), await this.keychain.set(de, e);\n        }\n        return dr(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t, i){\n        this.core = e, this.logger = t, this.name = et, this.initialized = !1, this.init = async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }, this.hasKeys = (s)=>(this.isInitialized(), this.keychain.has(s)), this.getClientId = async ()=>{\n            this.isInitialized();\n            const s = await this.getClientSeed(), n = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(s);\n            return _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.encodeIss(n.publicKey);\n        }, this.generateKeyPair = ()=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateKeyPair)();\n            return this.setPrivateKey(s.publicKey, s.privateKey);\n        }, this.signJWT = async (s)=>{\n            this.isInitialized();\n            const n = await this.getClientSeed(), o = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(n), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), h = tt;\n            return await _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.signJWT(a, s, h, o);\n        }, this.generateSharedKey = (s, n, o)=>{\n            this.isInitialized();\n            const a = this.getPrivateKey(s), h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deriveSymKey)(a, n);\n            return this.setSymKey(h, o);\n        }, this.setSymKey = async (s, n)=>{\n            this.isInitialized();\n            const o = n || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashKey)(s);\n            return await this.keychain.set(o, s), o;\n        }, this.deleteKeyPair = async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }, this.deleteSymKey = async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }, this.encode = async (s, n, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.validateEncoding)(o), h = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonStringify)(n);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeOneEnvelope)(a)) {\n                const y = a.senderPublicKey, M = a.receiverPublicKey;\n                s = await this.generateSharedKey(y, M);\n            }\n            const l = this.getSymKey(s), { type: d, senderPublicKey: p } = a;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.encrypt)({\n                type: d,\n                symKey: l,\n                message: h,\n                senderPublicKey: p\n            });\n        }, this.decode = async (s, n, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.validateDecoding)(n, o);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeOneEnvelope)(a)) {\n                const h = a.receiverPublicKey, l = a.senderPublicKey;\n                s = await this.generateSharedKey(h, l);\n            }\n            try {\n                const h = this.getSymKey(s), l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.decrypt)({\n                    symKey: h,\n                    encoded: n\n                });\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonParse)(l);\n            } catch (h) {\n                this.logger.error(\"Failed to decode message from topic: '\".concat(s, \"', clientId: '\").concat(await this.getClientId(), \"'\")), this.logger.error(h);\n            }\n        }, this.getPayloadType = (s)=>{\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deserialize)(s);\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.decodeTypeByte)(n.type);\n        }, this.getPayloadSenderPublicKey = (s)=>{\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deserialize)(s);\n            return n.senderPublicKey ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_6__.toString)(n.senderPublicKey, _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.BASE16) : void 0;\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.keychain = i || new St(this.core, this.logger);\n    }\n}\nclass Pt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IMessageTracker {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.mapToObj)(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, this.messages = new Map, this.name = rt, this.version = nt, this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const i = await this.getRelayerMessages();\n                    typeof i < \"u\" && (this.messages = i), this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (i) {\n                    this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(i);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }, this.set = async (i, s)=>{\n            this.isInitialized();\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(s);\n            let o = this.messages.get(i);\n            return typeof o > \"u\" && (o = {}), typeof o[n] < \"u\" || (o[n] = s, this.messages.set(i, o), await this.persist()), n;\n        }, this.get = (i)=>{\n            this.isInitialized();\n            let s = this.messages.get(i);\n            return typeof s > \"u\" && (s = {}), s;\n        }, this.has = (i, s)=>{\n            this.isInitialized();\n            const n = this.get(i), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(s);\n            return typeof n[o] < \"u\";\n        }, this.del = async (i)=>{\n            this.isInitialized(), this.messages.delete(i), await this.persist();\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e, this.name), this.core = t;\n    }\n}\nclass mr extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IPublisher {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    rpcPublish(e, t, i, s, n, o, a) {\n        var h, l, d, p;\n        const y = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(s.protocol).publish,\n            params: {\n                topic: e,\n                message: t,\n                ttl: i,\n                prompt: n,\n                tag: o\n            },\n            id: a\n        };\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)((h = y.params) == null ? void 0 : h.prompt) && ((l = y.params) == null || delete l.prompt), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)((d = y.params) == null ? void 0 : d.tag) && ((p = y.params) == null || delete p.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: y\n        }), this.relayer.request(y);\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e)=>{\n            const { topic: t, message: i, opts: s } = e;\n            await this.publish(t, i, s);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(D.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(D.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = at, this.queue = new Map, this.publishTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.TEN_SECONDS), this.needsTransportRestart = !1, this.publish = async (i, s, n)=>{\n            var o;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: i,\n                    message: s,\n                    opts: n\n                }\n            });\n            try {\n                const a = (n === null || n === void 0 ? void 0 : n.ttl) || ot, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(n), l = (n === null || n === void 0 ? void 0 : n.prompt) || !1, d = (n === null || n === void 0 ? void 0 : n.tag) || 0, p = (n === null || n === void 0 ? void 0 : n.id) || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString(), y = {\n                    topic: i,\n                    message: s,\n                    opts: {\n                        ttl: a,\n                        relay: h,\n                        prompt: l,\n                        tag: d,\n                        id: p\n                    }\n                }, M = setTimeout(()=>this.queue.set(p, y), this.publishTimeout);\n                try {\n                    await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.rpcPublish(i, s, a, h, l, d, p), this.publishTimeout, \"Failed to publish payload, please try again.\"), this.removeRequestFromQueue(p), this.relayer.events.emit(D.publish, y);\n                } catch (u) {\n                    if (this.logger.debug(\"Publishing Payload stalled\"), this.needsTransportRestart = !0, (o = n === null || n === void 0 ? void 0 : n.internal) != null && o.throwOnFailedPublish) throw this.removeRequestFromQueue(p), u;\n                    return;\n                } finally{\n                    clearTimeout(M);\n                }\n                this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        topic: i,\n                        message: s,\n                        opts: n\n                    }\n                });\n            } catch (a) {\n                throw this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(a), a;\n            }\n        }, this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.registerEventListeners();\n    }\n}\nclass br {\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n    constructor(){\n        this.map = new Map, this.set = (e, t)=>{\n            const i = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...i,\n                t\n            ]);\n        }, this.get = (e)=>this.map.get(e) || [], this.exists = (e, t)=>this.get(e).includes(t), this.delete = (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const i = this.get(e);\n            if (!this.exists(e, t)) return;\n            const s = i.filter((n)=>n !== t);\n            if (!s.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, s);\n        }, this.clear = ()=>{\n            this.map.clear();\n        };\n    }\n}\nvar fr = Object.defineProperty, Er = Object.defineProperties, wr = Object.getOwnPropertyDescriptors, xt = Object.getOwnPropertySymbols, vr = Object.prototype.hasOwnProperty, Ir = Object.prototype.propertyIsEnumerable, Ot = (r, e, t)=>e in r ? fr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, q = (r, e)=>{\n    for(var t in e || (e = {}))vr.call(e, t) && Ot(r, t, e[t]);\n    if (xt) for (var t of xt(e))Ir.call(e, t) && Ot(r, t, e[t]);\n    return r;\n}, De = (r, e)=>Er(r, wr(e));\nclass At extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.ISubscriber {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    hasSubscription(e, t) {\n        let i = !1;\n        try {\n            i = this.getSubscription(e).topic === t;\n        } catch (e) {}\n        return i;\n    }\n    onEnable() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const i = this.topicMap.get(e);\n        await Promise.all(i.map(async (s)=>await this.unsubscribeById(e, s, t)));\n    }\n    async unsubscribeById(e, t, i) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: i\n            }\n        });\n        try {\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(i);\n            await this.rpcUnsubscribe(e, t, s);\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\", \"\".concat(this.name, \", \").concat(e));\n            await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: i\n                }\n            });\n        } catch (s) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(s), s;\n        }\n    }\n    async rpcSubscribe(e, t) {\n        const i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        try {\n            await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.relayer.request(i), this.subscribeTimeout);\n        } catch (e) {\n            this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(D.connection_stalled);\n        }\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(e + this.clientId);\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((s)=>s.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        try {\n            return await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.relayer.request(i), this.subscribeTimeout);\n        } catch (e) {\n            this.logger.debug(\"Outgoing Relay Payload stalled\"), this.relayer.events.emit(D.connection_stalled);\n        }\n    }\n    rpcUnsubscribe(e, t, i) {\n        const s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(i.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        }), this.relayer.request(s);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, De(q({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, q({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, i) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.subscriptions.has(e) || (this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t));\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, q({}, t)), this.topicMap.set(t.topic, e), this.events.emit(w.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(i);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const i = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(i.topic, e), this.events.emit(w.deleted, De(q({}, i), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit(w.sync);\n    }\n    async reset() {\n        if (this.cached.length) {\n            const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let t = 0; t < e; t++){\n                const i = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(i);\n            }\n        }\n        this.events.emit(w.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(\"\".concat(this.name, \": \").concat(JSON.stringify(this.values))), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored subscriptions for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore subscriptions for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        if (!e.length) return;\n        const t = await this.rpcBatchSubscribe(e);\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidArray)(t) && this.onBatchSubscribe(t.map((i, s)=>De(q({}, e[s]), {\n                id: i\n            })));\n    }\n    async onConnect() {\n        this.restartInProgress || (await this.restart(), this.onEnable());\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    async checkPending() {\n        if (!this.initialized || this.relayer.transportExplicitlyClosed) return;\n        const e = [];\n        this.pending.forEach((t)=>{\n            e.push(t);\n        }), await this.batchSubscribe(e);\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, async ()=>{\n            await this.checkPending();\n        }), this.relayer.on(D.connect, async ()=>{\n            await this.onConnect();\n        }), this.relayer.on(D.disconnect, ()=>{\n            this.onDisconnect();\n        }), this.events.on(w.created, async (e)=>{\n            const t = w.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        }), this.events.on(w.deleted, async (e)=>{\n            const t = w.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete() {\n        this.restartInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.restartInProgress || (clearInterval(t), e());\n            }, this.pollingInterval);\n        });\n    }\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.subscriptions = new Map, this.topicMap = new br, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = mt, this.version = bt, this.pending = new Map, this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = O, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId());\n        }, this.subscribe = async (i, s)=>{\n            await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: i,\n                    opts: s\n                }\n            });\n            try {\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(s), o = {\n                    topic: i,\n                    relay: n\n                };\n                this.pending.set(i, o);\n                const a = await this.rpcSubscribe(i, n);\n                return this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: i,\n                        opts: s\n                    }\n                }), a;\n            } catch (n) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n            }\n        }, this.unsubscribe = async (i, s)=>{\n            await this.restartToComplete(), this.isInitialized(), typeof (s === null || s === void 0 ? void 0 : s.id) < \"u\" ? await this.unsubscribeById(i, s.id, s) : await this.unsubscribeByTopic(i, s);\n        }, this.isSubscribed = async (i)=>this.topics.includes(i) ? !0 : await new Promise((s, n)=>{\n                const o = new _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.Watch;\n                o.start(this.pendingSubscriptionWatchLabel);\n                const a = setInterval(()=>{\n                    !this.pending.has(i) && this.topics.includes(i) && (clearInterval(a), o.stop(this.pendingSubscriptionWatchLabel), s(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= ft && (clearInterval(a), o.stop(this.pendingSubscriptionWatchLabel), n(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1), this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.restart = async ()=>{\n            this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.clientId = \"\";\n    }\n}\nvar Cr = Object.defineProperty, zt = Object.getOwnPropertySymbols, Rr = Object.prototype.hasOwnProperty, _r = Object.prototype.propertyIsEnumerable, Nt = (r, e, t)=>e in r ? Cr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Sr = (r, e)=>{\n    for(var t in e || (e = {}))Rr.call(e, t) && Nt(r, t, e[t]);\n    if (zt) for (var t of zt(e))_r.call(e, t) && Nt(r, t, e[t]);\n    return r;\n};\nclass Ut extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IRelayer {\n    async init() {\n        this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.createProvider(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]);\n        try {\n            await this.transportOpen();\n        } catch (e) {\n            this.logger.warn(\"Connection via \".concat(this.relayUrl, \" failed, attempting to connect via failover domain \").concat(pe, \"...\")), await this.restartTransport(pe);\n        }\n        this.initialized = !0, setTimeout(async ()=>{\n            this.subscriber.topics.length === 0 && (this.logger.info(\"No topics subscribed to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n        }, pt);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get connected() {\n        return this.provider.connection.connected;\n    }\n    get connecting() {\n        return this.provider.connection.connecting;\n    }\n    async publish(e, t, i) {\n        this.isInitialized(), await this.publisher.publish(e, t, i), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now()\n        });\n    }\n    async subscribe(e, t) {\n        var i;\n        this.isInitialized();\n        let s = ((i = this.subscriber.topicMap.get(e)) == null ? void 0 : i[0]) || \"\";\n        if (s) return s;\n        let n;\n        const o = (a)=>{\n            a.topic === e && (this.subscriber.off(w.created, o), n());\n        };\n        return await Promise.all([\n            new Promise((a)=>{\n                n = a, this.subscriber.on(w.created, o);\n            }),\n            new Promise(async (a)=>{\n                s = await this.subscriber.subscribe(e, t), a();\n            })\n        ]), s;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, this.hasExperiencedNetworkDisruption && this.connected ? await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.provider.disconnect(), 1e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.connected && await this.provider.disconnect();\n    }\n    async transportOpen(e) {\n        if (this.transportExplicitlyClosed = !1, await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress) {\n            e && e !== this.relayUrl && (this.relayUrl = e, await this.transportClose(), await this.createProvider()), this.connectionAttemptInProgress = !0;\n            try {\n                await Promise.all([\n                    new Promise((t)=>{\n                        if (!this.initialized) return t();\n                        this.subscriber.once(w.resubscribed, ()=>{\n                            t();\n                        });\n                    }),\n                    new Promise(async (t, i)=>{\n                        try {\n                            await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.provider.connect(), 1e4, \"Socket stalled when trying to connect to \".concat(this.relayUrl));\n                        } catch (s) {\n                            i(s);\n                            return;\n                        }\n                        t();\n                    })\n                ]);\n            } catch (t) {\n                this.logger.error(t);\n                const i = t;\n                if (!this.isConnectionStalled(i.message)) throw t;\n                this.provider.events.emit(P.disconnect);\n            } finally{\n                this.connectionAttemptInProgress = !1, this.hasExperiencedNetworkDisruption = !1;\n            }\n        }\n    }\n    async restartTransport(e) {\n        await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.transportClose(), await this.createProvider(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isOnline)()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    isConnectionStalled(e) {\n        return this.staleConnectionErrors.some((t)=>e.includes(t));\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider(new _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__[\"default\"]((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatRelayRpcUrl)({\n            sdkVersion: gt,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0,\n            bundleId: this.bundleId\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: i } = e;\n        await this.messages.set(t, i);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: i } = e;\n        if (!i || i.length === 0) return this.logger.debug(\"Ignoring invalid/empty message: \".concat(i)), !0;\n        if (!await this.subscriber.isSubscribed(t)) return this.logger.debug(\"Ignoring message for non-subscribed topic \".concat(t)), !0;\n        const s = this.messages.has(t, i);\n        return s && this.logger.debug(\"Ignoring duplicate message: \".concat(i)), s;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(e)) {\n            if (!e.method.endsWith(lt)) return;\n            const t = e.params, { topic: i, message: s, publishedAt: n } = t.data, o = {\n                topic: i,\n                message: s,\n                publishedAt: n\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(Sr({\n                type: \"event\",\n                event: t.id\n            }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);\n        } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(e) && this.events.emit(D.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(D.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(P.payload, this.onPayloadHandler), this.provider.off(P.connect, this.onConnectHandler), this.provider.off(P.disconnect, this.onDisconnectHandler), this.provider.off(P.error, this.onProviderErrorHandler);\n    }\n    async registerEventListeners() {\n        this.events.on(D.connection_stalled, ()=>{\n            this.restartTransport().catch((t)=>this.logger.error(t));\n        });\n        let e = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isOnline)();\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.subscribeToNetworkChange)(async (t)=>{\n            this.initialized && e !== t && (e = t, t ? await this.restartTransport().catch((i)=>this.logger.error(i)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportClose().catch((i)=>this.logger.error(i))));\n        });\n    }\n    onProviderDisconnect() {\n        this.events.emit(D.disconnect), this.attemptToReconnect();\n    }\n    attemptToReconnect() {\n        this.transportExplicitlyClosed || (this.logger.info(\"attemptToReconnect called. Connecting...\"), setTimeout(async ()=>{\n            await this.restartTransport().catch((e)=>this.logger.error(e));\n        }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(dt)));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        if (await this.confirmOnlineStateOrThrow(), !this.connected) {\n            if (this.connectionAttemptInProgress) return await new Promise((e)=>{\n                const t = setInterval(()=>{\n                    this.connected && (clearInterval(t), e());\n                }, this.connectionStatusPollingInterval);\n            });\n            await this.restartTransport();\n        }\n    }\n    constructor(e){\n        super(e), this.protocol = \"wc\", this.version = 2, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = ut, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\n            \"socket hang up\",\n            \"socket stalled\"\n        ], this.hasExperiencedNetworkDisruption = !1, this.request = async (t)=>{\n            this.logger.debug(\"Publishing Request Payload\");\n            try {\n                return await this.toEstablishConnection(), await this.provider.request(t);\n            } catch (i) {\n                throw this.logger.debug(\"Failed to Publish Request\"), this.logger.error(i), i;\n            }\n        }, this.onPayloadHandler = (t)=>{\n            this.onProviderPayload(t);\n        }, this.onConnectHandler = ()=>{\n            this.events.emit(D.connect);\n        }, this.onDisconnectHandler = ()=>{\n            this.onProviderDisconnect();\n        }, this.onProviderErrorHandler = (t)=>{\n            this.logger.error(t), this.events.emit(D.error, t), this.logger.info(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }, this.registerProviderListeners = ()=>{\n            this.provider.on(P.payload, this.onPayloadHandler), this.provider.on(P.connect, this.onConnectHandler), this.provider.on(P.disconnect, this.onDisconnectHandler), this.provider.on(P.error, this.onProviderErrorHandler);\n        }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e.logger, this.name) : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e.logger || ct\n        })), this.messages = new Pt(this.logger, e.core), this.subscriber = new At(this, this.logger), this.publisher = new mr(this, this.logger), this.relayUrl = (e === null || e === void 0 ? void 0 : e.relayUrl) || ge, this.projectId = e.projectId, this.bundleId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getBundleId)(), this.provider = {};\n    }\n}\nvar Tr = Object.defineProperty, Lt = Object.getOwnPropertySymbols, Pr = Object.prototype.hasOwnProperty, xr = Object.prototype.propertyIsEnumerable, Ft = (r, e, t)=>e in r ? Tr(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, $t = (r, e)=>{\n    for(var t in e || (e = {}))Pr.call(e, t) && Ft(r, t, e[t]);\n    if (Lt) for (var t of Lt(e))xr.call(e, t) && Ft(r, t, e[t]);\n    return r;\n};\nclass Mt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IStore {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.error(i), new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored value for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore value for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t, i, s = O, n = void 0){\n        super(e, t, i, s), this.core = e, this.logger = t, this.name = i, this.map = new Map, this.version = Dt, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)(o) ? this.map.set(this.getKey(o), o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isProposalStruct)(o) ? this.map.set(o.id, o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isSessionStruct)(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }, this.set = async (o, a)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: a\n            }), this.map.set(o, a), await this.persist());\n        }, this.get = (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o)), this.getAll = (o)=>(this.isInitialized(), o ? this.values.filter((a)=>Object.keys(o).every((h)=>lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default()(a[h], o[h]))) : this.values), this.update = async (o, a)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: a\n            });\n            const h = $t($t({}, this.getData(o)), a);\n            this.map.set(o, h), await this.persist();\n        }, this.delete = async (o, a)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: a\n            }), this.map.delete(o), await this.persist());\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.storagePrefix = s, this.getKey = n;\n    }\n}\nclass kt {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(D.message, async (e)=>{\n            const { topic: t, message: i } = e;\n            if (!this.pairings.keys.includes(t) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i))) return;\n            const s = await this.core.crypto.decode(t, i);\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(s) ? (this.core.history.set(t, s), this.onRelayEventRequest({\n                    topic: t,\n                    payload: s\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(s) && (await this.core.history.resolve(s), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: s\n                }), this.core.history.delete(t, s.id));\n            } catch (n) {\n                this.logger.error(n);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(v.expired, async (e)=>{\n            const { topic: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseExpirerTarget)(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(V.expire, {\n                topic: t\n            }));\n        });\n    }\n    constructor(e, t){\n        this.core = e, this.logger = t, this.name = Et, this.version = wt, this.events = new (events__WEBPACK_IMPORTED_MODULE_0___default()), this.initialized = !1, this.storagePrefix = O, this.ignoredPayloadTypes = [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.TYPE_1\n        ], this.registeredMethods = [], this.init = async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }, this.register = (param)=>{\n            let { methods: i } = param;\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...i\n                ])\n            ];\n        }, this.create = async ()=>{\n            this.isInitialized();\n            const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), s = await this.core.crypto.setSymKey(i), n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), o = {\n                protocol: ht\n            }, a = {\n                topic: s,\n                expiry: n,\n                relay: o,\n                active: !1\n            }, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: s,\n                symKey: i,\n                relay: o\n            });\n            return await this.pairings.set(s, a), await this.core.relayer.subscribe(s), this.core.expirer.set(s, n), {\n                topic: s,\n                uri: h\n            };\n        }, this.pair = async (i)=>{\n            this.isInitialized(), this.isValidPair(i);\n            const { topic: s, symKey: n, relay: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseUri)(i.uri);\n            let a;\n            if (this.pairings.keys.includes(s) && (a = this.pairings.get(s), a.active)) throw new Error(\"Pairing already exists: \".concat(s, \". Please try again with a new connection URI.\"));\n            const h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), l = {\n                topic: s,\n                relay: o,\n                expiry: h,\n                active: !1\n            };\n            return await this.pairings.set(s, l), this.core.expirer.set(s, h), i.activatePairing && await this.activate({\n                topic: s\n            }), this.events.emit(V.create, l), this.core.crypto.keychain.has(s) || (await this.core.crypto.setSymKey(n, s), await this.core.relayer.subscribe(s, {\n                relay: o\n            })), l;\n        }, this.activate = async (param)=>{\n            let { topic: i } = param;\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS);\n            await this.pairings.update(i, {\n                active: !0,\n                expiry: s\n            }), this.core.expirer.set(i, s);\n        }, this.ping = async (i)=>{\n            this.isInitialized(), await this.isValidPing(i);\n            const { topic: s } = i;\n            if (this.pairings.keys.includes(s)) {\n                const n = await this.sendRequest(s, \"wc_pairingPing\", {}), { done: o, resolve: a, reject: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", n), (param)=>{\n                    let { error: l } = param;\n                    l ? h(l) : a();\n                }), await o();\n            }\n        }, this.updateExpiry = async (param)=>{\n            let { topic: i, expiry: s } = param;\n            this.isInitialized(), await this.pairings.update(i, {\n                expiry: s\n            });\n        }, this.updateMetadata = async (param)=>{\n            let { topic: i, metadata: s } = param;\n            this.isInitialized(), await this.pairings.update(i, {\n                peerMetadata: s\n            });\n        }, this.getPairings = ()=>(this.isInitialized(), this.pairings.values), this.disconnect = async (i)=>{\n            this.isInitialized(), await this.isValidDisconnect(i);\n            const { topic: s } = i;\n            this.pairings.keys.includes(s) && (await this.sendRequest(s, \"wc_pairingDelete\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\")), await this.deletePairing(s));\n        }, this.sendRequest = async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(s, n), a = await this.core.crypto.encode(i, o), h = F[s].req;\n            return this.core.history.set(i, o), this.core.relayer.publish(i, a, h), o.id;\n        }, this.sendResult = async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(i, n), a = await this.core.crypto.encode(s, o), h = await this.core.history.get(s, i), l = F[h.request.method].res;\n            await this.core.relayer.publish(s, a, l), await this.core.history.resolve(o);\n        }, this.sendError = async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcError)(i, n), a = await this.core.crypto.encode(s, o), h = await this.core.history.get(s, i), l = F[h.request.method] ? F[h.request.method].res : F.unregistered_method.res;\n            await this.core.relayer.publish(s, a, l), await this.core.history.resolve(o);\n        }, this.deletePairing = async (i, s)=>{\n            await this.core.relayer.unsubscribe(i), await Promise.all([\n                this.pairings.delete(i, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(i),\n                s ? Promise.resolve() : this.core.expirer.del(i)\n            ]);\n        }, this.cleanup = async ()=>{\n            const i = this.pairings.getAll().filter((s)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isExpired)(s.expiry));\n            await Promise.all(i.map((s)=>this.deletePairing(s.topic)));\n        }, this.onRelayEventRequest = (i)=>{\n            const { topic: s, payload: n } = i;\n            switch(n.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(s, n);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(s, n);\n                default:\n                    return this.onUnknownRpcMethodRequest(s, n);\n            }\n        }, this.onRelayEventResponse = async (i)=>{\n            const { topic: s, payload: n } = i, o = (await this.core.history.get(s, n.id)).request.method;\n            switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(s, n);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }, this.onPairingPingRequest = async (i, s)=>{\n            const { id: n } = s;\n            try {\n                this.isValidPing({\n                    topic: i\n                }), await this.sendResult(n, i, !0), this.events.emit(V.ping, {\n                    id: n,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(n, i, o), this.logger.error(o);\n            }\n        }, this.onPairingPingResponse = (i, s)=>{\n            const { id: n } = s;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", n), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", n), {\n                    error: s.error\n                });\n            }, 500);\n        }, this.onPairingDeleteRequest = async (i, s)=>{\n            const { id: n } = s;\n            try {\n                this.isValidDisconnect({\n                    topic: i\n                }), await this.deletePairing(i), this.events.emit(V.delete, {\n                    id: n,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(n, i, o), this.logger.error(o);\n            }\n        }, this.onUnknownRpcMethodRequest = async (i, s)=>{\n            const { id: n, method: o } = s;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(n, i, a), this.logger.error(a);\n            } catch (a) {\n                await this.sendError(n, i, a), this.logger.error(a);\n            }\n        }, this.onUnknownRpcMethodResponse = (i)=>{\n            this.registeredMethods.includes(i) || this.logger.error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", i));\n        }, this.isValidPair = (i)=>{\n            var s;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() params: \".concat(i));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidUrl)(i.uri)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri: \".concat(i.uri));\n                throw new Error(o);\n            }\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseUri)(i.uri);\n            if (!((s = n === null || n === void 0 ? void 0 : n.relay) != null && s.protocol)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw new Error(o);\n            }\n            if (!(n != null && n.symKey)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw new Error(o);\n            }\n        }, this.isValidPing = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(i)) {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"ping() params: \".concat(i));\n                throw new Error(n);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }, this.isValidDisconnect = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(i)) {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(i));\n                throw new Error(n);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }, this.isValidPairingTopic = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidString)(i, !1)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(i));\n                throw new Error(s);\n            }\n            if (!this.pairings.keys.includes(i)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(i));\n                throw new Error(s);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isExpired)(this.pairings.get(i).expiry)) {\n                await this.deletePairing(i);\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"EXPIRED\", \"pairing topic: \".concat(i));\n                throw new Error(s);\n            }\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.pairings = new Mt(this.core, this.logger, this.name, this.storagePrefix);\n    }\n}\nclass Kt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IJsonRpcHistory {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const i = {\n                topic: t.topic,\n                request: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(i);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(R.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(R.created, (e)=>{\n            const t = R.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(R.updated, (e)=>{\n            const t = R.updated;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.events.on(R.deleted, (e)=>{\n            const t = R.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            }), this.persist();\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.records.forEach((e)=>{\n                (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(e.expiry || 0) - Date.now() <= 0 && (this.logger.info(\"Deleting expired history log: \".concat(e.id)), this.delete(e.topic, e.id));\n            });\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.records = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = vt, this.version = It, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.records.set(i.id, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.set = (i, s, n)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: i,\n                request: s,\n                chainId: n\n            }), this.records.has(s.id)) return;\n            const o = {\n                id: s.id,\n                topic: i,\n                request: {\n                    method: s.method,\n                    params: s.params || null\n                },\n                chainId: n,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.events.emit(R.created, o);\n        }, this.resolve = async (i)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: i\n            }), !this.records.has(i.id)) return;\n            const s = await this.getRecord(i.id);\n            typeof s.response > \"u\" && (s.response = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(i) ? {\n                error: i.error\n            } : {\n                result: i.result\n            }, this.records.set(s.id, s), this.events.emit(R.updated, s));\n        }, this.get = async (i, s)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: i,\n                id: s\n            }), await this.getRecord(s)), this.delete = (i, s)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: s\n            }), this.values.forEach((n)=>{\n                if (n.topic === i) {\n                    if (typeof s < \"u\" && n.id !== s) return;\n                    this.records.delete(n.id), this.events.emit(R.deleted, n);\n                }\n            });\n        }, this.exists = async (i, s)=>(this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i : !1), this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nclass Bt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IExpirer {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatTopicTarget)(e);\n        if (typeof e == \"number\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatIdTarget)(e);\n        const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"UNKNOWN_TYPE\", \"Target type: \".concat(typeof e));\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(v.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored expirations for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore expirations for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.error(i), new Error(i);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: i } = t;\n        (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(i) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(v.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(v.created, (e)=>{\n            const t = v.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(v.expired, (e)=>{\n            const t = v.expired;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(v.deleted, (e)=>{\n            const t = v.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.expirations = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = Ct, this.version = Rt, this.cached = [], this.initialized = !1, this.storagePrefix = O, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.expirations.set(i.target, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.has = (i)=>{\n            try {\n                const s = this.formatTarget(i);\n                return typeof this.getExpiration(s) < \"u\";\n            } catch (e) {\n                return !1;\n            }\n        }, this.set = (i, s)=>{\n            this.isInitialized();\n            const n = this.formatTarget(i), o = {\n                target: n,\n                expiry: s\n            };\n            this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(v.created, {\n                target: n,\n                expiration: o\n            });\n        }, this.get = (i)=>{\n            this.isInitialized();\n            const s = this.formatTarget(i);\n            return this.getExpiration(s);\n        }, this.del = (i)=>{\n            if (this.isInitialized(), this.has(i)) {\n                const s = this.formatTarget(i), n = this.getExpiration(s);\n                this.expirations.delete(s), this.events.emit(v.deleted, {\n                    target: s,\n                    expiration: n\n                });\n            }\n        }, this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nclass Vt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IVerify {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(e));\n    }\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.name = Z, this.initialized = !1, this.queue = [], this.verifyDisabled = !1, this.init = async (i)=>{\n            if (this.verifyDisabled || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isReactNative)() || !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isBrowser)()) return;\n            const s = this.getVerifyUrl(i === null || i === void 0 ? void 0 : i.verifyUrl);\n            this.verifyUrl !== s && this.removeIframe(), this.verifyUrl = s;\n            try {\n                await this.createIframe();\n            } catch (n) {\n                this.logger.info(\"Verify iframe failed to load: \".concat(this.verifyUrl)), this.logger.info(n);\n            }\n            if (!this.initialized) {\n                this.removeIframe(), this.verifyUrl = ee;\n                try {\n                    await this.createIframe();\n                } catch (n) {\n                    this.logger.info(\"Verify iframe failed to load: \".concat(this.verifyUrl)), this.logger.info(n), this.verifyDisabled = !0;\n                }\n            }\n        }, this.register = async (i)=>{\n            this.initialized ? this.sendPost(i.attestationId) : (this.addToQueue(i.attestationId), await this.init());\n        }, this.resolve = async (i)=>{\n            if (this.isDevEnv) return \"\";\n            const s = this.getVerifyUrl(i === null || i === void 0 ? void 0 : i.verifyUrl);\n            let n;\n            try {\n                n = await this.fetchAttestation(i.attestationId, s);\n            } catch (o) {\n                this.logger.info(\"failed to resolve attestation: \".concat(i.attestationId, \" from url: \").concat(s)), this.logger.info(o), n = await this.fetchAttestation(i.attestationId, ee);\n            }\n            return n;\n        }, this.fetchAttestation = async (i, s)=>{\n            this.logger.info(\"resolving attestation: \".concat(i, \" from url: \").concat(s));\n            const n = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND * 2), o = await fetch(\"\".concat(s, \"/attestation/\").concat(i), {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(n), o.status === 200 ? await o.json() : void 0;\n        }, this.addToQueue = (i)=>{\n            this.queue.push(i);\n        }, this.processQueue = ()=>{\n            this.queue.length !== 0 && (this.queue.forEach((i)=>this.sendPost(i)), this.queue = []);\n        }, this.sendPost = (i)=>{\n            var s;\n            try {\n                if (!this.iframe) return;\n                (s = this.iframe.contentWindow) == null || s.postMessage(i, \"*\"), this.logger.info(\"postMessage sent: \".concat(i, \" \").concat(this.verifyUrl));\n            } catch (e) {}\n        }, this.createIframe = async ()=>{\n            let i;\n            const s = (n)=>{\n                n.data === \"verify_ready\" && (this.initialized = !0, this.processQueue(), window.removeEventListener(\"message\", s), i());\n            };\n            await Promise.race([\n                new Promise((n)=>{\n                    if (document.getElementById(Z)) return n();\n                    window.addEventListener(\"message\", s);\n                    const o = document.createElement(\"iframe\");\n                    o.id = Z, o.src = \"\".concat(this.verifyUrl, \"/\").concat(this.projectId), o.style.display = \"none\", document.body.append(o), this.iframe = o, i = n;\n                }),\n                new Promise((n, o)=>setTimeout(()=>{\n                        window.removeEventListener(\"message\", s), o(\"verify iframe load timeout\");\n                    }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS)))\n            ]);\n        }, this.removeIframe = ()=>{\n            this.iframe && (this.iframe.remove(), this.iframe = void 0, this.initialized = !1);\n        }, this.getVerifyUrl = (i)=>{\n            let s = i || $;\n            return _t.includes(s) || (this.logger.info(\"verify url: \".concat(s, \", not included in trusted list, assigning default: \").concat($)), s = $), s;\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.verifyUrl = $, this.abortController = new AbortController, this.isDevEnv = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isNode)() && process.env.IS_VITEST;\n    }\n}\nvar Or = Object.defineProperty, qt = Object.getOwnPropertySymbols, Ar = Object.prototype.hasOwnProperty, zr = Object.prototype.propertyIsEnumerable, jt = (r, e, t)=>e in r ? Or(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Gt = (r, e)=>{\n    for(var t in e || (e = {}))Ar.call(e, t) && jt(r, t, e[t]);\n    if (qt) for (var t of qt(e))zr.call(e, t) && jt(r, t, e[t]);\n    return r;\n};\nclass te extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.ICore {\n    static async init(e) {\n        const t = new te(e);\n        await t.initialize();\n        const i = await t.crypto.getClientId();\n        return await t.storage.setItem(yt, i), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(\"Core Initialization Failure at epoch \".concat(Date.now()), e), this.logger.error(e.message), e;\n        }\n    }\n    constructor(e){\n        super(e), this.protocol = le, this.version = Xe, this.name = Q, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.initialized = !1, this.on = (i, s)=>this.events.on(i, s), this.once = (i, s)=>this.events.once(i, s), this.off = (i, s)=>this.events.off(i, s), this.removeListener = (i, s)=>this.events.removeListener(i, s), this.projectId = e === null || e === void 0 ? void 0 : e.projectId, this.relayUrl = (e === null || e === void 0 ? void 0 : e.relayUrl) || ge, this.customStoragePrefix = e != null && e.customStoragePrefix ? \":\".concat(e.customStoragePrefix) : \"\";\n        const t = typeof (e === null || e === void 0 ? void 0 : e.logger) < \"u\" && typeof (e === null || e === void 0 ? void 0 : e.logger) != \"string\" ? e.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: (e === null || e === void 0 ? void 0 : e.logger) || Qe.logger\n        }));\n        this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.heartbeat = new _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HeartBeat, this.crypto = new Tt(this, this.logger, e === null || e === void 0 ? void 0 : e.keychain), this.history = new Kt(this, this.logger), this.expirer = new Bt(this, this.logger), this.storage = e != null && e.storage ? e.storage : new _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Gt(Gt({}, Ze), e === null || e === void 0 ? void 0 : e.storageOptions)), this.relayer = new Ut({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new kt(this, this.logger), this.verify = new Vt(this.projectId || \"\", this.logger);\n    }\n}\nconst Nr = te;\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Vi\");\n$RefreshReg$(_c1, \"Ue\");\n$RefreshReg$(_c2, \"Ns\");\n$RefreshReg$(_c3, \"Us\");\n$RefreshReg$(_c4, \"Ve\");\n$RefreshReg$(_c5, \"He\");\n$RefreshReg$(_c6, \"Je\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/core/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/crypto.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\nfunction getBrowerCrypto() {\n    return (__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.crypto) || (__webpack_require__.g === null || __webpack_require__.g === void 0 ? void 0 : __webpack_require__.g.msCrypto) || {};\n}\nexports.getBrowerCrypto = getBrowerCrypto;\nfunction getSubtleCrypto() {\n    const browserCrypto = getBrowerCrypto();\n    return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\nexports.getSubtleCrypto = getSubtleCrypto;\nfunction isBrowserCryptoAvailable() {\n    return !!getBrowerCrypto() && !!getSubtleCrypto();\n}\nexports.isBrowserCryptoAvailable = isBrowserCryptoAvailable; //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9jcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHQSx1QkFBdUIsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUM1RixTQUFTSTtJQUNMLE9BQU8sQ0FBQ0MscUJBQU1BLEtBQUssUUFBUUEscUJBQU1BLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUEscUJBQU1BLENBQUNDLE1BQU0sS0FBTUQsQ0FBQUEscUJBQU1BLEtBQUssUUFBUUEscUJBQU1BLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUEscUJBQU1BLENBQUNFLFFBQVEsS0FBSyxDQUFDO0FBQ3BKO0FBQ0FQLHVCQUF1QixHQUFHSTtBQUMxQixTQUFTRDtJQUNMLE1BQU1LLGdCQUFnQko7SUFDdEIsT0FBT0ksY0FBY0MsTUFBTSxJQUFJRCxjQUFjRSxZQUFZO0FBQzdEO0FBQ0FWLHVCQUF1QixHQUFHRztBQUMxQixTQUFTRDtJQUNMLE9BQU8sQ0FBQyxDQUFDRSxxQkFBcUIsQ0FBQyxDQUFDRDtBQUNwQztBQUNBSCxnQ0FBZ0MsR0FBR0UsMEJBQ25DLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzPzZkZDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRCcm93ZXJDcnlwdG8oKSB7XG4gICAgcmV0dXJuIChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwuY3J5cHRvKSB8fCAoZ2xvYmFsID09PSBudWxsIHx8IGdsb2JhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsLm1zQ3J5cHRvKSB8fCB7fTtcbn1cbmV4cG9ydHMuZ2V0QnJvd2VyQ3J5cHRvID0gZ2V0QnJvd2VyQ3J5cHRvO1xuZnVuY3Rpb24gZ2V0U3VidGxlQ3J5cHRvKCkge1xuICAgIGNvbnN0IGJyb3dzZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG8oKTtcbiAgICByZXR1cm4gYnJvd3NlckNyeXB0by5zdWJ0bGUgfHwgYnJvd3NlckNyeXB0by53ZWJraXRTdWJ0bGU7XG59XG5leHBvcnRzLmdldFN1YnRsZUNyeXB0byA9IGdldFN1YnRsZUNyeXB0bztcbmZ1bmN0aW9uIGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gISFnZXRCcm93ZXJDcnlwdG8oKSAmJiAhIWdldFN1YnRsZUNyeXB0bygpO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUgPSBpc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlIiwiZ2V0U3VidGxlQ3J5cHRvIiwiZ2V0QnJvd2VyQ3J5cHRvIiwiZ2xvYmFsIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJicm93c2VyQ3J5cHRvIiwic3VidGxlIiwid2Via2l0U3VidGxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/env.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/env.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = exports.isNode = exports.isReactNative = void 0;\nfunction isReactNative() {\n    return typeof document === \"undefined\" && typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\n}\nexports.isReactNative = isReactNative;\nfunction isNode() {\n    return typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\";\n}\nexports.isNode = isNode;\nfunction isBrowser() {\n    return !isReactNative() && !isNode();\n}\nexports.isBrowser = isBrowser; //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9lbnYuanMiLCJtYXBwaW5ncyI6IjtBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsY0FBYyxHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ2xFLFNBQVNJO0lBQ0wsT0FBUSxPQUFPQyxhQUFhLGVBQ3hCLE9BQU9DLGNBQWMsZUFDckJBLFVBQVVDLE9BQU8sS0FBSztBQUM5QjtBQUNBUCxxQkFBcUIsR0FBR0k7QUFDeEIsU0FBU0Q7SUFDTCxPQUFRLE9BQU9LLE9BQU9BLEtBQUssZUFDdkIsT0FBT0EsT0FBT0EsQ0FBQ0MsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELE9BQU9BLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLO0FBQ3pDO0FBQ0FWLGNBQWMsR0FBR0c7QUFDakIsU0FBU0Q7SUFDTCxPQUFPLENBQUNFLG1CQUFtQixDQUFDRDtBQUNoQztBQUNBSCxpQkFBaUIsR0FBR0UsV0FDcEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9lbnYuanM/NDM4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCcm93c2VyID0gZXhwb3J0cy5pc05vZGUgPSBleHBvcnRzLmlzUmVhY3ROYXRpdmUgPSB2b2lkIDA7XG5mdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCkge1xuICAgIHJldHVybiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwiUmVhY3ROYXRpdmVcIik7XG59XG5leHBvcnRzLmlzUmVhY3ROYXRpdmUgPSBpc1JlYWN0TmF0aXZlO1xuZnVuY3Rpb24gaXNOb2RlKCkge1xuICAgIHJldHVybiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gXCJ1bmRlZmluZWRcIik7XG59XG5leHBvcnRzLmlzTm9kZSA9IGlzTm9kZTtcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gIWlzUmVhY3ROYXRpdmUoKSAmJiAhaXNOb2RlKCk7XG59XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0Jyb3dzZXIiLCJpc05vZGUiLCJpc1JlYWN0TmF0aXZlIiwiZG9jdW1lbnQiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/env.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./crypto */ \"(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./env */ \"(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/env.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxvRUFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxrR0FBVSxHQUFHSDtBQUMxQ0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyw0RkFBTyxHQUFHSCxVQUN2QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50L2Rpc3QvY2pzL2luZGV4LmpzPzVjMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3J5cHRvXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VudlwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: function() { return /* binding */ G; },\n/* harmony export */   OPTIONAL_EVENTS: function() { return /* binding */ _; },\n/* harmony export */   OPTIONAL_METHODS: function() { return /* binding */ E; },\n/* harmony export */   REQUIRED_EVENTS: function() { return /* binding */ m; },\n/* harmony export */   REQUIRED_METHODS: function() { return /* binding */ u; },\n/* harmony export */   \"default\": function() { return /* binding */ v; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst P = \"wc\", S = \"ethereum_provider\", $ = \"\".concat(P, \"@2:\").concat(S, \":\"), j = \"https://rpc.walletconnect.com/v1/\", u = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], E = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\"\n], m = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], _ = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n];\nvar N = Object.defineProperty, q = Object.defineProperties, D = Object.getOwnPropertyDescriptors, y = Object.getOwnPropertySymbols, U = Object.prototype.hasOwnProperty, Q = Object.prototype.propertyIsEnumerable, O = (a, t, s)=>t in a ? N(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : a[t] = s, p = (a, t)=>{\n    for(var s in t || (t = {}))U.call(t, s) && O(a, s, t[s]);\n    if (y) for (var s of y(t))Q.call(t, s) && O(a, s, t[s]);\n    return a;\n}, M = (a, t)=>q(a, D(t));\nfunction g(a) {\n    return Number(a[0].split(\":\")[1]);\n}\nfunction f(a) {\n    return \"0x\".concat(a.toString(16));\n}\nfunction L(a) {\n    const { chains: t, optionalChains: s, methods: i, optionalMethods: n, events: e, optionalEvents: h, rpcMap: c } = a;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const o = {\n        chains: t,\n        methods: i || u,\n        events: e || m,\n        rpcMap: p({}, t.length ? {\n            [g(t)]: c[g(t)]\n        } : {})\n    }, r = e === null || e === void 0 ? void 0 : e.filter((l)=>!m.includes(l)), d = i === null || i === void 0 ? void 0 : i.filter((l)=>!u.includes(l));\n    if (!s && !h && !n && !(r != null && r.length) && !(d != null && d.length)) return {\n        required: t.length ? o : void 0\n    };\n    const C = (r === null || r === void 0 ? void 0 : r.length) && (d === null || d === void 0 ? void 0 : d.length) || !s, I = {\n        chains: [\n            ...new Set(C ? o.chains.concat(s || []) : s)\n        ],\n        methods: [\n            ...new Set(o.methods.concat(n != null && n.length ? n : E))\n        ],\n        events: [\n            ...new Set(o.events.concat(h != null && h.length ? h : _))\n        ],\n        rpcMap: c\n    };\n    return {\n        required: t.length ? o : void 0,\n        optional: s.length ? I : void 0\n    };\n}\n_c = L;\nclass v {\n    static async init(t) {\n        const s = new v;\n        return await s.initialize(t), s;\n    }\n    async request(t) {\n        return await this.signer.request(t, this.formatChainId(this.chainId));\n    }\n    sendAsync(t, s) {\n        this.signer.sendAsync(t, s, this.formatChainId(this.chainId));\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: s, optional: i } = L(this.rpc);\n        try {\n            const n = await new Promise(async (h, c)=>{\n                var o;\n                this.rpc.showQrModal && ((o = this.modal) == null || o.subscribeModal((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), c(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.connect(M(p({\n                    namespaces: p({}, s && {\n                        [this.namespace]: s\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t === null || t === void 0 ? void 0 : t.pairingTopic\n                })).then((r)=>{\n                    h(r);\n                }).catch((r)=>{\n                    c(new Error(r.message));\n                });\n            });\n            if (!n) return;\n            const e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(n.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : e), this.setAccounts(e), this.events.emit(\"connect\", {\n                chainId: f(this.chainId)\n            });\n        } catch (n) {\n            throw this.signer.logger.error(n), n;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: s } = t, { event: i } = s;\n            i.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(i.data), this.events.emit(\"accountsChanged\", this.accounts)) : i.name === \"chainChanged\" ? this.setChainId(this.formatChainId(i.data)) : this.events.emit(i.name, i.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const s = parseInt(t);\n            this.chainId = s, this.events.emit(\"chainChanged\", f(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", M(p({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            var s, i;\n            this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({\n                uri: t\n            })), this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(\"\".concat(this.namespace, \":\")) : !1;\n    }\n    formatChainId(t) {\n        return \"\".concat(this.namespace, \":\").concat(t);\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const s = t.filter((i)=>this.isCompatibleChainId(i)).map((i)=>this.parseChainId(i));\n        s.length && (this.chainId = s[0], this.events.emit(\"chainChanged\", f(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const s = this.parseChainId(t);\n            this.chainId = s, this.switchEthereumChain(s);\n        }\n    }\n    parseAccountId(t) {\n        const [s, i, n] = t.split(\":\");\n        return {\n            chainId: \"\".concat(s, \":\").concat(i),\n            address: n\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((s)=>this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s)=>this.parseAccountId(s).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var s, i;\n        const n = (s = t === null || t === void 0 ? void 0 : t.chains) != null ? s : [], e = (i = t === null || t === void 0 ? void 0 : t.optionalChains) != null ? i : [], h = n.concat(e);\n        if (!h.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const c = n.length ? (t === null || t === void 0 ? void 0 : t.methods) || u : [], o = n.length ? (t === null || t === void 0 ? void 0 : t.events) || m : [], r = (t === null || t === void 0 ? void 0 : t.optionalMethods) || [], d = (t === null || t === void 0 ? void 0 : t.optionalEvents) || [], C = (t === null || t === void 0 ? void 0 : t.rpcMap) || this.buildRpcMap(h, t.projectId), I = (t === null || t === void 0 ? void 0 : t.qrModalOptions) || void 0;\n        return {\n            chains: n === null || n === void 0 ? void 0 : n.map((l)=>this.formatChainId(l)),\n            optionalChains: e.map((l)=>this.formatChainId(l)),\n            methods: c,\n            events: o,\n            optionalMethods: r,\n            optionalEvents: d,\n            rpcMap: C,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: I,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, s) {\n        const i = {};\n        return t.forEach((n)=>{\n            i[n] = this.getRpcUrl(n, s);\n        }), i;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? g(this.rpc.chains) : g(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storageOptions: t.storageOptions\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let s;\n            try {\n                const { WalletConnectModal: i } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_walletconnect_modal_dist_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(app-pages-browser)/./node_modules/@walletconnect/modal/dist/index.js\"));\n                s = i;\n            } catch (e) {\n                throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n            }\n            if (s) try {\n                this.modal = new s(p({\n                    walletConnectVersion: 2,\n                    projectId: this.rpc.projectId,\n                    standaloneChains: this.rpc.chains\n                }, this.rpc.qrModalOptions));\n            } catch (i) {\n                throw this.signer.logger.error(i), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: s, optionalChains: i, rpcMap: n } = t;\n        s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(s) && (this.rpc.chains = s.map((e)=>this.formatChainId(e)), s.forEach((e)=>{\n            this.rpc.rpcMap[e] = (n === null || n === void 0 ? void 0 : n[e]) || this.getRpcUrl(e);\n        })), i && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(i) && (this.rpc.optionalChains = [], this.rpc.optionalChains = i === null || i === void 0 ? void 0 : i.map((e)=>this.formatChainId(e)), i.forEach((e)=>{\n            this.rpc.rpcMap[e] = (n === null || n === void 0 ? void 0 : n[e]) || this.getRpcUrl(e);\n        }));\n    }\n    getRpcUrl(t, s) {\n        var i;\n        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || \"\".concat(j, \"?chainId=eip155:\").concat(t, \"&projectId=\").concat(s || this.rpc.projectId);\n    }\n    async loadPersistedSession() {\n        if (!this.session) return;\n        const t = await this.signer.client.core.storage.getItem(\"\".concat(this.STORAGE_KEY, \"/chainId\")), s = this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] ? this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] : this.session.namespaces[this.namespace];\n        this.setChainIds(t ? [\n            this.formatChainId(t)\n        ] : s === null || s === void 0 ? void 0 : s.accounts), this.setAccounts(s === null || s === void 0 ? void 0 : s.accounts);\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(\"\".concat(this.STORAGE_KEY, \"/chainId\"), this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((s)=>this.parseAccount(s));\n    }\n    constructor(){\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.namespace = \"eip155\", this.accounts = [], this.chainId = 1, this.STORAGE_KEY = $, this.on = (t, s)=>(this.events.on(t, s), this), this.once = (t, s)=>(this.events.once(t, s), this), this.removeListener = (t, s)=>(this.events.removeListener(t, s), this), this.off = (t, s)=>(this.events.off(t, s), this), this.parseAccount = (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t, this.signer = {}, this.rpc = {};\n    }\n}\nconst G = v;\n //# sourceMappingURL=index.es.js.map\nvar _c;\n$RefreshReg$(_c, \"L\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldGhlcmV1bS1wcm92aWRlci9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFBb0c7QUFBc0U7QUFBQSxNQUFNVSxJQUFFLE1BQUtDLElBQUUscUJBQW9CQyxJQUFFLEdBQVVELE9BQVBELEdBQUUsT0FBTyxPQUFGQyxHQUFFLE1BQUdFLElBQUUscUNBQW9DQyxJQUFFO0lBQUM7SUFBc0I7Q0FBZ0IsRUFBQ0MsSUFBRTtJQUFDO0lBQWU7SUFBc0I7SUFBeUI7SUFBVztJQUFzQjtJQUFvQjtJQUF1QjtJQUF1QjtJQUFzQjtJQUFnQjtJQUE2QjtJQUEwQjtJQUF3QjtJQUE0QjtJQUE0QjtJQUFvQjtDQUFvQixFQUFDQyxJQUFFO0lBQUM7SUFBZTtDQUFrQixFQUFDQyxJQUFFO0lBQUM7SUFBZTtJQUFrQjtJQUFVO0lBQWE7Q0FBVTtBQUFDLElBQUlDLElBQUVDLE9BQU9DLGNBQWMsRUFBQ0MsSUFBRUYsT0FBT0csZ0JBQWdCLEVBQUNDLElBQUVKLE9BQU9LLHlCQUF5QixFQUFDQyxJQUFFTixPQUFPTyxxQkFBcUIsRUFBQ0MsSUFBRVIsT0FBT1MsU0FBUyxDQUFDQyxjQUFjLEVBQUNDLElBQUVYLE9BQU9TLFNBQVMsQ0FBQ0csb0JBQW9CLEVBQUNDLElBQUUsQ0FBQ0MsR0FBRUMsR0FBRUMsSUFBSUQsS0FBS0QsSUFBRWYsRUFBRWUsR0FBRUMsR0FBRTtRQUFDRSxZQUFXLENBQUM7UUFBRUMsY0FBYSxDQUFDO1FBQUVDLFVBQVMsQ0FBQztRQUFFQyxPQUFNSjtJQUFDLEtBQUdGLENBQUMsQ0FBQ0MsRUFBRSxHQUFDQyxHQUFFSyxJQUFFLENBQUNQLEdBQUVDO0lBQUssSUFBSSxJQUFJQyxLQUFLRCxLQUFJQSxDQUFBQSxJQUFFLENBQUMsR0FBR1AsRUFBRWMsSUFBSSxDQUFDUCxHQUFFQyxNQUFJSCxFQUFFQyxHQUFFRSxHQUFFRCxD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QUFBLElBQUcsSUFBSSxDQUFDeUgsWUFBWSxDQUFDekg7SUFBRztJQUE1d00wSCxhQUFhO1FBQUMsSUFBSSxDQUFDdEcsTUFBTSxHQUFDLElBQUl0RCxnREFBQ0EsRUFBQyxJQUFJLENBQUNvRyxTQUFTLEdBQUMsVUFBUyxJQUFJLENBQUNvQixRQUFRLEdBQUMsRUFBRSxFQUFDLElBQUksQ0FBQ3hDLE9BQU8sR0FBQyxHQUFFLElBQUksQ0FBQ3dFLFdBQVcsR0FBQzdJLEdBQUUsSUFBSSxDQUFDeUcsRUFBRSxHQUFDLENBQUNuRixHQUFFQyxJQUFLLEtBQUksQ0FBQ29CLE1BQU0sQ0FBQzhELEVBQUUsQ0FBQ25GLEdBQUVDLElBQUcsSUFBSSxHQUFFLElBQUksQ0FBQzJILElBQUksR0FBQyxDQUFDNUgsR0FBRUMsSUFBSyxLQUFJLENBQUNvQixNQUFNLENBQUN1RyxJQUFJLENBQUM1SCxHQUFFQyxJQUFHLElBQUksR0FBRSxJQUFJLENBQUM0SCxjQUFjLEdBQUMsQ0FBQzdILEdBQUVDLElBQUssS0FBSSxDQUFDb0IsTUFBTSxDQUFDd0csY0FBYyxDQUFDN0gsR0FBRUMsSUFBRyxJQUFJLEdBQUUsSUFBSSxDQUFDNkgsR0FBRyxHQUFDLENBQUM5SCxHQUFFQyxJQUFLLEtBQUksQ0FBQ29CLE1BQU0sQ0FBQ3lHLEdBQUcsQ0FBQzlILEdBQUVDLElBQUcsSUFBSSxHQUFFLElBQUksQ0FBQ3lILFlBQVksR0FBQzFILENBQUFBLElBQUcsSUFBSSxDQUFDaUcsbUJBQW1CLENBQUNqRyxLQUFHLElBQUksQ0FBQ3FHLGNBQWMsQ0FBQ3JHLEdBQUdzRyxPQUFPLEdBQUN0RyxHQUFFLElBQUksQ0FBQzZDLE1BQU0sR0FBQyxDQUFDLEdBQUUsSUFBSSxDQUFDYyxHQUFHLEdBQUMsQ0FBQztJQUFDO0FBQWczTDtBQUFDLE1BQU1vRSxJQUFFdEY7QUFBbUksQ0FDbjNRLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXRoZXJldW0tcHJvdmlkZXIvZGlzdC9pbmRleC5lcy5qcz9mMzY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtFdmVudEVtaXR0ZXIgYXMgYn1mcm9tXCJldmVudHNcIjtpbXBvcnR7Z2V0QWNjb3VudHNGcm9tTmFtZXNwYWNlcyBhcyBBLGdldFNka0Vycm9yIGFzIFIsaXNWYWxpZEFycmF5IGFzIHd9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdXRpbHNcIjtpbXBvcnR7VW5pdmVyc2FsUHJvdmlkZXIgYXMgVH1mcm9tXCJAd2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXJcIjtjb25zdCBQPVwid2NcIixTPVwiZXRoZXJldW1fcHJvdmlkZXJcIiwkPWAke1B9QDI6JHtTfTpgLGo9XCJodHRwczovL3JwYy53YWxsZXRjb25uZWN0LmNvbS92MS9cIix1PVtcImV0aF9zZW5kVHJhbnNhY3Rpb25cIixcInBlcnNvbmFsX3NpZ25cIl0sRT1bXCJldGhfYWNjb3VudHNcIixcImV0aF9yZXF1ZXN0QWNjb3VudHNcIixcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIixcImV0aF9zaWduXCIsXCJldGhfc2lnblRyYW5zYWN0aW9uXCIsXCJldGhfc2lnblR5cGVkRGF0YVwiLFwiZXRoX3NpZ25UeXBlZERhdGFfdjNcIixcImV0aF9zaWduVHlwZWREYXRhX3Y0XCIsXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsXCJwZXJzb25hbF9zaWduXCIsXCJ3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpblwiLFwid2FsbGV0X2FkZEV0aGVyZXVtQ2hhaW5cIixcIndhbGxldF9nZXRQZXJtaXNzaW9uc1wiLFwid2FsbGV0X3JlcXVlc3RQZXJtaXNzaW9uc1wiLFwid2FsbGV0X3JlZ2lzdGVyT25ib2FyZGluZ1wiLFwid2FsbGV0X3dhdGNoQXNzZXRcIixcIndhbGxldF9zY2FuUVJDb2RlXCJdLG09W1wiY2hhaW5DaGFuZ2VkXCIsXCJhY2NvdW50c0NoYW5nZWRcIl0sXz1bXCJjaGFpbkNoYW5nZWRcIixcImFjY291bnRzQ2hhbmdlZFwiLFwibWVzc2FnZVwiLFwiZGlzY29ubmVjdFwiLFwiY29ubmVjdFwiXTt2YXIgTj1PYmplY3QuZGVmaW5lUHJvcGVydHkscT1PYmplY3QuZGVmaW5lUHJvcGVydGllcyxEPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzLHk9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxVPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUT1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLE89KGEsdCxzKT0+dCBpbiBhP04oYSx0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpzfSk6YVt0XT1zLHA9KGEsdCk9Pntmb3IodmFyIHMgaW4gdHx8KHQ9e30pKVUuY2FsbCh0LHMpJiZPKGEscyx0W3NdKTtpZih5KWZvcih2YXIgcyBvZiB5KHQpKVEuY2FsbCh0LHMpJiZPKGEscyx0W3NdKTtyZXR1cm4gYX0sTT0oYSx0KT0+cShhLEQodCkpO2Z1bmN0aW9uIGcoYSl7cmV0dXJuIE51bWJlcihhWzBdLnNwbGl0KFwiOlwiKVsxXSl9ZnVuY3Rpb24gZihhKXtyZXR1cm5gMHgke2EudG9TdHJpbmcoMTYpfWB9ZnVuY3Rpb24gTChhKXtjb25zdHtjaGFpbnM6dCxvcHRpb25hbENoYWluczpzLG1ldGhvZHM6aSxvcHRpb25hbE1ldGhvZHM6bixldmVudHM6ZSxvcHRpb25hbEV2ZW50czpoLHJwY01hcDpjfT1hO2lmKCF3KHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hhaW5zXCIpO2NvbnN0IG89e2NoYWluczp0LG1ldGhvZHM6aXx8dSxldmVudHM6ZXx8bSxycGNNYXA6cCh7fSx0Lmxlbmd0aD97W2codCldOmNbZyh0KV19Ont9KX0scj1lPy5maWx0ZXIobD0+IW0uaW5jbHVkZXMobCkpLGQ9aT8uZmlsdGVyKGw9PiF1LmluY2x1ZGVzKGwpKTtpZighcyYmIWgmJiFuJiYhKHIhPW51bGwmJnIubGVuZ3RoKSYmIShkIT1udWxsJiZkLmxlbmd0aCkpcmV0dXJue3JlcXVpcmVkOnQubGVuZ3RoP286dm9pZCAwfTtjb25zdCBDPXI/Lmxlbmd0aCYmZD8ubGVuZ3RofHwhcyxJPXtjaGFpbnM6Wy4uLm5ldyBTZXQoQz9vLmNoYWlucy5jb25jYXQoc3x8W10pOnMpXSxtZXRob2RzOlsuLi5uZXcgU2V0KG8ubWV0aG9kcy5jb25jYXQobiE9bnVsbCYmbi5sZW5ndGg/bjpFKSldLGV2ZW50czpbLi4ubmV3IFNldChvLmV2ZW50cy5jb25jYXQoaCE9bnVsbCYmaC5sZW5ndGg/aDpfKSldLHJwY01hcDpjfTtyZXR1cm57cmVxdWlyZWQ6dC5sZW5ndGg/bzp2b2lkIDAsb3B0aW9uYWw6cy5sZW5ndGg/STp2b2lkIDB9fWNsYXNzIHZ7Y29uc3RydWN0b3IoKXt0aGlzLmV2ZW50cz1uZXcgYix0aGlzLm5hbWVzcGFjZT1cImVpcDE1NVwiLHRoaXMuYWNjb3VudHM9W10sdGhpcy5jaGFpbklkPTEsdGhpcy5TVE9SQUdFX0tFWT0kLHRoaXMub249KHQscyk9Pih0aGlzLmV2ZW50cy5vbih0LHMpLHRoaXMpLHRoaXMub25jZT0odCxzKT0+KHRoaXMuZXZlbnRzLm9uY2UodCxzKSx0aGlzKSx0aGlzLnJlbW92ZUxpc3RlbmVyPSh0LHMpPT4odGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIodCxzKSx0aGlzKSx0aGlzLm9mZj0odCxzKT0+KHRoaXMuZXZlbnRzLm9mZih0LHMpLHRoaXMpLHRoaXMucGFyc2VBY2NvdW50PXQ9PnRoaXMuaXNDb21wYXRpYmxlQ2hhaW5JZCh0KT90aGlzLnBhcnNlQWNjb3VudElkKHQpLmFkZHJlc3M6dCx0aGlzLnNpZ25lcj17fSx0aGlzLnJwYz17fX1zdGF0aWMgYXN5bmMgaW5pdCh0KXtjb25zdCBzPW5ldyB2O3JldHVybiBhd2FpdCBzLmluaXRpYWxpemUodCksc31hc3luYyByZXF1ZXN0KHQpe3JldHVybiBhd2FpdCB0aGlzLnNpZ25lci5yZXF1ZXN0KHQsdGhpcy5mb3JtYXRDaGFpbklkKHRoaXMuY2hhaW5JZCkpfXNlbmRBc3luYyh0LHMpe3RoaXMuc2lnbmVyLnNlbmRBc3luYyh0LHMsdGhpcy5mb3JtYXRDaGFpbklkKHRoaXMuY2hhaW5JZCkpfWdldCBjb25uZWN0ZWQoKXtyZXR1cm4gdGhpcy5zaWduZXIuY2xpZW50P3RoaXMuc2lnbmVyLmNsaWVudC5jb3JlLnJlbGF5ZXIuY29ubmVjdGVkOiExfWdldCBjb25uZWN0aW5nKCl7cmV0dXJuIHRoaXMuc2lnbmVyLmNsaWVudD90aGlzLnNpZ25lci5jbGllbnQuY29yZS5yZWxheWVyLmNvbm5lY3Rpbmc6ITF9YXN5bmMgZW5hYmxlKCl7cmV0dXJuIHRoaXMuc2Vzc2lvbnx8YXdhaXQgdGhpcy5jb25uZWN0KCksYXdhaXQgdGhpcy5yZXF1ZXN0KHttZXRob2Q6XCJldGhfcmVxdWVzdEFjY291bnRzXCJ9KX1hc3luYyBjb25uZWN0KHQpe2lmKCF0aGlzLnNpZ25lci5jbGllbnQpdGhyb3cgbmV3IEVycm9yKFwiUHJvdmlkZXIgbm90IGluaXRpYWxpemVkLiBDYWxsIGluaXQoKSBmaXJzdFwiKTt0aGlzLmxvYWRDb25uZWN0T3B0cyh0KTtjb25zdHtyZXF1aXJlZDpzLG9wdGlvbmFsOml9PUwodGhpcy5ycGMpO3RyeXtjb25zdCBuPWF3YWl0IG5ldyBQcm9taXNlKGFzeW5jKGgsYyk9Pnt2YXIgbzt0aGlzLnJwYy5zaG93UXJNb2RhbCYmKChvPXRoaXMubW9kYWwpPT1udWxsfHxvLnN1YnNjcmliZU1vZGFsKHI9Pnshci5vcGVuJiYhdGhpcy5zaWduZXIuc2Vzc2lvbiYmKHRoaXMuc2lnbmVyLmFib3J0UGFpcmluZ0F0dGVtcHQoKSxjKG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gcmVxdWVzdCByZXNldC4gUGxlYXNlIHRyeSBhZ2Fpbi5cIikpKX0pKSxhd2FpdCB0aGlzLnNpZ25lci5jb25uZWN0KE0ocCh7bmFtZXNwYWNlczpwKHt9LHMmJntbdGhpcy5uYW1lc3BhY2VdOnN9KX0saSYme29wdGlvbmFsTmFtZXNwYWNlczp7W3RoaXMubmFtZXNwYWNlXTppfX0pLHtwYWlyaW5nVG9waWM6dD8ucGFpcmluZ1RvcGljfSkpLnRoZW4ocj0+e2gocil9KS5jYXRjaChyPT57YyhuZXcgRXJyb3Ioci5tZXNzYWdlKSl9KX0pO2lmKCFuKXJldHVybjtjb25zdCBlPUEobi5uYW1lc3BhY2VzLFt0aGlzLm5hbWVzcGFjZV0pO3RoaXMuc2V0Q2hhaW5JZHModGhpcy5ycGMuY2hhaW5zLmxlbmd0aD90aGlzLnJwYy5jaGFpbnM6ZSksdGhpcy5zZXRBY2NvdW50cyhlKSx0aGlzLmV2ZW50cy5lbWl0KFwiY29ubmVjdFwiLHtjaGFpbklkOmYodGhpcy5jaGFpbklkKX0pfWNhdGNoKG4pe3Rocm93IHRoaXMuc2lnbmVyLmxvZ2dlci5lcnJvcihuKSxufWZpbmFsbHl7dGhpcy5tb2RhbCYmdGhpcy5tb2RhbC5jbG9zZU1vZGFsKCl9fWFzeW5jIGRpc2Nvbm5lY3QoKXt0aGlzLnNlc3Npb24mJmF3YWl0IHRoaXMuc2lnbmVyLmRpc2Nvbm5lY3QoKSx0aGlzLnJlc2V0KCl9Z2V0IGlzV2FsbGV0Q29ubmVjdCgpe3JldHVybiEwfWdldCBzZXNzaW9uKCl7cmV0dXJuIHRoaXMuc2lnbmVyLnNlc3Npb259cmVnaXN0ZXJFdmVudExpc3RlbmVycygpe3RoaXMuc2lnbmVyLm9uKFwic2Vzc2lvbl9ldmVudFwiLHQ9Pntjb25zdHtwYXJhbXM6c309dCx7ZXZlbnQ6aX09cztpLm5hbWU9PT1cImFjY291bnRzQ2hhbmdlZFwiPyh0aGlzLmFjY291bnRzPXRoaXMucGFyc2VBY2NvdW50cyhpLmRhdGEpLHRoaXMuZXZlbnRzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIix0aGlzLmFjY291bnRzKSk6aS5uYW1lPT09XCJjaGFpbkNoYW5nZWRcIj90aGlzLnNldENoYWluSWQodGhpcy5mb3JtYXRDaGFpbklkKGkuZGF0YSkpOnRoaXMuZXZlbnRzLmVtaXQoaS5uYW1lLGkuZGF0YSksdGhpcy5ldmVudHMuZW1pdChcInNlc3Npb25fZXZlbnRcIix0KX0pLHRoaXMuc2lnbmVyLm9uKFwiY2hhaW5DaGFuZ2VkXCIsdD0+e2NvbnN0IHM9cGFyc2VJbnQodCk7dGhpcy5jaGFpbklkPXMsdGhpcy5ldmVudHMuZW1pdChcImNoYWluQ2hhbmdlZFwiLGYodGhpcy5jaGFpbklkKSksdGhpcy5wZXJzaXN0KCl9KSx0aGlzLnNpZ25lci5vbihcInNlc3Npb25fdXBkYXRlXCIsdD0+e3RoaXMuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3VwZGF0ZVwiLHQpfSksdGhpcy5zaWduZXIub24oXCJzZXNzaW9uX2RlbGV0ZVwiLHQ9Pnt0aGlzLnJlc2V0KCksdGhpcy5ldmVudHMuZW1pdChcInNlc3Npb25fZGVsZXRlXCIsdCksdGhpcy5ldmVudHMuZW1pdChcImRpc2Nvbm5lY3RcIixNKHAoe30sUihcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSx7ZGF0YTp0LnRvcGljLG5hbWU6XCJVU0VSX0RJU0NPTk5FQ1RFRFwifSkpfSksdGhpcy5zaWduZXIub24oXCJkaXNwbGF5X3VyaVwiLHQ9Pnt2YXIgcyxpO3RoaXMucnBjLnNob3dRck1vZGFsJiYoKHM9dGhpcy5tb2RhbCk9PW51bGx8fHMuY2xvc2VNb2RhbCgpLChpPXRoaXMubW9kYWwpPT1udWxsfHxpLm9wZW5Nb2RhbCh7dXJpOnR9KSksdGhpcy5ldmVudHMuZW1pdChcImRpc3BsYXlfdXJpXCIsdCl9KX1zd2l0Y2hFdGhlcmV1bUNoYWluKHQpe3RoaXMucmVxdWVzdCh7bWV0aG9kOlwid2FsbGV0X3N3aXRjaEV0aGVyZXVtQ2hhaW5cIixwYXJhbXM6W3tjaGFpbklkOnQudG9TdHJpbmcoMTYpfV19KX1pc0NvbXBhdGlibGVDaGFpbklkKHQpe3JldHVybiB0eXBlb2YgdD09XCJzdHJpbmdcIj90LnN0YXJ0c1dpdGgoYCR7dGhpcy5uYW1lc3BhY2V9OmApOiExfWZvcm1hdENoYWluSWQodCl7cmV0dXJuYCR7dGhpcy5uYW1lc3BhY2V9OiR7dH1gfXBhcnNlQ2hhaW5JZCh0KXtyZXR1cm4gTnVtYmVyKHQuc3BsaXQoXCI6XCIpWzFdKX1zZXRDaGFpbklkcyh0KXtjb25zdCBzPXQuZmlsdGVyKGk9PnRoaXMuaXNDb21wYXRpYmxlQ2hhaW5JZChpKSkubWFwKGk9PnRoaXMucGFyc2VDaGFpbklkKGkpKTtzLmxlbmd0aCYmKHRoaXMuY2hhaW5JZD1zWzBdLHRoaXMuZXZlbnRzLmVtaXQoXCJjaGFpbkNoYW5nZWRcIixmKHRoaXMuY2hhaW5JZCkpLHRoaXMucGVyc2lzdCgpKX1zZXRDaGFpbklkKHQpe2lmKHRoaXMuaXNDb21wYXRpYmxlQ2hhaW5JZCh0KSl7Y29uc3Qgcz10aGlzLnBhcnNlQ2hhaW5JZCh0KTt0aGlzLmNoYWluSWQ9cyx0aGlzLnN3aXRjaEV0aGVyZXVtQ2hhaW4ocyl9fXBhcnNlQWNjb3VudElkKHQpe2NvbnN0W3MsaSxuXT10LnNwbGl0KFwiOlwiKTtyZXR1cm57Y2hhaW5JZDpgJHtzfToke2l9YCxhZGRyZXNzOm59fXNldEFjY291bnRzKHQpe3RoaXMuYWNjb3VudHM9dC5maWx0ZXIocz0+dGhpcy5wYXJzZUNoYWluSWQodGhpcy5wYXJzZUFjY291bnRJZChzKS5jaGFpbklkKT09PXRoaXMuY2hhaW5JZCkubWFwKHM9PnRoaXMucGFyc2VBY2NvdW50SWQocykuYWRkcmVzcyksdGhpcy5ldmVudHMuZW1pdChcImFjY291bnRzQ2hhbmdlZFwiLHRoaXMuYWNjb3VudHMpfWdldFJwY0NvbmZpZyh0KXt2YXIgcyxpO2NvbnN0IG49KHM9dD8uY2hhaW5zKSE9bnVsbD9zOltdLGU9KGk9dD8ub3B0aW9uYWxDaGFpbnMpIT1udWxsP2k6W10saD1uLmNvbmNhdChlKTtpZighaC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gY2hhaW5zIHNwZWNpZmllZCBpbiBlaXRoZXIgYGNoYWluc2Agb3IgYG9wdGlvbmFsQ2hhaW5zYFwiKTtjb25zdCBjPW4ubGVuZ3RoP3Q/Lm1ldGhvZHN8fHU6W10sbz1uLmxlbmd0aD90Py5ldmVudHN8fG06W10scj10Py5vcHRpb25hbE1ldGhvZHN8fFtdLGQ9dD8ub3B0aW9uYWxFdmVudHN8fFtdLEM9dD8ucnBjTWFwfHx0aGlzLmJ1aWxkUnBjTWFwKGgsdC5wcm9qZWN0SWQpLEk9dD8ucXJNb2RhbE9wdGlvbnN8fHZvaWQgMDtyZXR1cm57Y2hhaW5zOm4/Lm1hcChsPT50aGlzLmZvcm1hdENoYWluSWQobCkpLG9wdGlvbmFsQ2hhaW5zOmUubWFwKGw9PnRoaXMuZm9ybWF0Q2hhaW5JZChsKSksbWV0aG9kczpjLGV2ZW50czpvLG9wdGlvbmFsTWV0aG9kczpyLG9wdGlvbmFsRXZlbnRzOmQscnBjTWFwOkMsc2hvd1FyTW9kYWw6ISEodCE9bnVsbCYmdC5zaG93UXJNb2RhbCkscXJNb2RhbE9wdGlvbnM6SSxwcm9qZWN0SWQ6dC5wcm9qZWN0SWQsbWV0YWRhdGE6dC5tZXRhZGF0YX19YnVpbGRScGNNYXAodCxzKXtjb25zdCBpPXt9O3JldHVybiB0LmZvckVhY2gobj0+e2lbbl09dGhpcy5nZXRScGNVcmwobixzKX0pLGl9YXN5bmMgaW5pdGlhbGl6ZSh0KXtpZih0aGlzLnJwYz10aGlzLmdldFJwY0NvbmZpZyh0KSx0aGlzLmNoYWluSWQ9dGhpcy5ycGMuY2hhaW5zLmxlbmd0aD9nKHRoaXMucnBjLmNoYWlucyk6Zyh0aGlzLnJwYy5vcHRpb25hbENoYWlucyksdGhpcy5zaWduZXI9YXdhaXQgVC5pbml0KHtwcm9qZWN0SWQ6dGhpcy5ycGMucHJvamVjdElkLG1ldGFkYXRhOnRoaXMucnBjLm1ldGFkYXRhLGRpc2FibGVQcm92aWRlclBpbmc6dC5kaXNhYmxlUHJvdmlkZXJQaW5nLHJlbGF5VXJsOnQucmVsYXlVcmwsc3RvcmFnZU9wdGlvbnM6dC5zdG9yYWdlT3B0aW9uc30pLHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpLGF3YWl0IHRoaXMubG9hZFBlcnNpc3RlZFNlc3Npb24oKSx0aGlzLnJwYy5zaG93UXJNb2RhbCl7bGV0IHM7dHJ5e2NvbnN0e1dhbGxldENvbm5lY3RNb2RhbDppfT1hd2FpdCBpbXBvcnQoXCJAd2FsbGV0Y29ubmVjdC9tb2RhbFwiKTtzPWl9Y2F0Y2h7dGhyb3cgbmV3IEVycm9yKFwiVG8gdXNlIFFSIG1vZGFsLCBwbGVhc2UgaW5zdGFsbCBAd2FsbGV0Y29ubmVjdC9tb2RhbCBwYWNrYWdlXCIpfWlmKHMpdHJ5e3RoaXMubW9kYWw9bmV3IHMocCh7d2FsbGV0Q29ubmVjdFZlcnNpb246Mixwcm9qZWN0SWQ6dGhpcy5ycGMucHJvamVjdElkLHN0YW5kYWxvbmVDaGFpbnM6dGhpcy5ycGMuY2hhaW5zfSx0aGlzLnJwYy5xck1vZGFsT3B0aW9ucykpfWNhdGNoKGkpe3Rocm93IHRoaXMuc2lnbmVyLmxvZ2dlci5lcnJvcihpKSxuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2VuZXJhdGUgV2FsbGV0Q29ubmVjdE1vZGFsIEluc3RhbmNlXCIpfX19bG9hZENvbm5lY3RPcHRzKHQpe2lmKCF0KXJldHVybjtjb25zdHtjaGFpbnM6cyxvcHRpb25hbENoYWluczppLHJwY01hcDpufT10O3MmJncocykmJih0aGlzLnJwYy5jaGFpbnM9cy5tYXAoZT0+dGhpcy5mb3JtYXRDaGFpbklkKGUpKSxzLmZvckVhY2goZT0+e3RoaXMucnBjLnJwY01hcFtlXT1uPy5bZV18fHRoaXMuZ2V0UnBjVXJsKGUpfSkpLGkmJncoaSkmJih0aGlzLnJwYy5vcHRpb25hbENoYWlucz1bXSx0aGlzLnJwYy5vcHRpb25hbENoYWlucz1pPy5tYXAoZT0+dGhpcy5mb3JtYXRDaGFpbklkKGUpKSxpLmZvckVhY2goZT0+e3RoaXMucnBjLnJwY01hcFtlXT1uPy5bZV18fHRoaXMuZ2V0UnBjVXJsKGUpfSkpfWdldFJwY1VybCh0LHMpe3ZhciBpO3JldHVybigoaT10aGlzLnJwYy5ycGNNYXApPT1udWxsP3ZvaWQgMDppW3RdKXx8YCR7an0/Y2hhaW5JZD1laXAxNTU6JHt0fSZwcm9qZWN0SWQ9JHtzfHx0aGlzLnJwYy5wcm9qZWN0SWR9YH1hc3luYyBsb2FkUGVyc2lzdGVkU2Vzc2lvbigpe2lmKCF0aGlzLnNlc3Npb24pcmV0dXJuO2NvbnN0IHQ9YXdhaXQgdGhpcy5zaWduZXIuY2xpZW50LmNvcmUuc3RvcmFnZS5nZXRJdGVtKGAke3RoaXMuU1RPUkFHRV9LRVl9L2NoYWluSWRgKSxzPXRoaXMuc2Vzc2lvbi5uYW1lc3BhY2VzW2Ake3RoaXMubmFtZXNwYWNlfToke3R9YF0/dGhpcy5zZXNzaW9uLm5hbWVzcGFjZXNbYCR7dGhpcy5uYW1lc3BhY2V9OiR7dH1gXTp0aGlzLnNlc3Npb24ubmFtZXNwYWNlc1t0aGlzLm5hbWVzcGFjZV07dGhpcy5zZXRDaGFpbklkcyh0P1t0aGlzLmZvcm1hdENoYWluSWQodCldOnM/LmFjY291bnRzKSx0aGlzLnNldEFjY291bnRzKHM/LmFjY291bnRzKX1yZXNldCgpe3RoaXMuY2hhaW5JZD0xLHRoaXMuYWNjb3VudHM9W119cGVyc2lzdCgpe3RoaXMuc2Vzc2lvbiYmdGhpcy5zaWduZXIuY2xpZW50LmNvcmUuc3RvcmFnZS5zZXRJdGVtKGAke3RoaXMuU1RPUkFHRV9LRVl9L2NoYWluSWRgLHRoaXMuY2hhaW5JZCl9cGFyc2VBY2NvdW50cyh0KXtyZXR1cm4gdHlwZW9mIHQ9PVwic3RyaW5nXCJ8fHQgaW5zdGFuY2VvZiBTdHJpbmc/W3RoaXMucGFyc2VBY2NvdW50KHQpXTp0Lm1hcChzPT50aGlzLnBhcnNlQWNjb3VudChzKSl9fWNvbnN0IEc9djtleHBvcnR7RyBhcyBFdGhlcmV1bVByb3ZpZGVyLF8gYXMgT1BUSU9OQUxfRVZFTlRTLEUgYXMgT1BUSU9OQUxfTUVUSE9EUyxtIGFzIFJFUVVJUkVEX0VWRU5UUyx1IGFzIFJFUVVJUkVEX01FVEhPRFMsdiBhcyBkZWZhdWx0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsImIiLCJnZXRBY2NvdW50c0Zyb21OYW1lc3BhY2VzIiwiQSIsImdldFNka0Vycm9yIiwiUiIsImlzVmFsaWRBcnJheSIsInciLCJVbml2ZXJzYWxQcm92aWRlciIsIlQiLCJQIiwiUyIsIiQiLCJqIiwidSIsIkUiLCJtIiwiXyIsIk4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInEiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJ5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiVSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiUSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTyIsImEiLCJ0IiwicyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwicCIsImNhbGwiLCJNIiwiZyIsIk51bWJlciIsInNwbGl0IiwiZiIsInRvU3RyaW5nIiwiTCIsImNoYWlucyIsIm9wdGlvbmFsQ2hhaW5zIiwibWV0aG9kcyIsImkiLCJvcHRpb25hbE1ldGhvZHMiLCJuIiwiZXZlbnRzIiwiZSIsIm9wdGlvbmFsRXZlbnRzIiwiaCIsInJwY01hcCIsImMiLCJFcnJvciIsIm8iLCJsZW5ndGgiLCJyIiwiZmlsdGVyIiwibCIsImluY2x1ZGVzIiwiZCIsInJlcXVpcmVkIiwiQyIsIkkiLCJTZXQiLCJjb25jYXQiLCJvcHRpb25hbCIsInYiLCJpbml0IiwiaW5pdGlhbGl6ZSIsInJlcXVlc3QiLCJzaWduZXIiLCJmb3JtYXRDaGFpbklkIiwiY2hhaW5JZCIsInNlbmRBc3luYyIsImNvbm5lY3RlZCIsImNsaWVudCIsImNvcmUiLCJyZWxheWVyIiwiY29ubmVjdGluZyIsImVuYWJsZSIsInNlc3Npb24iLCJjb25uZWN0IiwibWV0aG9kIiwibG9hZENvbm5lY3RPcHRzIiwicnBjIiwiUHJvbWlzZSIsInNob3dRck1vZGFsIiwibW9kYWwiLCJzdWJzY3JpYmVNb2RhbCIsIm9wZW4iLCJhYm9ydFBhaXJpbmdBdHRlbXB0IiwibmFtZXNwYWNlcyIsIm5hbWVzcGFjZSIsIm9wdGlvbmFsTmFtZXNwYWNlcyIsInBhaXJpbmdUb3BpYyIsInRoZW4iLCJjYXRjaCIsIm1lc3NhZ2UiLCJzZXRDaGFpbklkcyIsInNldEFjY291bnRzIiwiZW1pdCIsImxvZ2dlciIsImVycm9yIiwiY2xvc2VNb2RhbCIsImRpc2Nvbm5lY3QiLCJyZXNldCIsImlzV2FsbGV0Q29ubmVjdCIsInJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMiLCJvbiIsInBhcmFtcyIsImV2ZW50IiwibmFtZSIsImFjY291bnRzIiwicGFyc2VBY2NvdW50cyIsImRhdGEiLCJzZXRDaGFpbklkIiwicGFyc2VJbnQiLCJwZXJzaXN0IiwidG9waWMiLCJvcGVuTW9kYWwiLCJ1cmkiLCJzd2l0Y2hFdGhlcmV1bUNoYWluIiwiaXNDb21wYXRpYmxlQ2hhaW5JZCIsInN0YXJ0c1dpdGgiLCJwYXJzZUNoYWluSWQiLCJtYXAiLCJwYXJzZUFjY291bnRJZCIsImFkZHJlc3MiLCJnZXRScGNDb25maWciLCJidWlsZFJwY01hcCIsInByb2plY3RJZCIsInFyTW9kYWxPcHRpb25zIiwibWV0YWRhdGEiLCJmb3JFYWNoIiwiZ2V0UnBjVXJsIiwiZGlzYWJsZVByb3ZpZGVyUGluZyIsInJlbGF5VXJsIiwic3RvcmFnZU9wdGlvbnMiLCJsb2FkUGVyc2lzdGVkU2Vzc2lvbiIsIldhbGxldENvbm5lY3RNb2RhbCIsIndhbGxldENvbm5lY3RWZXJzaW9uIiwic3RhbmRhbG9uZUNoYWlucyIsInN0b3JhZ2UiLCJnZXRJdGVtIiwiU1RPUkFHRV9LRVkiLCJzZXRJdGVtIiwiU3RyaW5nIiwicGFyc2VBY2NvdW50IiwiY29uc3RydWN0b3IiLCJvbmNlIiwicmVtb3ZlTGlzdGVuZXIiLCJvZmYiLCJHIiwiRXRoZXJldW1Qcm92aWRlciIsIk9QVElPTkFMX0VWRU5UUyIsIk9QVElPTkFMX01FVEhPRFMiLCJSRVFVSVJFRF9FVkVOVFMiLCJSRVFVSVJFRF9NRVRIT0RTIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/events.js":
/*!***************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/events.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: function() { return /* binding */ IEvents; }\n/* harmony export */ });\nclass IEvents {\n} //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vZXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtBQUNiLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vZXZlbnRzLmpzPzEwNTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIElFdmVudHMge1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJJRXZlbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/events.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: function() { return /* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_0__.IEvents; }\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/events.js\");\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUIsQ0FDekIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9ldmVudHMvZGlzdC9lc20vaW5kZXguanM/ZDMwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9ldmVudHNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HEARTBEAT_EVENTS = exports.HEARTBEAT_INTERVAL = void 0;\nconst time_1 = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\nexports.HEARTBEAT_INTERVAL = time_1.FIVE_SECONDS;\nexports.HEARTBEAT_EVENTS = {\n    pulse: \"heartbeat_pulse\"\n}; //# sourceMappingURL=heartbeat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvY29uc3RhbnRzL2hlYXJ0YmVhdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDN0QsTUFBTUksU0FBU0MsbUJBQU9BLENBQUMscUdBQXFCO0FBQzVDTCwwQkFBMEIsR0FBR0ksT0FBT0UsWUFBWTtBQUNoRE4sd0JBQXdCLEdBQUc7SUFDdkJPLE9BQU87QUFDWCxHQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvY2pzL2NvbnN0YW50cy9oZWFydGJlYXQuanM/MmM2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSEVBUlRCRUFUX0VWRU5UUyA9IGV4cG9ydHMuSEVBUlRCRUFUX0lOVEVSVkFMID0gdm9pZCAwO1xuY29uc3QgdGltZV8xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L3RpbWVcIik7XG5leHBvcnRzLkhFQVJUQkVBVF9JTlRFUlZBTCA9IHRpbWVfMS5GSVZFX1NFQ09ORFM7XG5leHBvcnRzLkhFQVJUQkVBVF9FVkVOVFMgPSB7XG4gICAgcHVsc2U6IFwiaGVhcnRiZWF0X3B1bHNlXCIsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhcnRiZWF0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkhFQVJUQkVBVF9FVkVOVFMiLCJIRUFSVEJFQVRfSU5URVJWQUwiLCJ0aW1lXzEiLCJyZXF1aXJlIiwiRklWRV9TRUNPTkRTIiwicHVsc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvY29uc3RhbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLG9FQUFPO0FBQy9CRCxRQUFRRSxZQUFZLENBQUNELG1CQUFPQSxDQUFDLGdIQUFhLEdBQUdILFVBQzdDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvY2pzL2NvbnN0YW50cy9pbmRleC5qcz8zZjI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hlYXJ0YmVhdFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HeartBeat = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.js\");\nconst events_1 = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\nconst time_1 = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js\");\nclass HeartBeat extends types_1.IHeartBeat {\n    static init(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const heartbeat = new HeartBeat(opts);\n            yield heartbeat.init();\n            return heartbeat;\n        });\n    }\n    init() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            yield this.initialize();\n        });\n    }\n    stop() {\n        clearInterval(this.intervalRef);\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    initialize() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            this.intervalRef = setInterval(()=>this.pulse(), time_1.toMiliseconds(this.interval));\n        });\n    }\n    pulse() {\n        this.events.emit(constants_1.HEARTBEAT_EVENTS.pulse);\n    }\n    constructor(opts){\n        super(opts);\n        this.events = new events_1.EventEmitter();\n        this.interval = constants_1.HEARTBEAT_INTERVAL;\n        this.interval = (opts === null || opts === void 0 ? void 0 : opts.interval) || constants_1.HEARTBEAT_INTERVAL;\n    }\n}\nexports.HeartBeat = HeartBeat; //# sourceMappingURL=heartbeat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvaGVhcnRiZWF0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLG9FQUFPO0FBQy9CLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDLG1FQUFRO0FBQ2pDLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDLHFHQUFxQjtBQUM1QyxNQUFNRyxVQUFVSCxtQkFBT0EsQ0FBQyxvR0FBUztBQUNqQyxNQUFNSSxjQUFjSixtQkFBT0EsQ0FBQyw0R0FBYTtBQUN6QyxNQUFNRixrQkFBa0JLLFFBQVFFLFVBQVU7SUFPdEMsT0FBT0MsS0FBS0MsSUFBSSxFQUFFO1FBQ2QsT0FBT1IsUUFBUVMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQzNDLE1BQU1DLFlBQVksSUFBSVgsVUFBVVM7WUFDaEMsTUFBTUUsVUFBVUgsSUFBSTtZQUNwQixPQUFPRztRQUNYO0lBQ0o7SUFDQUgsT0FBTztRQUNILE9BQU9QLFFBQVFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUMzQyxNQUFNLElBQUksQ0FBQ0UsVUFBVTtRQUN6QjtJQUNKO0lBQ0FDLE9BQU87UUFDSEMsY0FBYyxJQUFJLENBQUNDLFdBQVc7SUFDbEM7SUFDQUMsR0FBR0MsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDaEIsSUFBSSxDQUFDQyxNQUFNLENBQUNILEVBQUUsQ0FBQ0MsT0FBT0M7SUFDMUI7SUFDQUUsS0FBS0gsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDbEIsSUFBSSxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQ0gsT0FBT0M7SUFDNUI7SUFDQUcsSUFBSUosS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDakIsSUFBSSxDQUFDQyxNQUFNLENBQUNFLEdBQUcsQ0FBQ0osT0FBT0M7SUFDM0I7SUFDQUksZUFBZUwsS0FBSyxFQUFFQyxRQUFRLEVBQUU7UUFDNUIsSUFBSSxDQUFDQyxNQUFNLENBQUNHLGNBQWMsQ0FBQ0wsT0FBT0M7SUFDdEM7SUFDQU4sYUFBYTtRQUNULE9BQU9YLFFBQVFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUMzQyxJQUFJLENBQUNLLFdBQVcsR0FBR1EsWUFBWSxJQUFNLElBQUksQ0FBQ0MsS0FBSyxJQUFJcEIsT0FBT3FCLGFBQWEsQ0FBQyxJQUFJLENBQUNDLFFBQVE7UUFDekY7SUFDSjtJQUNBRixRQUFRO1FBQ0osSUFBSSxDQUFDTCxNQUFNLENBQUNRLElBQUksQ0FBQ3JCLFlBQVlzQixnQkFBZ0IsQ0FBQ0osS0FBSztJQUN2RDtJQXhDQUssWUFBWXBCLElBQUksQ0FBRTtRQUNkLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNVLE1BQU0sR0FBRyxJQUFJaEIsU0FBUzJCLFlBQVk7UUFDdkMsSUFBSSxDQUFDSixRQUFRLEdBQUdwQixZQUFZeUIsa0JBQWtCO1FBQzlDLElBQUksQ0FBQ0wsUUFBUSxHQUFHLENBQUNqQixTQUFTLFFBQVFBLFNBQVMsS0FBSyxJQUFJLEtBQUssSUFBSUEsS0FBS2lCLFFBQVEsS0FBS3BCLFlBQVl5QixrQkFBa0I7SUFDakg7QUFvQ0o7QUFDQWpDLGlCQUFpQixHQUFHRSxXQUNwQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9oZWFydGJlYXQuanM/NjgwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGVhcnRCZWF0ID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IHRpbWVfMSA9IHJlcXVpcmUoXCJAd2FsbGV0Y29ubmVjdC90aW1lXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jbGFzcyBIZWFydEJlYXQgZXh0ZW5kcyB0eXBlc18xLklIZWFydEJlYXQge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgc3VwZXIob3B0cyk7XG4gICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmludGVydmFsID0gY29uc3RhbnRzXzEuSEVBUlRCRUFUX0lOVEVSVkFMO1xuICAgICAgICB0aGlzLmludGVydmFsID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5pbnRlcnZhbCkgfHwgY29uc3RhbnRzXzEuSEVBUlRCRUFUX0lOVEVSVkFMO1xuICAgIH1cbiAgICBzdGF0aWMgaW5pdChvcHRzKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYXJ0YmVhdCA9IG5ldyBIZWFydEJlYXQob3B0cyk7XG4gICAgICAgICAgICB5aWVsZCBoZWFydGJlYXQuaW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGhlYXJ0YmVhdDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsUmVmKTtcbiAgICB9XG4gICAgb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uY2UoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vZmYoZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWxSZWYgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLnB1bHNlKCksIHRpbWVfMS50b01pbGlzZWNvbmRzKHRoaXMuaW50ZXJ2YWwpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1bHNlKCkge1xuICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KGNvbnN0YW50c18xLkhFQVJUQkVBVF9FVkVOVFMucHVsc2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuSGVhcnRCZWF0ID0gSGVhcnRCZWF0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVhcnRiZWF0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkhlYXJ0QmVhdCIsInRzbGliXzEiLCJyZXF1aXJlIiwiZXZlbnRzXzEiLCJ0aW1lXzEiLCJ0eXBlc18xIiwiY29uc3RhbnRzXzEiLCJJSGVhcnRCZWF0IiwiaW5pdCIsIm9wdHMiLCJfX2F3YWl0ZXIiLCJoZWFydGJlYXQiLCJpbml0aWFsaXplIiwic3RvcCIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbFJlZiIsIm9uIiwiZXZlbnQiLCJsaXN0ZW5lciIsImV2ZW50cyIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInNldEludGVydmFsIiwicHVsc2UiLCJ0b01pbGlzZWNvbmRzIiwiaW50ZXJ2YWwiLCJlbWl0IiwiSEVBUlRCRUFUX0VWRU5UUyIsImNvbnN0cnVjdG9yIiwiRXZlbnRFbWl0dGVyIiwiSEVBUlRCRUFUX0lOVEVSVkFMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/cjs/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsb0VBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsc0dBQWEsR0FBR0g7QUFDN0NFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsb0dBQVMsR0FBR0g7QUFDekNFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsNEdBQWEsR0FBR0gsVUFDN0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvaW5kZXguanM/YzhhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWFydGJlYXRcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IHeartBeat = void 0;\nconst events_1 = __webpack_require__(/*! @walletconnect/events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\");\nclass IHeartBeat extends events_1.IEvents {\n    constructor(opts){\n        super();\n    }\n}\nexports.IHeartBeat = IHeartBeat; //# sourceMappingURL=heartbeat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvdHlwZXMvaGVhcnRiZWF0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLFdBQVdDLG1CQUFPQSxDQUFDLHlHQUF1QjtBQUNoRCxNQUFNRixtQkFBbUJDLFNBQVNFLE9BQU87SUFDckNDLFlBQVlDLElBQUksQ0FBRTtRQUNkLEtBQUs7SUFDVDtBQUNKO0FBQ0FQLGtCQUFrQixHQUFHRSxZQUNyQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy90eXBlcy9oZWFydGJlYXQuanM/YTFjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSUhlYXJ0QmVhdCA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcIkB3YWxsZXRjb25uZWN0L2V2ZW50c1wiKTtcbmNsYXNzIElIZWFydEJlYXQgZXh0ZW5kcyBldmVudHNfMS5JRXZlbnRzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuZXhwb3J0cy5JSGVhcnRCZWF0ID0gSUhlYXJ0QmVhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYXJ0YmVhdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJSGVhcnRCZWF0IiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwiSUV2ZW50cyIsImNvbnN0cnVjdG9yIiwib3B0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsb0VBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsNEdBQWEsR0FBR0gsVUFDN0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvdHlwZXMvaW5kZXguanM/YmE4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWFydGJlYXRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: function() { return /* binding */ HttpConnection; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"(app-pages-browser)/./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\nconst DEFAULT_HTTP_HEADERS = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n};\nconst DEFAULT_HTTP_METHOD = \"POST\";\nconst DEFAULT_FETCH_OPTS = {\n    headers: DEFAULT_HTTP_HEADERS,\n    method: DEFAULT_HTTP_METHOD\n};\nconst EVENT_EMITTER_MAX_LISTENERS_DEFAULT = 10;\nclass HttpConnection {\n    get connected() {\n        return this.isAvailable;\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async open() {\n        let url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        await this.register(url);\n    }\n    async close() {\n        if (!this.isAvailable) {\n            throw new Error(\"Connection already closed\");\n        }\n        this.onClose();\n    }\n    async send(payload, context) {\n        if (!this.isAvailable) {\n            await this.register();\n        }\n        try {\n            const body = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)(payload);\n            const res = await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(this.url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n                body\n            }));\n            const data = await res.json();\n            this.onPayload({\n                data\n            });\n        } catch (e) {\n            this.onError(payload.id, e);\n        }\n    }\n    async register() {\n        let url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(url)) {\n            throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(url));\n        }\n        if (this.registering) {\n            const currentMaxListeners = this.events.getMaxListeners();\n            if (this.events.listenerCount(\"register_error\") >= currentMaxListeners || this.events.listenerCount(\"open\") >= currentMaxListeners) {\n                this.events.setMaxListeners(currentMaxListeners + 1);\n            }\n            return new Promise((resolve, reject)=>{\n                this.events.once(\"register_error\", (error)=>{\n                    this.resetMaxListeners();\n                    reject(error);\n                });\n                this.events.once(\"open\", ()=>{\n                    this.resetMaxListeners();\n                    if (typeof this.isAvailable === \"undefined\") {\n                        return reject(new Error(\"HTTP connection is missing or invalid\"));\n                    }\n                    resolve();\n                });\n            });\n        }\n        this.url = url;\n        this.registering = true;\n        try {\n            if (!this.disableProviderPing) {\n                const body = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)({\n                    id: 1,\n                    jsonrpc: \"2.0\",\n                    method: \"test\",\n                    params: []\n                });\n                await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(url, Object.assign(Object.assign({}, DEFAULT_FETCH_OPTS), {\n                    body\n                }));\n            }\n            this.onOpen();\n        } catch (e) {\n            const error = this.parseError(e);\n            this.events.emit(\"register_error\", error);\n            this.onClose();\n            throw error;\n        }\n    }\n    onOpen() {\n        this.isAvailable = true;\n        this.registering = false;\n        this.events.emit(\"open\");\n    }\n    onClose() {\n        this.isAvailable = false;\n        this.registering = false;\n        this.events.emit(\"close\");\n    }\n    onPayload(e) {\n        if (typeof e.data === \"undefined\") return;\n        const payload = typeof e.data === \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(e.data) : e.data;\n        this.events.emit(\"payload\", payload);\n    }\n    onError(id, e) {\n        const error = this.parseError(e);\n        const message = error.message || error.toString();\n        const payload = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(id, message);\n        this.events.emit(\"payload\", payload);\n    }\n    parseError(e) {\n        let url = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.url;\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.parseConnectionError)(e, url, \"HTTP\");\n    }\n    resetMaxListeners() {\n        if (this.events.getMaxListeners() > EVENT_EMITTER_MAX_LISTENERS_DEFAULT) {\n            this.events.setMaxListeners(EVENT_EMITTER_MAX_LISTENERS_DEFAULT);\n        }\n    }\n    constructor(url, disableProviderPing = false){\n        this.url = url;\n        this.disableProviderPing = disableProviderPing;\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n        this.isAvailable = false;\n        this.registering = false;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(url)) {\n            throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(url));\n        }\n        this.url = url;\n        this.disableProviderPing = disableProviderPing;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (HttpConnection); //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: function() { return /* reexport safe */ _http__WEBPACK_IMPORTED_MODULE_0__.HttpConnection; }\n/* harmony export */ });\n/* harmony import */ var _http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/http.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_http__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLWh0dHAtY29ubmVjdGlvbi9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQztBQUNiO0FBQ3ZCLCtEQUFlQSw2Q0FBY0EsRUFBQyxDQUM5QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtaHR0cC1jb25uZWN0aW9uL2Rpc3QvZXNtL2luZGV4LmpzPzRkYTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEh0dHBDb25uZWN0aW9uIGZyb20gXCIuL2h0dHBcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2h0dHBcIjtcbmV4cG9ydCBkZWZhdWx0IEh0dHBDb25uZWN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkh0dHBDb25uZWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: function() { return /* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_provider__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXByb3ZpZGVyL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBQ1A7QUFDM0IsK0RBQWVBLGlEQUFRQSxFQUFDLENBQ3hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2VzbS9pbmRleC5qcz84YWM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm92aWRlciBmcm9tIFwiLi9wcm92aWRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcHJvdmlkZXJcIjtcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIlByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: function() { return /* binding */ JsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\nclass JsonRpcProvider extends _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.IJsonRpcProvider {\n    async connect() {\n        let connection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        await this.open(connection);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async request(request, context) {\n        return this.requestStrict((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.formatJsonRpcRequest)(request.method, request.params || [], request.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.getBigIntRpcId)().toString()), context);\n    }\n    async requestStrict(request, context) {\n        return new Promise(async (resolve, reject)=>{\n            if (!this.connection.connected) {\n                try {\n                    await this.open();\n                } catch (e) {\n                    reject(e);\n                }\n            }\n            this.events.on(\"\".concat(request.id), (response)=>{\n                if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcError)(response)) {\n                    reject(response.error);\n                } else {\n                    resolve(response.result);\n                }\n            });\n            try {\n                await this.connection.send(request, context);\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    setConnection() {\n        let connection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        return connection;\n    }\n    onPayload(payload) {\n        this.events.emit(\"payload\", payload);\n        if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcResponse)(payload)) {\n            this.events.emit(\"\".concat(payload.id), payload);\n        } else {\n            this.events.emit(\"message\", {\n                type: payload.method,\n                data: payload.params\n            });\n        }\n    }\n    onClose(event) {\n        if (event && event.code === 3000) {\n            this.events.emit(\"error\", new Error(\"WebSocket connection closed abnormally with code: \".concat(event.code, \" \").concat(event.reason ? \"(\".concat(event.reason, \")\") : \"\")));\n        }\n        this.events.emit(\"disconnect\");\n    }\n    async open() {\n        let connection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        if (this.connection === connection && this.connection.connected) return;\n        if (this.connection.connected) this.close();\n        if (typeof connection === \"string\") {\n            await this.connection.open(connection);\n            connection = this.connection;\n        }\n        this.connection = this.setConnection(connection);\n        await this.connection.open();\n        this.registerEventListeners();\n        this.events.emit(\"connect\");\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        if (this.hasRegisteredEventListeners) return;\n        this.connection.on(\"payload\", (payload)=>this.onPayload(payload));\n        this.connection.on(\"close\", (event)=>this.onClose(event));\n        this.connection.on(\"error\", (error)=>this.events.emit(\"error\", error));\n        this.connection.on(\"register_error\", (error)=>this.onClose());\n        this.hasRegisteredEventListeners = true;\n    }\n    constructor(connection){\n        super(connection);\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n        this.hasRegisteredEventListeners = false;\n        this.connection = this.setConnection(connection);\n        if (this.connection.connected) {\n            this.registerEventListeners();\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (JsonRpcProvider); //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: function() { return /* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_2__.IBaseJsonRpcProvider; },\n/* harmony export */   IEvents: function() { return /* reexport safe */ _misc__WEBPACK_IMPORTED_MODULE_1__.IEvents; },\n/* harmony export */   IJsonRpcConnection: function() { return /* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_2__.IJsonRpcConnection; },\n/* harmony export */   IJsonRpcProvider: function() { return /* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_2__.IJsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var _jsonrpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsonrpc */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js\");\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./misc */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js\");\n/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js\");\n/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validator */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js\");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ0g7QUFDSTtBQUNDLENBQzVCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2VzbS9pbmRleC5qcz8wYThmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2pzb25ycGNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL21pc2NcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Byb3ZpZGVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi92YWxpZGF0b3JcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=jsonrpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvZXNtL2pzb25ycGMuanMiLCJtYXBwaW5ncyI6IjtBQUFVLENBQ1YsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvZXNtL2pzb25ycGMuanM/NjU1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29ucnBjLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/jsonrpc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: function() { return /* binding */ IEvents; }\n/* harmony export */ });\nclass IEvents {\n} //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvZXNtL21pc2MuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BO0FBQ2IsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdHlwZXMvZGlzdC9lc20vbWlzYy5qcz81ZjE3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBJRXZlbnRzIHtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIl0sIm5hbWVzIjpbIklFdmVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: function() { return /* binding */ IBaseJsonRpcProvider; },\n/* harmony export */   IJsonRpcConnection: function() { return /* binding */ IJsonRpcConnection; },\n/* harmony export */   IJsonRpcProvider: function() { return /* binding */ IJsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var _misc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/misc.js\");\n\nclass IJsonRpcConnection extends _misc__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(opts){\n        super();\n    }\n}\nclass IBaseJsonRpcProvider extends _misc__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(){\n        super();\n    }\n}\nclass IJsonRpcProvider extends IBaseJsonRpcProvider {\n    constructor(connection){\n        super();\n    }\n} //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvZXNtL3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFDMUIsTUFBTUMsMkJBQTJCRCwwQ0FBT0E7SUFDM0NFLFlBQVlDLElBQUksQ0FBRTtRQUNkLEtBQUs7SUFDVDtBQUNKO0FBQ08sTUFBTUMsNkJBQTZCSiwwQ0FBT0E7SUFDN0NFLGFBQWM7UUFDVixLQUFLO0lBQ1Q7QUFDSjtBQUNPLE1BQU1HLHlCQUF5QkQ7SUFDbENGLFlBQVlJLFVBQVUsQ0FBRTtRQUNwQixLQUFLO0lBQ1Q7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2VzbS9wcm92aWRlci5qcz81N2FkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElFdmVudHMgfSBmcm9tIFwiLi9taXNjXCI7XG5leHBvcnQgY2xhc3MgSUpzb25ScGNDb25uZWN0aW9uIGV4dGVuZHMgSUV2ZW50cyB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJQmFzZUpzb25ScGNQcm92aWRlciBleHRlbmRzIElFdmVudHMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgSUJhc2VKc29uUnBjUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiSUV2ZW50cyIsIklKc29uUnBjQ29ubmVjdGlvbiIsImNvbnN0cnVjdG9yIiwib3B0cyIsIklCYXNlSnNvblJwY1Byb3ZpZGVyIiwiSUpzb25ScGNQcm92aWRlciIsImNvbm5lY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvZXNtL3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiO0FBQVUsQ0FDVixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdHlwZXMvZGlzdC9lc20vdmFsaWRhdG9yLmpzP2E2ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/validator.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: function() { return /* binding */ DEFAULT_ERROR; },\n/* harmony export */   INTERNAL_ERROR: function() { return /* binding */ INTERNAL_ERROR; },\n/* harmony export */   INVALID_PARAMS: function() { return /* binding */ INVALID_PARAMS; },\n/* harmony export */   INVALID_REQUEST: function() { return /* binding */ INVALID_REQUEST; },\n/* harmony export */   METHOD_NOT_FOUND: function() { return /* binding */ METHOD_NOT_FOUND; },\n/* harmony export */   PARSE_ERROR: function() { return /* binding */ PARSE_ERROR; },\n/* harmony export */   RESERVED_ERROR_CODES: function() { return /* binding */ RESERVED_ERROR_CODES; },\n/* harmony export */   SERVER_ERROR: function() { return /* binding */ SERVER_ERROR; },\n/* harmony export */   SERVER_ERROR_CODE_RANGE: function() { return /* binding */ SERVER_ERROR_CODE_RANGE; },\n/* harmony export */   STANDARD_ERROR_MAP: function() { return /* binding */ STANDARD_ERROR_MAP; }\n/* harmony export */ });\nconst PARSE_ERROR = \"PARSE_ERROR\";\nconst INVALID_REQUEST = \"INVALID_REQUEST\";\nconst METHOD_NOT_FOUND = \"METHOD_NOT_FOUND\";\nconst INVALID_PARAMS = \"INVALID_PARAMS\";\nconst INTERNAL_ERROR = \"INTERNAL_ERROR\";\nconst SERVER_ERROR = \"SERVER_ERROR\";\nconst RESERVED_ERROR_CODES = [\n    -32700,\n    -32600,\n    -32601,\n    -32602,\n    -32603\n];\nconst SERVER_ERROR_CODE_RANGE = [\n    -32000,\n    -32099\n];\nconst STANDARD_ERROR_MAP = {\n    [PARSE_ERROR]: {\n        code: -32700,\n        message: \"Parse error\"\n    },\n    [INVALID_REQUEST]: {\n        code: -32600,\n        message: \"Invalid Request\"\n    },\n    [METHOD_NOT_FOUND]: {\n        code: -32601,\n        message: \"Method not found\"\n    },\n    [INVALID_PARAMS]: {\n        code: -32602,\n        message: \"Invalid params\"\n    },\n    [INTERNAL_ERROR]: {\n        code: -32603,\n        message: \"Internal error\"\n    },\n    [SERVER_ERROR]: {\n        code: -32000,\n        message: \"Server error\"\n    }\n};\nconst DEFAULT_ERROR = SERVER_ERROR; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsY0FBYyxjQUFjO0FBQ2xDLE1BQU1DLGtCQUFrQixrQkFBa0I7QUFDMUMsTUFBTUMsbUJBQW1CLG1CQUFtQjtBQUM1QyxNQUFNQyxpQkFBaUIsaUJBQWlCO0FBQ3hDLE1BQU1DLGlCQUFpQixpQkFBaUI7QUFDeEMsTUFBTUMsZUFBZSxlQUFlO0FBQ3BDLE1BQU1DLHVCQUF1QjtJQUFDLENBQUM7SUFBTyxDQUFDO0lBQU8sQ0FBQztJQUFPLENBQUM7SUFBTyxDQUFDO0NBQU0sQ0FBQztBQUN0RSxNQUFNQywwQkFBMEI7SUFBQyxDQUFDO0lBQU8sQ0FBQztDQUFNLENBQUM7QUFDakQsTUFBTUMscUJBQXFCO0lBQzlCLENBQUNSLFlBQVksRUFBRTtRQUFFUyxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFjO0lBQ3RELENBQUNULGdCQUFnQixFQUFFO1FBQUVRLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQWtCO0lBQzlELENBQUNSLGlCQUFpQixFQUFFO1FBQUVPLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQW1CO0lBQ2hFLENBQUNQLGVBQWUsRUFBRTtRQUFFTSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFpQjtJQUM1RCxDQUFDTixlQUFlLEVBQUU7UUFBRUssTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBaUI7SUFDNUQsQ0FBQ0wsYUFBYSxFQUFFO1FBQUVJLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQWU7QUFDNUQsRUFBRTtBQUNLLE1BQU1DLGdCQUFnQk4sYUFBYSxDQUMxQyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vY29uc3RhbnRzLmpzPzljMDUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFBBUlNFX0VSUk9SID0gXCJQQVJTRV9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUkVRVUVTVCA9IFwiSU5WQUxJRF9SRVFVRVNUXCI7XG5leHBvcnQgY29uc3QgTUVUSE9EX05PVF9GT1VORCA9IFwiTUVUSE9EX05PVF9GT1VORFwiO1xuZXhwb3J0IGNvbnN0IElOVkFMSURfUEFSQU1TID0gXCJJTlZBTElEX1BBUkFNU1wiO1xuZXhwb3J0IGNvbnN0IElOVEVSTkFMX0VSUk9SID0gXCJJTlRFUk5BTF9FUlJPUlwiO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUiA9IFwiU0VSVkVSX0VSUk9SXCI7XG5leHBvcnQgY29uc3QgUkVTRVJWRURfRVJST1JfQ09ERVMgPSBbLTMyNzAwLCAtMzI2MDAsIC0zMjYwMSwgLTMyNjAyLCAtMzI2MDNdO1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFID0gWy0zMjAwMCwgLTMyMDk5XTtcbmV4cG9ydCBjb25zdCBTVEFOREFSRF9FUlJPUl9NQVAgPSB7XG4gICAgW1BBUlNFX0VSUk9SXTogeyBjb2RlOiAtMzI3MDAsIG1lc3NhZ2U6IFwiUGFyc2UgZXJyb3JcIiB9LFxuICAgIFtJTlZBTElEX1JFUVVFU1RdOiB7IGNvZGU6IC0zMjYwMCwgbWVzc2FnZTogXCJJbnZhbGlkIFJlcXVlc3RcIiB9LFxuICAgIFtNRVRIT0RfTk9UX0ZPVU5EXTogeyBjb2RlOiAtMzI2MDEsIG1lc3NhZ2U6IFwiTWV0aG9kIG5vdCBmb3VuZFwiIH0sXG4gICAgW0lOVkFMSURfUEFSQU1TXTogeyBjb2RlOiAtMzI2MDIsIG1lc3NhZ2U6IFwiSW52YWxpZCBwYXJhbXNcIiB9LFxuICAgIFtJTlRFUk5BTF9FUlJPUl06IHsgY29kZTogLTMyNjAzLCBtZXNzYWdlOiBcIkludGVybmFsIGVycm9yXCIgfSxcbiAgICBbU0VSVkVSX0VSUk9SXTogeyBjb2RlOiAtMzIwMDAsIG1lc3NhZ2U6IFwiU2VydmVyIGVycm9yXCIgfSxcbn07XG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUiA9IFNFUlZFUl9FUlJPUjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiUEFSU0VfRVJST1IiLCJJTlZBTElEX1JFUVVFU1QiLCJNRVRIT0RfTk9UX0ZPVU5EIiwiSU5WQUxJRF9QQVJBTVMiLCJJTlRFUk5BTF9FUlJPUiIsIlNFUlZFUl9FUlJPUiIsIlJFU0VSVkVEX0VSUk9SX0NPREVTIiwiU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UiLCJTVEFOREFSRF9FUlJPUl9NQVAiLCJjb2RlIiwibWVzc2FnZSIsIkRFRkFVTFRfRVJST1IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodeJs: function() { return /* binding */ isNodeJs; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/environment */ \"(app-pages-browser)/./node_modules/@walletconnect/environment/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"isNodeJs\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst isNodeJs = _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__.isNode;\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Vudi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0Q7QUFDN0MsTUFBTUMsV0FBV0QsOERBQU1BLENBQUM7QUFDWSxDQUMzQywrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZW52LmpzPzY4NGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIkB3YWxsZXRjb25uZWN0L2Vudmlyb25tZW50XCI7XG5leHBvcnQgY29uc3QgaXNOb2RlSnMgPSBpc05vZGU7XG5leHBvcnQgKiBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudi5qcy5tYXAiXSwibmFtZXMiOlsiaXNOb2RlIiwiaXNOb2RlSnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getError: function() { return /* binding */ getError; },\n/* harmony export */   getErrorByCode: function() { return /* binding */ getErrorByCode; },\n/* harmony export */   isReservedErrorCode: function() { return /* binding */ isReservedErrorCode; },\n/* harmony export */   isServerErrorCode: function() { return /* binding */ isServerErrorCode; },\n/* harmony export */   isValidErrorCode: function() { return /* binding */ isValidErrorCode; },\n/* harmony export */   parseConnectionError: function() { return /* binding */ parseConnectionError; },\n/* harmony export */   validateJsonRpcError: function() { return /* binding */ validateJsonRpcError; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\nfunction isServerErrorCode(code) {\n    return code <= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[0] && code >= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[1];\n}\nfunction isReservedErrorCode(code) {\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES.includes(code);\n}\nfunction isValidErrorCode(code) {\n    return typeof code === \"number\";\n}\nfunction getError(type) {\n    if (!Object.keys(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).includes(type)) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[type];\n}\nfunction getErrorByCode(code) {\n    const match = Object.values(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).find((e)=>e.code === code);\n    if (!match) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return match;\n}\nfunction validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing code for JSON-RPC error\"\n        };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing message for JSON-RPC error\"\n        };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: \"Invalid error code type for JSON-RPC: \".concat(response.error.code)\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR].message && response.error.message === error.message) {\n            return {\n                valid: false,\n                error: \"Invalid error code message for JSON-RPC: \".concat(response.error.code)\n            };\n        }\n    }\n    return {\n        valid: true\n    };\n}\nfunction parseConnectionError(e, url, type) {\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(\"Unavailable \".concat(type, \" RPC url at \").concat(url)) : e;\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWdIO0FBQ3pHLFNBQVNJLGtCQUFrQkMsSUFBSTtJQUNsQyxPQUFPQSxRQUFRTCwrREFBdUIsQ0FBQyxFQUFFLElBQUlLLFFBQVFMLCtEQUF1QixDQUFDLEVBQUU7QUFDbkY7QUFDTyxTQUFTTSxvQkFBb0JELElBQUk7SUFDcEMsT0FBT0osNERBQW9CQSxDQUFDTSxRQUFRLENBQUNGO0FBQ3pDO0FBQ08sU0FBU0csaUJBQWlCSCxJQUFJO0lBQ2pDLE9BQU8sT0FBT0EsU0FBUztBQUMzQjtBQUNPLFNBQVNJLFNBQVNDLElBQUk7SUFDekIsSUFBSSxDQUFDQyxPQUFPQyxJQUFJLENBQUNWLDBEQUFrQkEsRUFBRUssUUFBUSxDQUFDRyxPQUFPO1FBQ2pELE9BQU9SLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQztJQUM1QztJQUNBLE9BQU9ELDBEQUFrQixDQUFDUSxLQUFLO0FBQ25DO0FBQ08sU0FBU0csZUFBZVIsSUFBSTtJQUMvQixNQUFNUyxRQUFRSCxPQUFPSSxNQUFNLENBQUNiLDBEQUFrQkEsRUFBRWMsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFWixJQUFJLEtBQUtBO0lBQ3JFLElBQUksQ0FBQ1MsT0FBTztRQUNSLE9BQU9aLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQztJQUM1QztJQUNBLE9BQU9XO0FBQ1g7QUFDTyxTQUFTSSxxQkFBcUJDLFFBQVE7SUFDekMsSUFBSSxPQUFPQSxTQUFTQyxLQUFLLENBQUNmLElBQUksS0FBSyxhQUFhO1FBQzVDLE9BQU87WUFBRWdCLE9BQU87WUFBT0QsT0FBTztRQUFrQztJQUNwRTtJQUNBLElBQUksT0FBT0QsU0FBU0MsS0FBSyxDQUFDRSxPQUFPLEtBQUssYUFBYTtRQUMvQyxPQUFPO1lBQUVELE9BQU87WUFBT0QsT0FBTztRQUFxQztJQUN2RTtJQUNBLElBQUksQ0FBQ1osaUJBQWlCVyxTQUFTQyxLQUFLLENBQUNmLElBQUksR0FBRztRQUN4QyxPQUFPO1lBQ0hnQixPQUFPO1lBQ1BELE9BQU8seUNBQTZELE9BQXBCRCxTQUFTQyxLQUFLLENBQUNmLElBQUk7UUFDdkU7SUFDSjtJQUNBLElBQUlDLG9CQUFvQmEsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDMUMsTUFBTWUsUUFBUVAsZUFBZU0sU0FBU0MsS0FBSyxDQUFDZixJQUFJO1FBQ2hELElBQUllLE1BQU1FLE9BQU8sS0FBS3BCLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQyxDQUFDbUIsT0FBTyxJQUMzREgsU0FBU0MsS0FBSyxDQUFDRSxPQUFPLEtBQUtGLE1BQU1FLE9BQU8sRUFBRTtZQUMxQyxPQUFPO2dCQUNIRCxPQUFPO2dCQUNQRCxPQUFPLDRDQUFnRSxPQUFwQkQsU0FBU0MsS0FBSyxDQUFDZixJQUFJO1lBQzFFO1FBQ0o7SUFDSjtJQUNBLE9BQU87UUFBRWdCLE9BQU87SUFBSztBQUN6QjtBQUNPLFNBQVNFLHFCQUFxQk4sQ0FBQyxFQUFFTyxHQUFHLEVBQUVkLElBQUk7SUFDN0MsT0FBT08sRUFBRUssT0FBTyxDQUFDZixRQUFRLENBQUMsNEJBQTRCVSxFQUFFSyxPQUFPLENBQUNmLFFBQVEsQ0FBQywwQkFDbkUsSUFBSWtCLE1BQU0sZUFBa0NELE9BQW5CZCxNQUFLLGdCQUFrQixPQUFKYyxRQUM1Q1A7QUFDVixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lcnJvci5qcz81OTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFLCBSRVNFUlZFRF9FUlJPUl9DT0RFUywgU1RBTkRBUkRfRVJST1JfTUFQLCBERUZBVUxUX0VSUk9SLCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2VydmVyRXJyb3JDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA8PSBTRVJWRVJfRVJST1JfQ09ERV9SQU5HRVswXSAmJiBjb2RlID49IFNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFWzFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRFcnJvckNvZGUoY29kZSkge1xuICAgIHJldHVybiBSRVNFUlZFRF9FUlJPUl9DT0RFUy5pbmNsdWRlcyhjb2RlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRXJyb3JDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvZGUgPT09IFwibnVtYmVyXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3IodHlwZSkge1xuICAgIGlmICghT2JqZWN0LmtleXMoU1RBTkRBUkRfRVJST1JfTUFQKS5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgICByZXR1cm4gU1RBTkRBUkRfRVJST1JfTUFQW0RFRkFVTFRfRVJST1JdO1xuICAgIH1cbiAgICByZXR1cm4gU1RBTkRBUkRfRVJST1JfTUFQW3R5cGVdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yQnlDb2RlKGNvZGUpIHtcbiAgICBjb25zdCBtYXRjaCA9IE9iamVjdC52YWx1ZXMoU1RBTkRBUkRfRVJST1JfTUFQKS5maW5kKGUgPT4gZS5jb2RlID09PSBjb2RlKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBTVEFOREFSRF9FUlJPUl9NQVBbREVGQVVMVF9FUlJPUl07XG4gICAgfVxuICAgIHJldHVybiBtYXRjaDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUpzb25ScGNFcnJvcihyZXNwb25zZSkge1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZXJyb3IuY29kZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiBcIk1pc3NpbmcgY29kZSBmb3IgSlNPTi1SUEMgZXJyb3JcIiB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogXCJNaXNzaW5nIG1lc3NhZ2UgZm9yIEpTT04tUlBDIGVycm9yXCIgfTtcbiAgICB9XG4gICAgaWYgKCFpc1ZhbGlkRXJyb3JDb2RlKHJlc3BvbnNlLmVycm9yLmNvZGUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcjogYEludmFsaWQgZXJyb3IgY29kZSB0eXBlIGZvciBKU09OLVJQQzogJHtyZXNwb25zZS5lcnJvci5jb2RlfWAsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc1Jlc2VydmVkRXJyb3JDb2RlKHJlc3BvbnNlLmVycm9yLmNvZGUpKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gZ2V0RXJyb3JCeUNvZGUocmVzcG9uc2UuZXJyb3IuY29kZSk7XG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlICE9PSBTVEFOREFSRF9FUlJPUl9NQVBbREVGQVVMVF9FUlJPUl0ubWVzc2FnZSAmJlxuICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3IubWVzc2FnZSA9PT0gZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGBJbnZhbGlkIGVycm9yIGNvZGUgbWVzc2FnZSBmb3IgSlNPTi1SUEM6ICR7cmVzcG9uc2UuZXJyb3IuY29kZX1gLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29ubmVjdGlvbkVycm9yKGUsIHVybCwgdHlwZSkge1xuICAgIHJldHVybiBlLm1lc3NhZ2UuaW5jbHVkZXMoXCJnZXRhZGRyaW5mbyBFTk9URk9VTkRcIikgfHwgZS5tZXNzYWdlLmluY2x1ZGVzKFwiY29ubmVjdCBFQ09OTlJFRlVTRURcIilcbiAgICAgICAgPyBuZXcgRXJyb3IoYFVuYXZhaWxhYmxlICR7dHlwZX0gUlBDIHVybCBhdCAke3VybH1gKVxuICAgICAgICA6IGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOlsiU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UiLCJSRVNFUlZFRF9FUlJPUl9DT0RFUyIsIlNUQU5EQVJEX0VSUk9SX01BUCIsIkRFRkFVTFRfRVJST1IiLCJpc1NlcnZlckVycm9yQ29kZSIsImNvZGUiLCJpc1Jlc2VydmVkRXJyb3JDb2RlIiwiaW5jbHVkZXMiLCJpc1ZhbGlkRXJyb3JDb2RlIiwiZ2V0RXJyb3IiLCJ0eXBlIiwiT2JqZWN0Iiwia2V5cyIsImdldEVycm9yQnlDb2RlIiwibWF0Y2giLCJ2YWx1ZXMiLCJmaW5kIiwiZSIsInZhbGlkYXRlSnNvblJwY0Vycm9yIiwicmVzcG9uc2UiLCJlcnJvciIsInZhbGlkIiwibWVzc2FnZSIsInBhcnNlQ29ubmVjdGlvbkVycm9yIiwidXJsIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatErrorMessage: function() { return /* binding */ formatErrorMessage; },\n/* harmony export */   formatJsonRpcError: function() { return /* binding */ formatJsonRpcError; },\n/* harmony export */   formatJsonRpcRequest: function() { return /* binding */ formatJsonRpcRequest; },\n/* harmony export */   formatJsonRpcResult: function() { return /* binding */ formatJsonRpcResult; },\n/* harmony export */   getBigIntRpcId: function() { return /* binding */ getBigIntRpcId; },\n/* harmony export */   payloadId: function() { return /* binding */ payloadId; }\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\n\nfunction payloadId() {\n    let entropy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3;\n    const date = Date.now() * Math.pow(10, entropy);\n    const extra = Math.floor(Math.random() * Math.pow(10, entropy));\n    return date + extra;\n}\nfunction getBigIntRpcId() {\n    let entropy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6;\n    return BigInt(payloadId(entropy));\n}\nfunction formatJsonRpcRequest(method, params, id) {\n    return {\n        id: id || payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params\n    };\n}\nfunction formatJsonRpcResult(id, result) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        result\n    };\n}\nfunction formatJsonRpcError(id, error, data) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        error: formatErrorMessage(error, data)\n    };\n}\nfunction formatErrorMessage(error, data) {\n    if (typeof error === \"undefined\") {\n        return (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_ERROR);\n    }\n    if (typeof error === \"string\") {\n        error = Object.assign(Object.assign({}, (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.SERVER_ERROR)), {\n            message: error\n        });\n    }\n    if (typeof data !== \"undefined\") {\n        error.data = data;\n    }\n    if ((0,_error__WEBPACK_IMPORTED_MODULE_0__.isReservedErrorCode)(error.code)) {\n        error = (0,_error__WEBPACK_IMPORTED_MODULE_0__.getErrorByCode)(error.code);\n    }\n    return error;\n} //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Zvcm1hdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF3RTtBQUNiO0FBQ3BELFNBQVNLO1FBQVVDLFVBQUFBLGlFQUFVO0lBQ2hDLE1BQU1DLE9BQU9DLEtBQUtDLEdBQUcsS0FBS0MsS0FBS0MsR0FBRyxDQUFDLElBQUlMO0lBQ3ZDLE1BQU1NLFFBQVFGLEtBQUtHLEtBQUssQ0FBQ0gsS0FBS0ksTUFBTSxLQUFLSixLQUFLQyxHQUFHLENBQUMsSUFBSUw7SUFDdEQsT0FBT0MsT0FBT0s7QUFDbEI7QUFDTyxTQUFTRztRQUFlVCxVQUFBQSxpRUFBVTtJQUNyQyxPQUFPVSxPQUFPWCxVQUFVQztBQUM1QjtBQUNPLFNBQVNXLHFCQUFxQkMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLEVBQUU7SUFDbkQsT0FBTztRQUNIQSxJQUFJQSxNQUFNZjtRQUNWZ0IsU0FBUztRQUNUSDtRQUNBQztJQUNKO0FBQ0o7QUFDTyxTQUFTRyxvQkFBb0JGLEVBQUUsRUFBRUcsTUFBTTtJQUMxQyxPQUFPO1FBQ0hIO1FBQ0FDLFNBQVM7UUFDVEU7SUFDSjtBQUNKO0FBQ08sU0FBU0MsbUJBQW1CSixFQUFFLEVBQUVLLEtBQUssRUFBRUMsSUFBSTtJQUM5QyxPQUFPO1FBQ0hOO1FBQ0FDLFNBQVM7UUFDVEksT0FBT0UsbUJBQW1CRixPQUFPQztJQUNyQztBQUNKO0FBQ08sU0FBU0MsbUJBQW1CRixLQUFLLEVBQUVDLElBQUk7SUFDMUMsSUFBSSxPQUFPRCxVQUFVLGFBQWE7UUFDOUIsT0FBT3pCLGdEQUFRQSxDQUFDRyxzREFBY0E7SUFDbEM7SUFDQSxJQUFJLE9BQU9zQixVQUFVLFVBQVU7UUFDM0JBLFFBQVFHLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBRzdCLGdEQUFRQSxDQUFDSSxvREFBWUEsSUFBSTtZQUFFMEIsU0FBU0w7UUFBTTtJQUN0RjtJQUNBLElBQUksT0FBT0MsU0FBUyxhQUFhO1FBQzdCRCxNQUFNQyxJQUFJLEdBQUdBO0lBQ2pCO0lBQ0EsSUFBSXhCLDJEQUFtQkEsQ0FBQ3VCLE1BQU1NLElBQUksR0FBRztRQUNqQ04sUUFBUXhCLHNEQUFjQSxDQUFDd0IsTUFBTU0sSUFBSTtJQUNyQztJQUNBLE9BQU9OO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZm9ybWF0LmpzPzI1MDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RXJyb3IsIGdldEVycm9yQnlDb2RlLCBpc1Jlc2VydmVkRXJyb3JDb2RlIH0gZnJvbSBcIi4vZXJyb3JcIjtcbmltcG9ydCB7IElOVEVSTkFMX0VSUk9SLCBTRVJWRVJfRVJST1IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXlsb2FkSWQoZW50cm9weSA9IDMpIHtcbiAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKSAqIE1hdGgucG93KDEwLCBlbnRyb3B5KTtcbiAgICBjb25zdCBleHRyYSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDEwLCBlbnRyb3B5KSk7XG4gICAgcmV0dXJuIGRhdGUgKyBleHRyYTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRCaWdJbnRScGNJZChlbnRyb3B5ID0gNikge1xuICAgIHJldHVybiBCaWdJbnQocGF5bG9hZElkKGVudHJvcHkpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjUmVxdWVzdChtZXRob2QsIHBhcmFtcywgaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWQgfHwgcGF5bG9hZElkKCksXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY1Jlc3VsdChpZCwgcmVzdWx0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIHJlc3VsdCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNFcnJvcihpZCwgZXJyb3IsIGRhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAganNvbnJwYzogXCIyLjBcIixcbiAgICAgICAgZXJyb3I6IGZvcm1hdEVycm9yTWVzc2FnZShlcnJvciwgZGF0YSksXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IsIGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnZXRFcnJvcihJTlRFUk5BTF9FUlJPUik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGdldEVycm9yKFNFUlZFUl9FUlJPUikpLCB7IG1lc3NhZ2U6IGVycm9yIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZXJyb3IuZGF0YSA9IGRhdGE7XG4gICAgfVxuICAgIGlmIChpc1Jlc2VydmVkRXJyb3JDb2RlKGVycm9yLmNvZGUpKSB7XG4gICAgICAgIGVycm9yID0gZ2V0RXJyb3JCeUNvZGUoZXJyb3IuY29kZSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0RXJyb3IiLCJnZXRFcnJvckJ5Q29kZSIsImlzUmVzZXJ2ZWRFcnJvckNvZGUiLCJJTlRFUk5BTF9FUlJPUiIsIlNFUlZFUl9FUlJPUiIsInBheWxvYWRJZCIsImVudHJvcHkiLCJkYXRlIiwiRGF0ZSIsIm5vdyIsIk1hdGgiLCJwb3ciLCJleHRyYSIsImZsb29yIiwicmFuZG9tIiwiZ2V0QmlnSW50UnBjSWQiLCJCaWdJbnQiLCJmb3JtYXRKc29uUnBjUmVxdWVzdCIsIm1ldGhvZCIsInBhcmFtcyIsImlkIiwianNvbnJwYyIsImZvcm1hdEpzb25ScGNSZXN1bHQiLCJyZXN1bHQiLCJmb3JtYXRKc29uUnBjRXJyb3IiLCJlcnJvciIsImRhdGEiLCJmb3JtYXRFcnJvck1lc3NhZ2UiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXNzYWdlIiwiY29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR; },\n/* harmony export */   IBaseJsonRpcProvider: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IBaseJsonRpcProvider; },\n/* harmony export */   IEvents: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IEvents; },\n/* harmony export */   IJsonRpcConnection: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcConnection; },\n/* harmony export */   IJsonRpcProvider: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcProvider; },\n/* harmony export */   INTERNAL_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_ERROR; },\n/* harmony export */   INVALID_PARAMS: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_PARAMS; },\n/* harmony export */   INVALID_REQUEST: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_REQUEST; },\n/* harmony export */   METHOD_NOT_FOUND: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.METHOD_NOT_FOUND; },\n/* harmony export */   PARSE_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.PARSE_ERROR; },\n/* harmony export */   RESERVED_ERROR_CODES: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES; },\n/* harmony export */   SERVER_ERROR: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR; },\n/* harmony export */   SERVER_ERROR_CODE_RANGE: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE; },\n/* harmony export */   STANDARD_ERROR_MAP: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP; },\n/* harmony export */   formatErrorMessage: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatErrorMessage; },\n/* harmony export */   formatJsonRpcError: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError; },\n/* harmony export */   formatJsonRpcRequest: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest; },\n/* harmony export */   formatJsonRpcResult: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult; },\n/* harmony export */   getBigIntRpcId: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId; },\n/* harmony export */   getError: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getError; },\n/* harmony export */   getErrorByCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getErrorByCode; },\n/* harmony export */   isHttpUrl: function() { return /* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isHttpUrl; },\n/* harmony export */   isJsonRpcError: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcError; },\n/* harmony export */   isJsonRpcPayload: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcPayload; },\n/* harmony export */   isJsonRpcRequest: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcRequest; },\n/* harmony export */   isJsonRpcResponse: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResponse; },\n/* harmony export */   isJsonRpcResult: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResult; },\n/* harmony export */   isJsonRpcValidationInvalid: function() { return /* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcValidationInvalid; },\n/* harmony export */   isLocalhostUrl: function() { return /* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isLocalhostUrl; },\n/* harmony export */   isReservedErrorCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isReservedErrorCode; },\n/* harmony export */   isServerErrorCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isServerErrorCode; },\n/* harmony export */   isValidDefaultRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidDefaultRoute; },\n/* harmony export */   isValidErrorCode: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isValidErrorCode; },\n/* harmony export */   isValidLeadingWildcardRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidLeadingWildcardRoute; },\n/* harmony export */   isValidRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidRoute; },\n/* harmony export */   isValidTrailingWildcardRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidTrailingWildcardRoute; },\n/* harmony export */   isValidWildcardRoute: function() { return /* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidWildcardRoute; },\n/* harmony export */   isWsUrl: function() { return /* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isWsUrl; },\n/* harmony export */   parseConnectionError: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.parseConnectionError; },\n/* harmony export */   payloadId: function() { return /* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.payloadId; },\n/* harmony export */   validateJsonRpcError: function() { return /* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.validateJsonRpcError; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./env */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _env__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"DEFAULT_ERROR\",\"INTERNAL_ERROR\",\"INVALID_PARAMS\",\"INVALID_REQUEST\",\"METHOD_NOT_FOUND\",\"PARSE_ERROR\",\"RESERVED_ERROR_CODES\",\"SERVER_ERROR\",\"SERVER_ERROR_CODE_RANGE\",\"STANDARD_ERROR_MAP\",\"getError\",\"getErrorByCode\",\"isReservedErrorCode\",\"isServerErrorCode\",\"isValidErrorCode\",\"parseConnectionError\",\"validateJsonRpcError\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _env__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./format */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\");\n/* harmony import */ var _routing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routing */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\");\n/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\");\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validators */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNEI7QUFDSjtBQUNGO0FBQ0c7QUFDQztBQUNGO0FBQ0Y7QUFDTyxDQUM3QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vaW5kZXguanM/NjgwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9lbnZcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Zvcm1hdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcm91dGluZ1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VybFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdmFsaWRhdG9yc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidDefaultRoute: function() { return /* binding */ isValidDefaultRoute; },\n/* harmony export */   isValidLeadingWildcardRoute: function() { return /* binding */ isValidLeadingWildcardRoute; },\n/* harmony export */   isValidRoute: function() { return /* binding */ isValidRoute; },\n/* harmony export */   isValidTrailingWildcardRoute: function() { return /* binding */ isValidTrailingWildcardRoute; },\n/* harmony export */   isValidWildcardRoute: function() { return /* binding */ isValidWildcardRoute; }\n/* harmony export */ });\nfunction isValidRoute(route) {\n    if (route.includes(\"*\")) {\n        return isValidWildcardRoute(route);\n    }\n    if (/\\W/g.test(route)) {\n        return false;\n    }\n    return true;\n}\nfunction isValidDefaultRoute(route) {\n    return route === \"*\";\n}\nfunction isValidWildcardRoute(route) {\n    if (isValidDefaultRoute(route)) {\n        return true;\n    }\n    if (!route.includes(\"*\")) {\n        return false;\n    }\n    if (route.split(\"*\").length !== 2) {\n        return false;\n    }\n    if (route.split(\"*\").filter((x)=>x.trim() === \"\").length !== 1) {\n        return false;\n    }\n    return true;\n}\nfunction isValidLeadingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[0].trim();\n}\nfunction isValidTrailingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[1].trim();\n} //# sourceMappingURL=routing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3JvdXRpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxTQUFTQSxhQUFhQyxLQUFLO0lBQzlCLElBQUlBLE1BQU1DLFFBQVEsQ0FBQyxNQUFNO1FBQ3JCLE9BQU9DLHFCQUFxQkY7SUFDaEM7SUFDQSxJQUFJLE1BQU1HLElBQUksQ0FBQ0gsUUFBUTtRQUNuQixPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTSSxvQkFBb0JKLEtBQUs7SUFDckMsT0FBT0EsVUFBVTtBQUNyQjtBQUNPLFNBQVNFLHFCQUFxQkYsS0FBSztJQUN0QyxJQUFJSSxvQkFBb0JKLFFBQVE7UUFDNUIsT0FBTztJQUNYO0lBQ0EsSUFBSSxDQUFDQSxNQUFNQyxRQUFRLENBQUMsTUFBTTtRQUN0QixPQUFPO0lBQ1g7SUFDQSxJQUFJRCxNQUFNSyxLQUFLLENBQUMsS0FBS0MsTUFBTSxLQUFLLEdBQUc7UUFDL0IsT0FBTztJQUNYO0lBQ0EsSUFBSU4sTUFBTUssS0FBSyxDQUFDLEtBQUtFLE1BQU0sQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUMsSUFBSSxPQUFPLElBQUlILE1BQU0sS0FBSyxHQUFHO1FBQzVELE9BQU87SUFDWDtJQUNBLE9BQU87QUFDWDtBQUNPLFNBQVNJLDRCQUE0QlYsS0FBSztJQUM3QyxPQUFPLENBQUNJLG9CQUFvQkosVUFBVUUscUJBQXFCRixVQUFVLENBQUNBLE1BQU1LLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDSSxJQUFJO0FBQ2xHO0FBQ08sU0FBU0UsNkJBQTZCWCxLQUFLO0lBQzlDLE9BQU8sQ0FBQ0ksb0JBQW9CSixVQUFVRSxxQkFBcUJGLFVBQVUsQ0FBQ0EsTUFBTUssS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUNJLElBQUk7QUFDbEcsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vcm91dGluZy5qcz85NjBkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUm91dGUocm91dGUpIHtcbiAgICBpZiAocm91dGUuaW5jbHVkZXMoXCIqXCIpKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSk7XG4gICAgfVxuICAgIGlmICgvXFxXL2cudGVzdChyb3V0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlID09PSBcIipcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIGlmIChpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFyb3V0ZS5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocm91dGUuc3BsaXQoXCIqXCIpLmxlbmd0aCAhPT0gMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5zcGxpdChcIipcIikuZmlsdGVyKHggPT4geC50cmltKCkgPT09IFwiXCIpLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIHJldHVybiAhaXNWYWxpZERlZmF1bHRSb3V0ZShyb3V0ZSkgJiYgaXNWYWxpZFdpbGRjYXJkUm91dGUocm91dGUpICYmICFyb3V0ZS5zcGxpdChcIipcIilbMF0udHJpbSgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUocm91dGUpIHtcbiAgICByZXR1cm4gIWlzVmFsaWREZWZhdWx0Um91dGUocm91dGUpICYmIGlzVmFsaWRXaWxkY2FyZFJvdXRlKHJvdXRlKSAmJiAhcm91dGUuc3BsaXQoXCIqXCIpWzFdLnRyaW0oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRpbmcuanMubWFwIl0sIm5hbWVzIjpbImlzVmFsaWRSb3V0ZSIsInJvdXRlIiwiaW5jbHVkZXMiLCJpc1ZhbGlkV2lsZGNhcmRSb3V0ZSIsInRlc3QiLCJpc1ZhbGlkRGVmYXVsdFJvdXRlIiwic3BsaXQiLCJsZW5ndGgiLCJmaWx0ZXIiLCJ4IiwidHJpbSIsImlzVmFsaWRMZWFkaW5nV2lsZGNhcmRSb3V0ZSIsImlzVmFsaWRUcmFpbGluZ1dpbGRjYXJkUm91dGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IBaseJsonRpcProvider; },\n/* harmony export */   IEvents: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IEvents; },\n/* harmony export */   IJsonRpcConnection: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcConnection; },\n/* harmony export */   IJsonRpcProvider: function() { return /* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/jsonrpc-types */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-types/dist/esm/index.js\");\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZDLENBQzdDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS90eXBlcy5qcz8yNjI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHttpUrl: function() { return /* binding */ isHttpUrl; },\n/* harmony export */   isLocalhostUrl: function() { return /* binding */ isLocalhostUrl; },\n/* harmony export */   isWsUrl: function() { return /* binding */ isWsUrl; }\n/* harmony export */ });\nconst HTTP_REGEX = \"^https?:\";\nconst WS_REGEX = \"^wss?:\";\nfunction getUrlProtocol(url) {\n    const matches = url.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!matches || !matches.length) return;\n    return matches[0];\n}\nfunction matchRegexProtocol(url, regex) {\n    const protocol = getUrlProtocol(url);\n    if (typeof protocol === \"undefined\") return false;\n    return new RegExp(regex).test(protocol);\n}\nfunction isHttpUrl(url) {\n    return matchRegexProtocol(url, HTTP_REGEX);\n}\nfunction isWsUrl(url) {\n    return matchRegexProtocol(url, WS_REGEX);\n}\nfunction isLocalhostUrl(url) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(url);\n} //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3VybC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxhQUFhO0FBQ25CLE1BQU1DLFdBQVc7QUFDakIsU0FBU0MsZUFBZUMsR0FBRztJQUN2QixNQUFNQyxVQUFVRCxJQUFJRSxLQUFLLENBQUMsSUFBSUMsT0FBTyxTQUFTO0lBQzlDLElBQUksQ0FBQ0YsV0FBVyxDQUFDQSxRQUFRRyxNQUFNLEVBQzNCO0lBQ0osT0FBT0gsT0FBTyxDQUFDLEVBQUU7QUFDckI7QUFDQSxTQUFTSSxtQkFBbUJMLEdBQUcsRUFBRU0sS0FBSztJQUNsQyxNQUFNQyxXQUFXUixlQUFlQztJQUNoQyxJQUFJLE9BQU9PLGFBQWEsYUFDcEIsT0FBTztJQUNYLE9BQU8sSUFBSUosT0FBT0csT0FBT0UsSUFBSSxDQUFDRDtBQUNsQztBQUNPLFNBQVNFLFVBQVVULEdBQUc7SUFDekIsT0FBT0ssbUJBQW1CTCxLQUFLSDtBQUNuQztBQUNPLFNBQVNhLFFBQVFWLEdBQUc7SUFDdkIsT0FBT0ssbUJBQW1CTCxLQUFLRjtBQUNuQztBQUNPLFNBQVNhLGVBQWVYLEdBQUc7SUFDOUIsT0FBTyxJQUFJRyxPQUFPLDhCQUE4QkssSUFBSSxDQUFDUjtBQUN6RCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS91cmwuanM/ODMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBIVFRQX1JFR0VYID0gXCJeaHR0cHM/OlwiO1xuY29uc3QgV1NfUkVHRVggPSBcIl53c3M/OlwiO1xuZnVuY3Rpb24gZ2V0VXJsUHJvdG9jb2wodXJsKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHVybC5tYXRjaChuZXcgUmVnRXhwKC9eXFx3KzovLCBcImdpXCIpKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW1hdGNoZXMubGVuZ3RoKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBtYXRjaFJlZ2V4UHJvdG9jb2wodXJsLCByZWdleCkge1xuICAgIGNvbnN0IHByb3RvY29sID0gZ2V0VXJsUHJvdG9jb2wodXJsKTtcbiAgICBpZiAodHlwZW9mIHByb3RvY29sID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgpLnRlc3QocHJvdG9jb2wpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSHR0cFVybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgSFRUUF9SRUdFWCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNXc1VybCh1cmwpIHtcbiAgICByZXR1cm4gbWF0Y2hSZWdleFByb3RvY29sKHVybCwgV1NfUkVHRVgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxob3N0VXJsKHVybCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwid3NzPzovL2xvY2FsaG9zdCg6ZHsyLDV9KT9cIikudGVzdCh1cmwpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcCJdLCJuYW1lcyI6WyJIVFRQX1JFR0VYIiwiV1NfUkVHRVgiLCJnZXRVcmxQcm90b2NvbCIsInVybCIsIm1hdGNoZXMiLCJtYXRjaCIsIlJlZ0V4cCIsImxlbmd0aCIsIm1hdGNoUmVnZXhQcm90b2NvbCIsInJlZ2V4IiwicHJvdG9jb2wiLCJ0ZXN0IiwiaXNIdHRwVXJsIiwiaXNXc1VybCIsImlzTG9jYWxob3N0VXJsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJsonRpcError: function() { return /* binding */ isJsonRpcError; },\n/* harmony export */   isJsonRpcPayload: function() { return /* binding */ isJsonRpcPayload; },\n/* harmony export */   isJsonRpcRequest: function() { return /* binding */ isJsonRpcRequest; },\n/* harmony export */   isJsonRpcResponse: function() { return /* binding */ isJsonRpcResponse; },\n/* harmony export */   isJsonRpcResult: function() { return /* binding */ isJsonRpcResult; },\n/* harmony export */   isJsonRpcValidationInvalid: function() { return /* binding */ isJsonRpcValidationInvalid; }\n/* harmony export */ });\nfunction isJsonRpcPayload(payload) {\n    return typeof payload === \"object\" && \"id\" in payload && \"jsonrpc\" in payload && payload.jsonrpc === \"2.0\";\n}\nfunction isJsonRpcRequest(payload) {\n    return isJsonRpcPayload(payload) && \"method\" in payload;\n}\nfunction isJsonRpcResponse(payload) {\n    return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));\n}\nfunction isJsonRpcResult(payload) {\n    return \"result\" in payload;\n}\nfunction isJsonRpcError(payload) {\n    return \"error\" in payload;\n}\nfunction isJsonRpcValidationInvalid(validation) {\n    return \"error\" in validation && validation.valid === false;\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sU0FBU0EsaUJBQWlCQyxPQUFPO0lBQ3BDLE9BQVEsT0FBT0EsWUFBWSxZQUN2QixRQUFRQSxXQUNSLGFBQWFBLFdBQ2JBLFFBQVFDLE9BQU8sS0FBSztBQUM1QjtBQUNPLFNBQVNDLGlCQUFpQkYsT0FBTztJQUNwQyxPQUFPRCxpQkFBaUJDLFlBQVksWUFBWUE7QUFDcEQ7QUFDTyxTQUFTRyxrQkFBa0JILE9BQU87SUFDckMsT0FBT0QsaUJBQWlCQyxZQUFhSSxDQUFBQSxnQkFBZ0JKLFlBQVlLLGVBQWVMLFFBQU87QUFDM0Y7QUFDTyxTQUFTSSxnQkFBZ0JKLE9BQU87SUFDbkMsT0FBTyxZQUFZQTtBQUN2QjtBQUNPLFNBQVNLLGVBQWVMLE9BQU87SUFDbEMsT0FBTyxXQUFXQTtBQUN0QjtBQUNPLFNBQVNNLDJCQUEyQkMsVUFBVTtJQUNqRCxPQUFPLFdBQVdBLGNBQWNBLFdBQVdDLEtBQUssS0FBSztBQUN6RCxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS92YWxpZGF0b3JzLmpzPzQ3NGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkge1xuICAgIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJpZFwiIGluIHBheWxvYWQgJiZcbiAgICAgICAgXCJqc29ucnBjXCIgaW4gcGF5bG9hZCAmJlxuICAgICAgICBwYXlsb2FkLmpzb25ycGMgPT09IFwiMi4wXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1JlcXVlc3QocGF5bG9hZCkge1xuICAgIHJldHVybiBpc0pzb25ScGNQYXlsb2FkKHBheWxvYWQpICYmIFwibWV0aG9kXCIgaW4gcGF5bG9hZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXNwb25zZShwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkgJiYgKGlzSnNvblJwY1Jlc3VsdChwYXlsb2FkKSB8fCBpc0pzb25ScGNFcnJvcihwYXlsb2FkKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVzdWx0KHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJyZXN1bHRcIiBpbiBwYXlsb2FkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY0Vycm9yKHBheWxvYWQpIHtcbiAgICByZXR1cm4gXCJlcnJvclwiIGluIHBheWxvYWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQodmFsaWRhdGlvbikge1xuICAgIHJldHVybiBcImVycm9yXCIgaW4gdmFsaWRhdGlvbiAmJiB2YWxpZGF0aW9uLnZhbGlkID09PSBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRvcnMuanMubWFwIl0sIm5hbWVzIjpbImlzSnNvblJwY1BheWxvYWQiLCJwYXlsb2FkIiwianNvbnJwYyIsImlzSnNvblJwY1JlcXVlc3QiLCJpc0pzb25ScGNSZXNwb25zZSIsImlzSnNvblJwY1Jlc3VsdCIsImlzSnNvblJwY0Vycm9yIiwiaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQiLCJ2YWxpZGF0aW9uIiwidmFsaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WsConnection: function() { return /* binding */ f; },\n/* harmony export */   \"default\": function() { return /* binding */ f; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\nconst w = ()=>typeof WebSocket < \"u\" ? WebSocket : typeof __webpack_require__.g < \"u\" && typeof __webpack_require__.g.WebSocket < \"u\" ? __webpack_require__.g.WebSocket :  true && typeof window.WebSocket < \"u\" ? window.WebSocket : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : __webpack_require__(/*! ws */ \"(app-pages-browser)/./node_modules/ws/browser.js\"), b = ()=>typeof WebSocket < \"u\" || typeof __webpack_require__.g < \"u\" && typeof __webpack_require__.g.WebSocket < \"u\" ||  true && typeof window.WebSocket < \"u\" || typeof self < \"u\" && typeof self.WebSocket < \"u\", a = (c)=>c.split(\"?\")[0], h = 10, S = w();\nclass f {\n    get connected() {\n        return typeof this.socket < \"u\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async open() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        await this.register(e);\n    }\n    async close() {\n        return new Promise((e, t)=>{\n            if (typeof this.socket > \"u\") {\n                t(new Error(\"Connection already closed\"));\n                return;\n            }\n            this.socket.onclose = (n)=>{\n                this.onClose(n), e();\n            }, this.socket.close();\n        });\n    }\n    async send(e) {\n        typeof this.socket > \"u\" && (this.socket = await this.register());\n        try {\n            this.socket.send((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(e));\n        } catch (t) {\n            this.onError(e.id, t);\n        }\n    }\n    register() {\n        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(e));\n        if (this.registering) {\n            const t = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((n, o)=>{\n                this.events.once(\"register_error\", (s)=>{\n                    this.resetMaxListeners(), o(s);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.socket > \"u\") return o(new Error(\"WebSocket connection is missing or invalid\"));\n                    n(this.socket);\n                });\n            });\n        }\n        return this.url = e, this.registering = !0, new Promise((t, n)=>{\n            const o = new URLSearchParams(e).get(\"origin\"), s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isReactNative)() ? {\n                headers: {\n                    origin: o\n                }\n            } : {\n                rejectUnauthorized: !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isLocalhostUrl)(e)\n            }, i = new S(e, [], s);\n            b() ? i.onerror = (r)=>{\n                const l = r;\n                n(this.emitError(l.error));\n            } : i.on(\"error\", (r)=>{\n                n(this.emitError(r));\n            }), i.onopen = ()=>{\n                this.onOpen(i), t(i);\n            };\n        });\n    }\n    onOpen(e) {\n        e.onmessage = (t)=>this.onPayload(t), e.onclose = (t)=>this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose(e) {\n        this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n    }\n    onPayload(e) {\n        if (typeof e.data > \"u\") return;\n        const t = typeof e.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(e.data) : e.data;\n        this.events.emit(\"payload\", t);\n    }\n    onError(e, t) {\n        const n = this.parseError(t), o = n.message || n.toString(), s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(e, o);\n        this.events.emit(\"payload\", s);\n    }\n    parseError(e) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.url;\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.parseConnectionError)(e, a(t), \"WS\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > h && this.events.setMaxListeners(h);\n    }\n    emitError(e) {\n        const t = this.parseError(new Error((e === null || e === void 0 ? void 0 : e.message) || \"WebSocket connection failed for host: \".concat(a(this.url))));\n        return this.events.emit(\"register_error\", t), t;\n    }\n    constructor(e){\n        if (this.url = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(\"Provided URL is not compatible with WebSocket connection: \".concat(e));\n        this.url = e;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyValueStorage: function() { return /* binding */ h; },\n/* harmony export */   \"default\": function() { return /* binding */ h; }\n/* harmony export */ });\n/* harmony import */ var unstorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unstorage */ \"(app-pages-browser)/./node_modules/unstorage/dist/index.mjs\");\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb-keyval */ \"(app-pages-browser)/./node_modules/idb-keyval/dist/index.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nfunction C(i) {\n    return i;\n}\n_c = C;\nconst x = \"idb-keyval\";\nvar z = function() {\n    let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const t = i.base && i.base.length > 0 ? \"\".concat(i.base, \":\") : \"\", e = (s)=>t + s;\n    let n;\n    return i.dbName && i.storeName && (n = (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.createStore)(i.dbName, i.storeName)), {\n        name: x,\n        options: i,\n        async hasItem (s) {\n            return !(typeof await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) > \"u\");\n        },\n        async getItem (s) {\n            var _ref;\n            return (_ref = await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n)) !== null && _ref !== void 0 ? _ref : null;\n        },\n        setItem (s, a) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.set)(e(s), a, n);\n        },\n        removeItem (s) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.del)(e(s), n);\n        },\n        getKeys () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.keys)(n);\n        },\n        clear () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.clear)(n);\n        }\n    };\n};\nconst D = \"WALLET_CONNECT_V2_INDEXED_DB\", E = \"keyvaluestorage\";\nclass _ {\n    async getKeys() {\n        return this.indexedDb.getKeys();\n    }\n    async getEntries() {\n        return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t)=>[\n                t.key,\n                t.value\n            ]);\n    }\n    async getItem(t) {\n        const e = await this.indexedDb.getItem(t);\n        if (e !== null) return e;\n    }\n    async setItem(t, e) {\n        await this.indexedDb.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        await this.indexedDb.removeItem(t);\n    }\n    constructor(){\n        this.indexedDb = (0,unstorage__WEBPACK_IMPORTED_MODULE_2__.createStorage)({\n            driver: z({\n                dbName: D,\n                storeName: E\n            })\n        });\n    }\n}\nvar l = typeof globalThis < \"u\" ? globalThis :  true ? window : 0, c = {\n    exports: {}\n};\n(function() {\n    let i;\n    function t() {}\n    i = t, i.prototype.getItem = function(e) {\n        return this.hasOwnProperty(e) ? String(this[e]) : null;\n    }, i.prototype.setItem = function(e, n) {\n        this[e] = String(n);\n    }, i.prototype.removeItem = function(e) {\n        delete this[e];\n    }, i.prototype.clear = function() {\n        const e = this;\n        Object.keys(e).forEach(function(n) {\n            e[n] = void 0, delete e[n];\n        });\n    }, i.prototype.key = function(e) {\n        return e = e || 0, Object.keys(this)[e];\n    }, i.prototype.__defineGetter__(\"length\", function() {\n        return Object.keys(this).length;\n    }), typeof l < \"u\" && l.localStorage ? c.exports = l.localStorage :  true && window.localStorage ? c.exports = window.localStorage : c.exports = new t;\n})();\nfunction k(i) {\n    var t;\n    return [\n        i[0],\n        (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)((t = i[1]) != null ? t : \"\")\n    ];\n}\nclass K {\n    async getKeys() {\n        return Object.keys(this.localStorage);\n    }\n    async getEntries() {\n        return Object.entries(this.localStorage).map(k);\n    }\n    async getItem(t) {\n        const e = this.localStorage.getItem(t);\n        if (e !== null) return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)(e);\n    }\n    async setItem(t, e) {\n        this.localStorage.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        this.localStorage.removeItem(t);\n    }\n    constructor(){\n        this.localStorage = c.exports;\n    }\n}\nconst N = \"wc_storage_version\", y = 1, O = async (i, t, e)=>{\n    const n = N, s = await t.getItem(n);\n    if (s && s >= y) {\n        e(t);\n        return;\n    }\n    const a = await i.getKeys();\n    if (!a.length) {\n        e(t);\n        return;\n    }\n    const m = [];\n    for(; a.length;){\n        const r = a.shift();\n        if (!r) continue;\n        const o = r.toLowerCase();\n        if (o.includes(\"wc@\") || o.includes(\"walletconnect\") || o.includes(\"wc_\") || o.includes(\"wallet_connect\")) {\n            const f = await i.getItem(r);\n            await t.setItem(r, f), m.push(r);\n        }\n    }\n    await t.setItem(n, y), e(t), j(i, m);\n}, j = async (i, t)=>{\n    t.length && t.forEach(async (e)=>{\n        await i.removeItem(e);\n    });\n};\nclass h {\n    async getKeys() {\n        return await this.initialize(), this.storage.getKeys();\n    }\n    async getEntries() {\n        return await this.initialize(), this.storage.getEntries();\n    }\n    async getItem(t) {\n        return await this.initialize(), this.storage.getItem(t);\n    }\n    async setItem(t, e) {\n        return await this.initialize(), this.storage.setItem(t, e);\n    }\n    async removeItem(t) {\n        return await this.initialize(), this.storage.removeItem(t);\n    }\n    async initialize() {\n        this.initialized || await new Promise((t)=>{\n            const e = setInterval(()=>{\n                this.initialized && (clearInterval(e), t());\n            }, 20);\n        });\n    }\n    constructor(){\n        this.initialized = !1, this.setInitialized = (e)=>{\n            this.storage = e, this.initialized = !0;\n        };\n        const t = new K;\n        this.storage = t;\n        try {\n            const e = new _;\n            O(t, e, this.setInitialized);\n        } catch (e) {\n            this.initialized = !0;\n        }\n    }\n}\n //# sourceMappingURL=index.es.js.map\nvar _c;\n$RefreshReg$(_c, \"C\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/logger/dist/cjs/constants.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PINO_CUSTOM_CONTEXT_KEY = exports.PINO_LOGGER_DEFAULTS = void 0;\nexports.PINO_LOGGER_DEFAULTS = {\n    level: \"info\"\n};\nexports.PINO_CUSTOM_CONTEXT_KEY = \"custom_context\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwrQkFBK0IsR0FBR0EsNEJBQTRCLEdBQUcsS0FBSztBQUN0RUEsNEJBQTRCLEdBQUc7SUFDM0JJLE9BQU87QUFDWDtBQUNBSiwrQkFBK0IsR0FBRyxrQkFDbEMscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvY29uc3RhbnRzLmpzP2U5NDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBJTk9fQ1VTVE9NX0NPTlRFWFRfS0VZID0gZXhwb3J0cy5QSU5PX0xPR0dFUl9ERUZBVUxUUyA9IHZvaWQgMDtcbmV4cG9ydHMuUElOT19MT0dHRVJfREVGQVVMVFMgPSB7XG4gICAgbGV2ZWw6IFwiaW5mb1wiLFxufTtcbmV4cG9ydHMuUElOT19DVVNUT01fQ09OVEVYVF9LRVkgPSBcImN1c3RvbV9jb250ZXh0XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUElOT19DVVNUT01fQ09OVEVYVF9LRVkiLCJQSU5PX0xPR0dFUl9ERUZBVUxUUyIsImxldmVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/logger/dist/cjs/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.pino = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.js\");\nconst pino_1 = tslib_1.__importDefault(__webpack_require__(/*! pino */ \"(app-pages-browser)/./node_modules/pino/browser.js\"));\nObject.defineProperty(exports, \"pino\", ({\n    enumerable: true,\n    get: function() {\n        return pino_1.default;\n    }\n}));\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/constants.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/utils.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFlBQVksR0FBRyxLQUFLO0FBQ3BCLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLG9FQUFPO0FBQy9CLE1BQU1DLFNBQVNGLFFBQVFHLGVBQWUsQ0FBQ0YsbUJBQU9BLENBQUMsZ0VBQU07QUFDckROLHdDQUF1QztJQUFFUyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxPQUFPSSxPQUFPO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDekdOLFFBQVFPLFlBQVksQ0FBQ04sbUJBQU9BLENBQUMsbUdBQWEsR0FBR0o7QUFDN0NHLFFBQVFPLFlBQVksQ0FBQ04sbUJBQU9BLENBQUMsMkZBQVMsR0FBR0osVUFDekMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvaW5kZXguanM/NmIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGlubyA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBwaW5vXzEgPSB0c2xpYl8xLl9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicGlub1wiKSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwaW5vXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwaW5vXzEuZGVmYXVsdDsgfSB9KTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwaW5vIiwidHNsaWJfMSIsInJlcXVpcmUiLCJwaW5vXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmYXVsdCIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/logger/dist/cjs/utils.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateChildLogger = exports.formatChildLoggerContext = exports.getLoggerContext = exports.setBrowserLoggerContext = exports.getBrowserLoggerContext = exports.getDefaultLoggerOptions = void 0;\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/constants.js\");\nfunction getDefaultLoggerOptions(opts) {\n    return Object.assign(Object.assign({}, opts), {\n        level: (opts === null || opts === void 0 ? void 0 : opts.level) || constants_1.PINO_LOGGER_DEFAULTS.level\n    });\n}\nexports.getDefaultLoggerOptions = getDefaultLoggerOptions;\nfunction getBrowserLoggerContext(logger) {\n    let customContextKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : constants_1.PINO_CUSTOM_CONTEXT_KEY;\n    return logger[customContextKey] || \"\";\n}\nexports.getBrowserLoggerContext = getBrowserLoggerContext;\nfunction setBrowserLoggerContext(logger, context) {\n    let customContextKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : constants_1.PINO_CUSTOM_CONTEXT_KEY;\n    logger[customContextKey] = context;\n    return logger;\n}\nexports.setBrowserLoggerContext = setBrowserLoggerContext;\nfunction getLoggerContext(logger) {\n    let customContextKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : constants_1.PINO_CUSTOM_CONTEXT_KEY;\n    let context = \"\";\n    if (typeof logger.bindings === \"undefined\") {\n        context = getBrowserLoggerContext(logger, customContextKey);\n    } else {\n        context = logger.bindings().context || \"\";\n    }\n    return context;\n}\nexports.getLoggerContext = getLoggerContext;\nfunction formatChildLoggerContext(logger, childContext) {\n    let customContextKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : constants_1.PINO_CUSTOM_CONTEXT_KEY;\n    const parentContext = getLoggerContext(logger, customContextKey);\n    const context = parentContext.trim() ? \"\".concat(parentContext, \"/\").concat(childContext) : childContext;\n    return context;\n}\nexports.formatChildLoggerContext = formatChildLoggerContext;\nfunction generateChildLogger(logger, childContext) {\n    let customContextKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : constants_1.PINO_CUSTOM_CONTEXT_KEY;\n    const context = formatChildLoggerContext(logger, childContext, customContextKey);\n    const child = logger.child({\n        context\n    });\n    return setBrowserLoggerContext(child, context, customContextKey);\n}\nexports.generateChildLogger = generateChildLogger; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHQSxnQ0FBZ0MsR0FBR0Esd0JBQXdCLEdBQUdBLCtCQUErQixHQUFHQSwrQkFBK0IsR0FBR0EsK0JBQStCLEdBQUcsS0FBSztBQUN2TSxNQUFNUSxjQUFjQyxtQkFBT0EsQ0FBQyxtR0FBYTtBQUN6QyxTQUFTRix3QkFBd0JHLElBQUk7SUFDakMsT0FBT1osT0FBT2EsTUFBTSxDQUFDYixPQUFPYSxNQUFNLENBQUMsQ0FBQyxHQUFHRCxPQUFPO1FBQUVFLE9BQU8sQ0FBQ0YsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSSxLQUFLLElBQUlBLEtBQUtFLEtBQUssS0FBS0osWUFBWUssb0JBQW9CLENBQUNELEtBQUs7SUFBQztBQUM5SjtBQUNBWiwrQkFBK0IsR0FBR087QUFDbEMsU0FBU0Qsd0JBQXdCUSxNQUFNO1FBQUVDLG1CQUFBQSxpRUFBbUJQLFlBQVlRLHVCQUF1QjtJQUMzRixPQUFPRixNQUFNLENBQUNDLGlCQUFpQixJQUFJO0FBQ3ZDO0FBQ0FmLCtCQUErQixHQUFHTTtBQUNsQyxTQUFTRCx3QkFBd0JTLE1BQU0sRUFBRUcsT0FBTztRQUFFRixtQkFBQUEsaUVBQW1CUCxZQUFZUSx1QkFBdUI7SUFDcEdGLE1BQU0sQ0FBQ0MsaUJBQWlCLEdBQUdFO0lBQzNCLE9BQU9IO0FBQ1g7QUFDQWQsK0JBQStCLEdBQUdLO0FBQ2xDLFNBQVNELGlCQUFpQlUsTUFBTTtRQUFFQyxtQkFBQUEsaUVBQW1CUCxZQUFZUSx1QkFBdUI7SUFDcEYsSUFBSUMsVUFBVTtJQUNkLElBQUksT0FBT0gsT0FBT0ksUUFBUSxLQUFLLGFBQWE7UUFDeENELFVBQVVYLHdCQUF3QlEsUUFBUUM7SUFDOUMsT0FDSztRQUNERSxVQUFVSCxPQUFPSSxRQUFRLEdBQUdELE9BQU8sSUFBSTtJQUMzQztJQUNBLE9BQU9BO0FBQ1g7QUFDQWpCLHdCQUF3QixHQUFHSTtBQUMzQixTQUFTRCx5QkFBeUJXLE1BQU0sRUFBRUssWUFBWTtRQUFFSixtQkFBQUEsaUVBQW1CUCxZQUFZUSx1QkFBdUI7SUFDMUcsTUFBTUksZ0JBQWdCaEIsaUJBQWlCVSxRQUFRQztJQUMvQyxNQUFNRSxVQUFVRyxjQUFjQyxJQUFJLEtBQzVCLEdBQW9CRixPQUFqQkMsZUFBYyxLQUFnQixPQUFiRCxnQkFDcEJBO0lBQ04sT0FBT0Y7QUFDWDtBQUNBakIsZ0NBQWdDLEdBQUdHO0FBQ25DLFNBQVNELG9CQUFvQlksTUFBTSxFQUFFSyxZQUFZO1FBQUVKLG1CQUFBQSxpRUFBbUJQLFlBQVlRLHVCQUF1QjtJQUNyRyxNQUFNQyxVQUFVZCx5QkFBeUJXLFFBQVFLLGNBQWNKO0lBQy9ELE1BQU1PLFFBQVFSLE9BQU9RLEtBQUssQ0FBQztRQUFFTDtJQUFRO0lBQ3JDLE9BQU9aLHdCQUF3QmlCLE9BQU9MLFNBQVNGO0FBQ25EO0FBQ0FmLDJCQUEyQixHQUFHRSxxQkFDOUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9sb2dnZXIvZGlzdC9janMvdXRpbHMuanM/ZTg1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGVDaGlsZExvZ2dlciA9IGV4cG9ydHMuZm9ybWF0Q2hpbGRMb2dnZXJDb250ZXh0ID0gZXhwb3J0cy5nZXRMb2dnZXJDb250ZXh0ID0gZXhwb3J0cy5zZXRCcm93c2VyTG9nZ2VyQ29udGV4dCA9IGV4cG9ydHMuZ2V0QnJvd3NlckxvZ2dlckNvbnRleHQgPSBleHBvcnRzLmdldERlZmF1bHRMb2dnZXJPcHRpb25zID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5mdW5jdGlvbiBnZXREZWZhdWx0TG9nZ2VyT3B0aW9ucyhvcHRzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0cyksIHsgbGV2ZWw6IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMubGV2ZWwpIHx8IGNvbnN0YW50c18xLlBJTk9fTE9HR0VSX0RFRkFVTFRTLmxldmVsIH0pO1xufVxuZXhwb3J0cy5nZXREZWZhdWx0TG9nZ2VyT3B0aW9ucyA9IGdldERlZmF1bHRMb2dnZXJPcHRpb25zO1xuZnVuY3Rpb24gZ2V0QnJvd3NlckxvZ2dlckNvbnRleHQobG9nZ2VyLCBjdXN0b21Db250ZXh0S2V5ID0gY29uc3RhbnRzXzEuUElOT19DVVNUT01fQ09OVEVYVF9LRVkpIHtcbiAgICByZXR1cm4gbG9nZ2VyW2N1c3RvbUNvbnRleHRLZXldIHx8IFwiXCI7XG59XG5leHBvcnRzLmdldEJyb3dzZXJMb2dnZXJDb250ZXh0ID0gZ2V0QnJvd3NlckxvZ2dlckNvbnRleHQ7XG5mdW5jdGlvbiBzZXRCcm93c2VyTG9nZ2VyQ29udGV4dChsb2dnZXIsIGNvbnRleHQsIGN1c3RvbUNvbnRleHRLZXkgPSBjb25zdGFudHNfMS5QSU5PX0NVU1RPTV9DT05URVhUX0tFWSkge1xuICAgIGxvZ2dlcltjdXN0b21Db250ZXh0S2V5XSA9IGNvbnRleHQ7XG4gICAgcmV0dXJuIGxvZ2dlcjtcbn1cbmV4cG9ydHMuc2V0QnJvd3NlckxvZ2dlckNvbnRleHQgPSBzZXRCcm93c2VyTG9nZ2VyQ29udGV4dDtcbmZ1bmN0aW9uIGdldExvZ2dlckNvbnRleHQobG9nZ2VyLCBjdXN0b21Db250ZXh0S2V5ID0gY29uc3RhbnRzXzEuUElOT19DVVNUT01fQ09OVEVYVF9LRVkpIHtcbiAgICBsZXQgY29udGV4dCA9IFwiXCI7XG4gICAgaWYgKHR5cGVvZiBsb2dnZXIuYmluZGluZ3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY29udGV4dCA9IGdldEJyb3dzZXJMb2dnZXJDb250ZXh0KGxvZ2dlciwgY3VzdG9tQ29udGV4dEtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb250ZXh0ID0gbG9nZ2VyLmJpbmRpbmdzKCkuY29udGV4dCB8fCBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn1cbmV4cG9ydHMuZ2V0TG9nZ2VyQ29udGV4dCA9IGdldExvZ2dlckNvbnRleHQ7XG5mdW5jdGlvbiBmb3JtYXRDaGlsZExvZ2dlckNvbnRleHQobG9nZ2VyLCBjaGlsZENvbnRleHQsIGN1c3RvbUNvbnRleHRLZXkgPSBjb25zdGFudHNfMS5QSU5PX0NVU1RPTV9DT05URVhUX0tFWSkge1xuICAgIGNvbnN0IHBhcmVudENvbnRleHQgPSBnZXRMb2dnZXJDb250ZXh0KGxvZ2dlciwgY3VzdG9tQ29udGV4dEtleSk7XG4gICAgY29uc3QgY29udGV4dCA9IHBhcmVudENvbnRleHQudHJpbSgpXG4gICAgICAgID8gYCR7cGFyZW50Q29udGV4dH0vJHtjaGlsZENvbnRleHR9YFxuICAgICAgICA6IGNoaWxkQ29udGV4dDtcbiAgICByZXR1cm4gY29udGV4dDtcbn1cbmV4cG9ydHMuZm9ybWF0Q2hpbGRMb2dnZXJDb250ZXh0ID0gZm9ybWF0Q2hpbGRMb2dnZXJDb250ZXh0O1xuZnVuY3Rpb24gZ2VuZXJhdGVDaGlsZExvZ2dlcihsb2dnZXIsIGNoaWxkQ29udGV4dCwgY3VzdG9tQ29udGV4dEtleSA9IGNvbnN0YW50c18xLlBJTk9fQ1VTVE9NX0NPTlRFWFRfS0VZKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGZvcm1hdENoaWxkTG9nZ2VyQ29udGV4dChsb2dnZXIsIGNoaWxkQ29udGV4dCwgY3VzdG9tQ29udGV4dEtleSk7XG4gICAgY29uc3QgY2hpbGQgPSBsb2dnZXIuY2hpbGQoeyBjb250ZXh0IH0pO1xuICAgIHJldHVybiBzZXRCcm93c2VyTG9nZ2VyQ29udGV4dChjaGlsZCwgY29udGV4dCwgY3VzdG9tQ29udGV4dEtleSk7XG59XG5leHBvcnRzLmdlbmVyYXRlQ2hpbGRMb2dnZXIgPSBnZW5lcmF0ZUNoaWxkTG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2VuZXJhdGVDaGlsZExvZ2dlciIsImZvcm1hdENoaWxkTG9nZ2VyQ29udGV4dCIsImdldExvZ2dlckNvbnRleHQiLCJzZXRCcm93c2VyTG9nZ2VyQ29udGV4dCIsImdldEJyb3dzZXJMb2dnZXJDb250ZXh0IiwiZ2V0RGVmYXVsdExvZ2dlck9wdGlvbnMiLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJvcHRzIiwiYXNzaWduIiwibGV2ZWwiLCJQSU5PX0xPR0dFUl9ERUZBVUxUUyIsImxvZ2dlciIsImN1c3RvbUNvbnRleHRLZXkiLCJQSU5PX0NVU1RPTV9DT05URVhUX0tFWSIsImNvbnRleHQiLCJiaW5kaW5ncyIsImNoaWxkQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJ0cmltIiwiY2hpbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/api.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateKeyPair: function() { return /* binding */ generateKeyPair; },\n/* harmony export */   signJWT: function() { return /* binding */ signJWT; },\n/* harmony export */   verifyJWT: function() { return /* binding */ verifyJWT; }\n/* harmony export */ });\n/* harmony import */ var _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stablelib/ed25519 */ \"(app-pages-browser)/./node_modules/@stablelib/ed25519/lib/ed25519.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/random */ \"(app-pages-browser)/./node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js\");\n\n\n\n\n\nfunction generateKeyPair() {\n    let seed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(_constants__WEBPACK_IMPORTED_MODULE_3__.KEY_PAIR_SEED_LENGTH);\n    return _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__.generateKeyPairFromSeed(seed);\n}\nasync function signJWT(sub, aud, ttl, keyPair) {\n    let iat = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.fromMiliseconds)(Date.now());\n    const header = {\n        alg: _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_ALG,\n        typ: _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_TYP\n    };\n    const iss = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.encodeIss)(keyPair.publicKey);\n    const exp = iat + ttl;\n    const payload = {\n        iss,\n        sub,\n        aud,\n        iat,\n        exp\n    };\n    const data = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.encodeData)({\n        header,\n        payload\n    });\n    const signature = _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__.sign(keyPair.secretKey, data);\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_4__.encodeJWT)({\n        header,\n        payload,\n        signature\n    });\n}\nasync function verifyJWT(jwt) {\n    const { header, payload, data, signature } = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.decodeJWT)(jwt);\n    if (header.alg !== _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_ALG || header.typ !== _constants__WEBPACK_IMPORTED_MODULE_3__.JWT_IRIDIUM_TYP) {\n        throw new Error(\"JWT must use EdDSA algorithm\");\n    }\n    const publicKey = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.decodeIss)(payload.iss);\n    return _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_0__.verify(publicKey, data, signature);\n} //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoL2Rpc3QvZXNtL2FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBOEM7QUFDRTtBQUNNO0FBQ2dDO0FBQ0o7QUFDM0UsU0FBU1c7UUFBZ0JDLE9BQUFBLGlFQUFPWCw4REFBV0EsQ0FBQ0ksNERBQW9CQTtJQUNuRSxPQUFPTCx1RUFBK0IsQ0FBQ1k7QUFDM0M7QUFDTyxlQUFlRSxRQUFRQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxPQUFPO1FBQUVDLE1BQUFBLGlFQUFNakIsb0VBQWVBLENBQUNrQixLQUFLQyxHQUFHO0lBQ2hGLE1BQU1DLFNBQVM7UUFBRUMsS0FBS3BCLHVEQUFlQTtRQUFFcUIsS0FBS3BCLHVEQUFlQTtJQUFDO0lBQzVELE1BQU1xQixNQUFNaEIsaURBQVNBLENBQUNTLFFBQVFRLFNBQVM7SUFDdkMsTUFBTUMsTUFBTVIsTUFBTUY7SUFDbEIsTUFBTVcsVUFBVTtRQUFFSDtRQUFLVjtRQUFLQztRQUFLRztRQUFLUTtJQUFJO0lBQzFDLE1BQU1FLE9BQU9yQixrREFBVUEsQ0FBQztRQUFFYztRQUFRTTtJQUFRO0lBQzFDLE1BQU1FLFlBQVk5QixvREFBWSxDQUFDa0IsUUFBUWMsU0FBUyxFQUFFSDtJQUNsRCxPQUFPbkIsaURBQVNBLENBQUM7UUFBRVk7UUFBUU07UUFBU0U7SUFBVTtBQUNsRDtBQUNPLGVBQWVHLFVBQVVDLEdBQUc7SUFDL0IsTUFBTSxFQUFFWixNQUFNLEVBQUVNLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUUsR0FBR3ZCLGlEQUFTQSxDQUFDMkI7SUFDdkQsSUFBSVosT0FBT0MsR0FBRyxLQUFLcEIsdURBQWVBLElBQUltQixPQUFPRSxHQUFHLEtBQUtwQix1REFBZUEsRUFBRTtRQUNsRSxNQUFNLElBQUkrQixNQUFNO0lBQ3BCO0lBQ0EsTUFBTVQsWUFBWXBCLGlEQUFTQSxDQUFDc0IsUUFBUUgsR0FBRztJQUN2QyxPQUFPekIsc0RBQWMsQ0FBQzBCLFdBQVdHLE1BQU1DO0FBQzNDLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoL2Rpc3QvZXNtL2FwaS5qcz8yYzQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVkMjU1MTkgZnJvbSBcIkBzdGFibGVsaWIvZWQyNTUxOVwiO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tIFwiQHN0YWJsZWxpYi9yYW5kb21cIjtcbmltcG9ydCB7IGZyb21NaWxpc2Vjb25kcyB9IGZyb20gXCJAd2FsbGV0Y29ubmVjdC90aW1lXCI7XG5pbXBvcnQgeyBKV1RfSVJJRElVTV9BTEcsIEpXVF9JUklESVVNX1RZUCwgS0VZX1BBSVJfU0VFRF9MRU5HVEgsIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBkZWNvZGVJc3MsIGRlY29kZUpXVCwgZW5jb2RlRGF0YSwgZW5jb2RlSXNzLCBlbmNvZGVKV1QsIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXIoc2VlZCA9IHJhbmRvbUJ5dGVzKEtFWV9QQUlSX1NFRURfTEVOR1RIKSkge1xuICAgIHJldHVybiBlZDI1NTE5LmdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25KV1Qoc3ViLCBhdWQsIHR0bCwga2V5UGFpciwgaWF0ID0gZnJvbU1pbGlzZWNvbmRzKERhdGUubm93KCkpKSB7XG4gICAgY29uc3QgaGVhZGVyID0geyBhbGc6IEpXVF9JUklESVVNX0FMRywgdHlwOiBKV1RfSVJJRElVTV9UWVAgfTtcbiAgICBjb25zdCBpc3MgPSBlbmNvZGVJc3Moa2V5UGFpci5wdWJsaWNLZXkpO1xuICAgIGNvbnN0IGV4cCA9IGlhdCArIHR0bDtcbiAgICBjb25zdCBwYXlsb2FkID0geyBpc3MsIHN1YiwgYXVkLCBpYXQsIGV4cCB9O1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHsgaGVhZGVyLCBwYXlsb2FkIH0pO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGVkMjU1MTkuc2lnbihrZXlQYWlyLnNlY3JldEtleSwgZGF0YSk7XG4gICAgcmV0dXJuIGVuY29kZUpXVCh7IGhlYWRlciwgcGF5bG9hZCwgc2lnbmF0dXJlIH0pO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeUpXVChqd3QpIHtcbiAgICBjb25zdCB7IGhlYWRlciwgcGF5bG9hZCwgZGF0YSwgc2lnbmF0dXJlIH0gPSBkZWNvZGVKV1Qoand0KTtcbiAgICBpZiAoaGVhZGVyLmFsZyAhPT0gSldUX0lSSURJVU1fQUxHIHx8IGhlYWRlci50eXAgIT09IEpXVF9JUklESVVNX1RZUCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJKV1QgbXVzdCB1c2UgRWREU0EgYWxnb3JpdGhtXCIpO1xuICAgIH1cbiAgICBjb25zdCBwdWJsaWNLZXkgPSBkZWNvZGVJc3MocGF5bG9hZC5pc3MpO1xuICAgIHJldHVybiBlZDI1NTE5LnZlcmlmeShwdWJsaWNLZXksIGRhdGEsIHNpZ25hdHVyZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwIl0sIm5hbWVzIjpbImVkMjU1MTkiLCJyYW5kb21CeXRlcyIsImZyb21NaWxpc2Vjb25kcyIsIkpXVF9JUklESVVNX0FMRyIsIkpXVF9JUklESVVNX1RZUCIsIktFWV9QQUlSX1NFRURfTEVOR1RIIiwiZGVjb2RlSXNzIiwiZGVjb2RlSldUIiwiZW5jb2RlRGF0YSIsImVuY29kZUlzcyIsImVuY29kZUpXVCIsImdlbmVyYXRlS2V5UGFpciIsInNlZWQiLCJnZW5lcmF0ZUtleVBhaXJGcm9tU2VlZCIsInNpZ25KV1QiLCJzdWIiLCJhdWQiLCJ0dGwiLCJrZXlQYWlyIiwiaWF0IiwiRGF0ZSIsIm5vdyIsImhlYWRlciIsImFsZyIsInR5cCIsImlzcyIsInB1YmxpY0tleSIsImV4cCIsInBheWxvYWQiLCJkYXRhIiwic2lnbmF0dXJlIiwic2lnbiIsInNlY3JldEtleSIsInZlcmlmeUpXVCIsImp3dCIsIkVycm9yIiwidmVyaWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/api.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/constants.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_ENCODING: function() { return /* binding */ DATA_ENCODING; },\n/* harmony export */   DID_DELIMITER: function() { return /* binding */ DID_DELIMITER; },\n/* harmony export */   DID_METHOD: function() { return /* binding */ DID_METHOD; },\n/* harmony export */   DID_PREFIX: function() { return /* binding */ DID_PREFIX; },\n/* harmony export */   JSON_ENCODING: function() { return /* binding */ JSON_ENCODING; },\n/* harmony export */   JWT_DELIMITER: function() { return /* binding */ JWT_DELIMITER; },\n/* harmony export */   JWT_ENCODING: function() { return /* binding */ JWT_ENCODING; },\n/* harmony export */   JWT_IRIDIUM_ALG: function() { return /* binding */ JWT_IRIDIUM_ALG; },\n/* harmony export */   JWT_IRIDIUM_TYP: function() { return /* binding */ JWT_IRIDIUM_TYP; },\n/* harmony export */   KEY_PAIR_SEED_LENGTH: function() { return /* binding */ KEY_PAIR_SEED_LENGTH; },\n/* harmony export */   MULTICODEC_ED25519_BASE: function() { return /* binding */ MULTICODEC_ED25519_BASE; },\n/* harmony export */   MULTICODEC_ED25519_ENCODING: function() { return /* binding */ MULTICODEC_ED25519_ENCODING; },\n/* harmony export */   MULTICODEC_ED25519_HEADER: function() { return /* binding */ MULTICODEC_ED25519_HEADER; },\n/* harmony export */   MULTICODEC_ED25519_LENGTH: function() { return /* binding */ MULTICODEC_ED25519_LENGTH; }\n/* harmony export */ });\nconst JWT_IRIDIUM_ALG = \"EdDSA\";\nconst JWT_IRIDIUM_TYP = \"JWT\";\nconst JWT_DELIMITER = \".\";\nconst JWT_ENCODING = \"base64url\";\nconst JSON_ENCODING = \"utf8\";\nconst DATA_ENCODING = \"utf8\";\nconst DID_DELIMITER = \":\";\nconst DID_PREFIX = \"did\";\nconst DID_METHOD = \"key\";\nconst MULTICODEC_ED25519_ENCODING = \"base58btc\";\nconst MULTICODEC_ED25519_BASE = \"z\";\nconst MULTICODEC_ED25519_HEADER = \"K36\";\nconst MULTICODEC_ED25519_LENGTH = 32;\nconst KEY_PAIR_SEED_LENGTH = 32; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoL2Rpc3QvZXNtL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLGtCQUFrQixRQUFRO0FBQ2hDLE1BQU1DLGtCQUFrQixNQUFNO0FBQzlCLE1BQU1DLGdCQUFnQixJQUFJO0FBQzFCLE1BQU1DLGVBQWUsWUFBWTtBQUNqQyxNQUFNQyxnQkFBZ0IsT0FBTztBQUM3QixNQUFNQyxnQkFBZ0IsT0FBTztBQUM3QixNQUFNQyxnQkFBZ0IsSUFBSTtBQUMxQixNQUFNQyxhQUFhLE1BQU07QUFDekIsTUFBTUMsYUFBYSxNQUFNO0FBQ3pCLE1BQU1DLDhCQUE4QixZQUFZO0FBQ2hELE1BQU1DLDBCQUEwQixJQUFJO0FBQ3BDLE1BQU1DLDRCQUE0QixNQUFNO0FBQ3hDLE1BQU1DLDRCQUE0QixHQUFHO0FBQ3JDLE1BQU1DLHVCQUF1QixHQUFHLENBQ3ZDLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS9jb25zdGFudHMuanM/NWQ4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSldUX0lSSURJVU1fQUxHID0gXCJFZERTQVwiO1xuZXhwb3J0IGNvbnN0IEpXVF9JUklESVVNX1RZUCA9IFwiSldUXCI7XG5leHBvcnQgY29uc3QgSldUX0RFTElNSVRFUiA9IFwiLlwiO1xuZXhwb3J0IGNvbnN0IEpXVF9FTkNPRElORyA9IFwiYmFzZTY0dXJsXCI7XG5leHBvcnQgY29uc3QgSlNPTl9FTkNPRElORyA9IFwidXRmOFwiO1xuZXhwb3J0IGNvbnN0IERBVEFfRU5DT0RJTkcgPSBcInV0ZjhcIjtcbmV4cG9ydCBjb25zdCBESURfREVMSU1JVEVSID0gXCI6XCI7XG5leHBvcnQgY29uc3QgRElEX1BSRUZJWCA9IFwiZGlkXCI7XG5leHBvcnQgY29uc3QgRElEX01FVEhPRCA9IFwia2V5XCI7XG5leHBvcnQgY29uc3QgTVVMVElDT0RFQ19FRDI1NTE5X0VOQ09ESU5HID0gXCJiYXNlNThidGNcIjtcbmV4cG9ydCBjb25zdCBNVUxUSUNPREVDX0VEMjU1MTlfQkFTRSA9IFwielwiO1xuZXhwb3J0IGNvbnN0IE1VTFRJQ09ERUNfRUQyNTUxOV9IRUFERVIgPSBcIkszNlwiO1xuZXhwb3J0IGNvbnN0IE1VTFRJQ09ERUNfRUQyNTUxOV9MRU5HVEggPSAzMjtcbmV4cG9ydCBjb25zdCBLRVlfUEFJUl9TRUVEX0xFTkdUSCA9IDMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJKV1RfSVJJRElVTV9BTEciLCJKV1RfSVJJRElVTV9UWVAiLCJKV1RfREVMSU1JVEVSIiwiSldUX0VOQ09ESU5HIiwiSlNPTl9FTkNPRElORyIsIkRBVEFfRU5DT0RJTkciLCJESURfREVMSU1JVEVSIiwiRElEX1BSRUZJWCIsIkRJRF9NRVRIT0QiLCJNVUxUSUNPREVDX0VEMjU1MTlfRU5DT0RJTkciLCJNVUxUSUNPREVDX0VEMjU1MTlfQkFTRSIsIk1VTFRJQ09ERUNfRUQyNTUxOV9IRUFERVIiLCJNVUxUSUNPREVDX0VEMjU1MTlfTEVOR1RIIiwiS0VZX1BBSVJfU0VFRF9MRU5HVEgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_ENCODING: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DATA_ENCODING; },\n/* harmony export */   DID_DELIMITER: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DID_DELIMITER; },\n/* harmony export */   DID_METHOD: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DID_METHOD; },\n/* harmony export */   DID_PREFIX: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DID_PREFIX; },\n/* harmony export */   JSON_ENCODING: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JSON_ENCODING; },\n/* harmony export */   JWT_DELIMITER: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_DELIMITER; },\n/* harmony export */   JWT_ENCODING: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_ENCODING; },\n/* harmony export */   JWT_IRIDIUM_ALG: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_IRIDIUM_ALG; },\n/* harmony export */   JWT_IRIDIUM_TYP: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JWT_IRIDIUM_TYP; },\n/* harmony export */   KEY_PAIR_SEED_LENGTH: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.KEY_PAIR_SEED_LENGTH; },\n/* harmony export */   MULTICODEC_ED25519_BASE: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_BASE; },\n/* harmony export */   MULTICODEC_ED25519_ENCODING: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_ENCODING; },\n/* harmony export */   MULTICODEC_ED25519_HEADER: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_HEADER; },\n/* harmony export */   MULTICODEC_ED25519_LENGTH: function() { return /* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.MULTICODEC_ED25519_LENGTH; },\n/* harmony export */   decodeData: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeData; },\n/* harmony export */   decodeIss: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeIss; },\n/* harmony export */   decodeJSON: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeJSON; },\n/* harmony export */   decodeJWT: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeJWT; },\n/* harmony export */   decodeSig: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.decodeSig; },\n/* harmony export */   encodeData: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeData; },\n/* harmony export */   encodeIss: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeIss; },\n/* harmony export */   encodeJSON: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeJSON; },\n/* harmony export */   encodeJWT: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeJWT; },\n/* harmony export */   encodeSig: function() { return /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_3__.encodeSig; },\n/* harmony export */   generateKeyPair: function() { return /* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair; },\n/* harmony export */   signJWT: function() { return /* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.signJWT; },\n/* harmony export */   verifyJWT: function() { return /* reexport safe */ _api__WEBPACK_IMPORTED_MODULE_0__.verifyJWT; }\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/api.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/types.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_types__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"generateKeyPair\",\"signJWT\",\"verifyJWT\",\"DATA_ENCODING\",\"DID_DELIMITER\",\"DID_METHOD\",\"DID_PREFIX\",\"JSON_ENCODING\",\"JWT_DELIMITER\",\"JWT_ENCODING\",\"JWT_IRIDIUM_ALG\",\"JWT_IRIDIUM_TYP\",\"KEY_PAIR_SEED_LENGTH\",\"MULTICODEC_ED25519_BASE\",\"MULTICODEC_ED25519_ENCODING\",\"MULTICODEC_ED25519_HEADER\",\"MULTICODEC_ED25519_LENGTH\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _types__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js\");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9yZWxheS1hdXRoL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNCO0FBQ007QUFDSjtBQUNBLENBQ3hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS9pbmRleC5qcz81NGUwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FwaVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/types.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("//# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3JlbGF5LWF1dGgvZGlzdC9lc20vdHlwZXMuanM/NjczZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUNBQWlDIiwiZmlsZSI6IihhcHAtcGFnZXMtYnJvd3NlcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvcmVsYXktYXV0aC9kaXN0L2VzbS90eXBlcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/esm/utils.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeData: function() { return /* binding */ decodeData; },\n/* harmony export */   decodeIss: function() { return /* binding */ decodeIss; },\n/* harmony export */   decodeJSON: function() { return /* binding */ decodeJSON; },\n/* harmony export */   decodeJWT: function() { return /* binding */ decodeJWT; },\n/* harmony export */   decodeSig: function() { return /* binding */ decodeSig; },\n/* harmony export */   encodeData: function() { return /* binding */ encodeData; },\n/* harmony export */   encodeIss: function() { return /* binding */ encodeIss; },\n/* harmony export */   encodeJSON: function() { return /* binding */ encodeJSON; },\n/* harmony export */   encodeJWT: function() { return /* binding */ encodeJWT; },\n/* harmony export */   encodeSig: function() { return /* binding */ encodeSig; }\n/* harmony export */ });\n/* harmony import */ var uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/concat */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/concat.js\");\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uint8arrays/to-string */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/to-string.js\");\n/* harmony import */ var uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uint8arrays/from-string */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/from-string.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/constants.js\");\n\n\n\n\n\nfunction decodeJSON(str) {\n    return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_3__.safeJsonParse)((0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(str, _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING), _constants__WEBPACK_IMPORTED_MODULE_4__.JSON_ENCODING));\n}\nfunction encodeJSON(val) {\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_3__.safeJsonStringify)(val), _constants__WEBPACK_IMPORTED_MODULE_4__.JSON_ENCODING), _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING);\n}\nfunction encodeIss(publicKey) {\n    const header = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(_constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_HEADER, _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    const multicodec = _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_BASE + (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)((0,uint8arrays_concat__WEBPACK_IMPORTED_MODULE_0__.concat)([\n        header,\n        publicKey\n    ]), _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    return [\n        _constants__WEBPACK_IMPORTED_MODULE_4__.DID_PREFIX,\n        _constants__WEBPACK_IMPORTED_MODULE_4__.DID_METHOD,\n        multicodec\n    ].join(_constants__WEBPACK_IMPORTED_MODULE_4__.DID_DELIMITER);\n}\nfunction decodeIss(issuer) {\n    const [prefix, method, multicodec] = issuer.split(_constants__WEBPACK_IMPORTED_MODULE_4__.DID_DELIMITER);\n    if (prefix !== _constants__WEBPACK_IMPORTED_MODULE_4__.DID_PREFIX || method !== _constants__WEBPACK_IMPORTED_MODULE_4__.DID_METHOD) {\n        throw new Error('Issuer must be a DID with method \"key\"');\n    }\n    const base = multicodec.slice(0, 1);\n    if (base !== _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_BASE) {\n        throw new Error(\"Issuer must be a key in mulicodec format\");\n    }\n    const bytes = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(multicodec.slice(1), _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    const type = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(bytes.slice(0, 2), _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_ENCODING);\n    if (type !== _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_HEADER) {\n        throw new Error('Issuer must be a public key with type \"Ed25519\"');\n    }\n    const publicKey = bytes.slice(2);\n    if (publicKey.length !== _constants__WEBPACK_IMPORTED_MODULE_4__.MULTICODEC_ED25519_LENGTH) {\n        throw new Error(\"Issuer must be a public key with length 32 bytes\");\n    }\n    return publicKey;\n}\nfunction encodeSig(bytes) {\n    return (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(bytes, _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING);\n}\nfunction decodeSig(encoded) {\n    return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(encoded, _constants__WEBPACK_IMPORTED_MODULE_4__.JWT_ENCODING);\n}\nfunction encodeData(params) {\n    return (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)([\n        encodeJSON(params.header),\n        encodeJSON(params.payload)\n    ].join(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER), _constants__WEBPACK_IMPORTED_MODULE_4__.DATA_ENCODING);\n}\nfunction decodeData(data) {\n    const params = (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_1__.toString)(data, _constants__WEBPACK_IMPORTED_MODULE_4__.DATA_ENCODING).split(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER);\n    const header = decodeJSON(params[0]);\n    const payload = decodeJSON(params[1]);\n    return {\n        header,\n        payload\n    };\n}\nfunction encodeJWT(params) {\n    return [\n        encodeJSON(params.header),\n        encodeJSON(params.payload),\n        encodeSig(params.signature)\n    ].join(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER);\n}\nfunction decodeJWT(jwt) {\n    const params = jwt.split(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER);\n    const header = decodeJSON(params[0]);\n    const payload = decodeJSON(params[1]);\n    const signature = decodeSig(params[2]);\n    const data = (0,uint8arrays_from_string__WEBPACK_IMPORTED_MODULE_2__.fromString)(params.slice(0, 2).join(_constants__WEBPACK_IMPORTED_MODULE_4__.JWT_DELIMITER), _constants__WEBPACK_IMPORTED_MODULE_4__.DATA_ENCODING);\n    return {\n        header,\n        payload,\n        signature,\n        data\n    };\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/safe-json/dist/esm/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeJsonParse: function() { return /* binding */ safeJsonParse; },\n/* harmony export */   safeJsonStringify: function() { return /* binding */ safeJsonStringify; }\n/* harmony export */ });\nconst JSONStringify = (data)=>JSON.stringify(data, (_, value)=>typeof value === \"bigint\" ? value.toString() + \"n\" : value);\n_c = JSONStringify;\nconst JSONParse = (json)=>{\n    const numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n    const serializedData = json.replace(numbersBiggerThanMaxInt, '$1\"$2n\"$3');\n    return JSON.parse(serializedData, (_, value)=>{\n        const isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n        if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));\n        return value;\n    });\n};\n_c1 = JSONParse;\nfunction safeJsonParse(value) {\n    if (typeof value !== \"string\") {\n        throw new Error(\"Cannot safe json parse value of type \".concat(typeof value));\n    }\n    try {\n        return JSONParse(value);\n    } catch (_a) {\n        return value;\n    }\n}\nfunction safeJsonStringify(value) {\n    return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n} //# sourceMappingURL=index.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"JSONStringify\");\n$RefreshReg$(_c1, \"JSONParse\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zYWZlLWpzb24vZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNQSxnQkFBZ0JDLENBQUFBLE9BQVFDLEtBQUtDLFNBQVMsQ0FBQ0YsTUFBTSxDQUFDRyxHQUFHQyxRQUFVLE9BQU9BLFVBQVUsV0FBV0EsTUFBTUMsUUFBUSxLQUFLLE1BQU1EO0tBQWhITDtBQUNOLE1BQU1PLFlBQVlDLENBQUFBO0lBQ2QsTUFBTUMsMEJBQTBCO0lBQ2hDLE1BQU1DLGlCQUFpQkYsS0FBS0csT0FBTyxDQUFDRix5QkFBeUI7SUFDN0QsT0FBT1AsS0FBS1UsS0FBSyxDQUFDRixnQkFBZ0IsQ0FBQ04sR0FBR0M7UUFDbEMsTUFBTVEsdUJBQXVCLE9BQU9SLFVBQVUsWUFBWUEsTUFBTVMsS0FBSyxDQUFDO1FBQ3RFLElBQUlELHNCQUNBLE9BQU9FLE9BQU9WLE1BQU1XLFNBQVMsQ0FBQyxHQUFHWCxNQUFNWSxNQUFNLEdBQUc7UUFDcEQsT0FBT1o7SUFDWDtBQUNKO01BVE1FO0FBVUMsU0FBU1csY0FBY2IsS0FBSztJQUMvQixJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUMzQixNQUFNLElBQUljLE1BQU0sd0NBQXFELE9BQWIsT0FBT2Q7SUFDbkU7SUFDQSxJQUFJO1FBQ0EsT0FBT0UsVUFBVUY7SUFDckIsRUFDQSxPQUFPZSxJQUFJO1FBQ1AsT0FBT2Y7SUFDWDtBQUNKO0FBQ08sU0FBU2dCLGtCQUFrQmhCLEtBQUs7SUFDbkMsT0FBTyxPQUFPQSxVQUFVLFdBQVdBLFFBQVFMLGNBQWNLLFVBQVU7QUFDdkUsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3NhZmUtanNvbi9kaXN0L2VzbS9pbmRleC5qcz9lMmQ5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEpTT05TdHJpbmdpZnkgPSBkYXRhID0+IEpTT04uc3RyaW5naWZ5KGRhdGEsIChfLCB2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiID8gdmFsdWUudG9TdHJpbmcoKSArIFwiblwiIDogdmFsdWUpO1xuY29uc3QgSlNPTlBhcnNlID0ganNvbiA9PiB7XG4gICAgY29uc3QgbnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQgPSAvKFtcXFs6XSk/KFxcZHsxNyx9fCg/Ols5XSg/OlsxLTldMDcxOTkyNTQ3NDA5OTF8MFsxLTldNzE5OTI1NDc0MDk5MXwwMFs4LTldMTk5MjU0NzQwOTkxfDAwN1syLTldOTkyNTQ3NDA5OTF8MDA3MTk5WzMtOV01NDc0MDk5MXwwMDcxOTkyWzYtOV00NzQwOTkxfDAwNzE5OTI1WzUtOV03NDA5OTF8MDA3MTk5MjU0WzgtOV00MDk5MXwwMDcxOTkyNTQ3WzUtOV0wOTkxfDAwNzE5OTI1NDc0WzEtOV05OTF8MDA3MTk5MjU0NzQwOTlbMi05XSkpKShbLFxcfVxcXV0pL2c7XG4gICAgY29uc3Qgc2VyaWFsaXplZERhdGEgPSBqc29uLnJlcGxhY2UobnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQsIFwiJDFcXFwiJDJuXFxcIiQzXCIpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHNlcmlhbGl6ZWREYXRhLCAoXywgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21Gb3JtYXRCaWdJbnQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUubWF0Y2goL15cXGQrbiQvKTtcbiAgICAgICAgaWYgKGlzQ3VzdG9tRm9ybWF0QmlnSW50KVxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZS5zdWJzdHJpbmcoMCwgdmFsdWUubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVKc29uUGFyc2UodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNhZmUganNvbiBwYXJzZSB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIHZhbHVlfWApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTlBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2FmZUpzb25TdHJpbmdpZnkodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiBKU09OU3RyaW5naWZ5KHZhbHVlKSB8fCBcIlwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkpTT05TdHJpbmdpZnkiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsIl8iLCJ2YWx1ZSIsInRvU3RyaW5nIiwiSlNPTlBhcnNlIiwianNvbiIsIm51bWJlcnNCaWdnZXJUaGFuTWF4SW50Iiwic2VyaWFsaXplZERhdGEiLCJyZXBsYWNlIiwicGFyc2UiLCJpc0N1c3RvbUZvcm1hdEJpZ0ludCIsIm1hdGNoIiwiQmlnSW50Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwic2FmZUpzb25QYXJzZSIsIkVycm9yIiwiX2EiLCJzYWZlSnNvblN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/sign-client/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/sign-client/dist/index.es.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENGINE_CONTEXT: function() { return /* binding */ ce; },\n/* harmony export */   ENGINE_QUEUE_STATES: function() { return /* binding */ I; },\n/* harmony export */   ENGINE_RPC_OPTS: function() { return /* binding */ V; },\n/* harmony export */   HISTORY_CONTEXT: function() { return /* binding */ is; },\n/* harmony export */   HISTORY_EVENTS: function() { return /* binding */ ts; },\n/* harmony export */   HISTORY_STORAGE_VERSION: function() { return /* binding */ rs; },\n/* harmony export */   METHODS_TO_VERIFY: function() { return /* binding */ pe; },\n/* harmony export */   PROPOSAL_CONTEXT: function() { return /* binding */ ne; },\n/* harmony export */   PROPOSAL_EXPIRY: function() { return /* binding */ ns; },\n/* harmony export */   PROPOSAL_EXPIRY_MESSAGE: function() { return /* binding */ oe; },\n/* harmony export */   REQUEST_CONTEXT: function() { return /* binding */ le; },\n/* harmony export */   SESSION_CONTEXT: function() { return /* binding */ ae; },\n/* harmony export */   SESSION_EXPIRY: function() { return /* binding */ A; },\n/* harmony export */   SESSION_REQUEST_EXPIRY_BOUNDARIES: function() { return /* binding */ U; },\n/* harmony export */   SIGN_CLIENT_CONTEXT: function() { return /* binding */ H; },\n/* harmony export */   SIGN_CLIENT_DEFAULT: function() { return /* binding */ M; },\n/* harmony export */   SIGN_CLIENT_EVENTS: function() { return /* binding */ es; },\n/* harmony export */   SIGN_CLIENT_PROTOCOL: function() { return /* binding */ X; },\n/* harmony export */   SIGN_CLIENT_STORAGE_OPTIONS: function() { return /* binding */ ss; },\n/* harmony export */   SIGN_CLIENT_STORAGE_PREFIX: function() { return /* binding */ G; },\n/* harmony export */   SIGN_CLIENT_VERSION: function() { return /* binding */ F; },\n/* harmony export */   SignClient: function() { return /* binding */ ms; },\n/* harmony export */   WALLETCONNECT_DEEPLINK_CHOICE: function() { return /* binding */ W; },\n/* harmony export */   \"default\": function() { return /* binding */ Q; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/core */ \"(app-pages-browser)/./node_modules/@walletconnect/core/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/types */ \"(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst X = \"wc\", F = 2, H = \"client\", G = \"\".concat(X, \"@\").concat(F, \":\").concat(H, \":\"), M = {\n    name: H,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.com\"\n}, es = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\"\n}, ss = {\n    database: \":memory:\"\n}, W = \"WALLETCONNECT_DEEPLINK_CHOICE\", ts = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, is = \"history\", rs = \"0.3\", ne = \"proposal\", ns = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.THIRTY_DAYS, oe = \"Proposal expired\", ae = \"session\", A = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.SEVEN_DAYS, ce = \"engine\", V = {\n    wc_sessionPropose: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1115\n        }\n    }\n}, U = {\n    min: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n    max: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.SEVEN_DAYS\n}, I = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, le = \"request\", pe = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\"\n];\nvar os = Object.defineProperty, as = Object.defineProperties, cs = Object.getOwnPropertyDescriptors, he = Object.getOwnPropertySymbols, ls = Object.prototype.hasOwnProperty, ps = Object.prototype.propertyIsEnumerable, de = (m, r, e)=>r in m ? os(m, r, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : m[r] = e, g = (m, r)=>{\n    for(var e in r || (r = {}))ls.call(r, e) && de(m, e, r[e]);\n    if (he) for (var e of he(r))ps.call(r, e) && de(m, e, r[e]);\n    return m;\n}, b = (m, r)=>as(m, cs(r));\nclass hs extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.IEngine {\n    async isInitialized() {\n        if (!this.initialized) {\n            const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(r);\n        }\n        await this.client.core.relayer.confirmOnlineStateOrThrow();\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.message, async (r)=>{\n            const { topic: e, message: s } = r;\n            if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s))) return;\n            const t = await this.client.core.crypto.decode(e, s);\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcRequest)(t) ? (this.client.core.history.set(e, t), this.onRelayEventRequest({\n                    topic: e,\n                    payload: t\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResponse)(t) ? (await this.client.core.history.resolve(t), await this.onRelayEventResponse({\n                    topic: e,\n                    payload: t\n                }), this.client.core.history.delete(e, t.id)) : this.onRelayEventUnknownPayload({\n                    topic: e,\n                    payload: t\n                });\n            } catch (i) {\n                this.client.logger.error(i);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EXPIRER_EVENTS.expired, async (r)=>{\n            const { topic: e, id: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseExpirerTarget)(r.target);\n            if (s && this.client.pendingRequest.keys.includes(s)) return await this.deletePendingSessionRequest(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            e ? this.client.session.keys.includes(e) && (await this.deleteSession(e, !0), this.client.events.emit(\"session_expire\", {\n                topic: e\n            })) : s && (await this.deleteProposal(s, !0), this.client.events.emit(\"proposal_expire\", {\n                id: s\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.create, (r)=>this.onPairingCreated(r));\n    }\n    isValidPairingTopic(r) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(r));\n            throw new Error(e);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(r)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(r));\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.core.pairing.pairings.get(r).expiry)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"pairing topic: \".concat(r));\n            throw new Error(e);\n        }\n    }\n    async isValidSessionTopic(r) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session topic should be a string: \".concat(r));\n            throw new Error(e);\n        }\n        if (!this.client.session.keys.includes(r)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"session topic doesn't exist: \".concat(r));\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.session.get(r).expiry)) {\n            await this.deleteSession(r);\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"session topic: \".concat(r));\n            throw new Error(e);\n        }\n    }\n    async isValidSessionOrPairingTopic(r) {\n        if (this.client.session.keys.includes(r)) await this.isValidSessionTopic(r);\n        else if (this.client.core.pairing.pairings.keys.includes(r)) this.isValidPairingTopic(r);\n        else if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"session or pairing topic doesn't exist: \".concat(r));\n            throw new Error(e);\n        } else {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session or pairing topic should be a string: \".concat(r));\n            throw new Error(e);\n        }\n    }\n    async isValidProposalId(r) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidId)(r)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"proposal id should be a number: \".concat(r));\n            throw new Error(e);\n        }\n        if (!this.client.proposal.keys.includes(r)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"proposal id doesn't exist: \".concat(r));\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.proposal.get(r).expiry)) {\n            await this.deleteProposal(r);\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"proposal id: \".concat(r));\n            throw new Error(e);\n        }\n    }\n    constructor(r){\n        var _this;\n        super(r), _this = this, this.name = ce, this.events = new (events__WEBPACK_IMPORTED_MODULE_1___default()), this.initialized = !1, this.ignoredPayloadTypes = [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1\n        ], this.requestQueue = {\n            state: I.idle,\n            queue: []\n        }, this.sessionRequestQueue = {\n            state: I.idle,\n            queue: []\n        }, this.requestQueueDelay = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_SECOND, this.init = async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({\n                methods: Object.keys(V)\n            }), this.initialized = !0, setTimeout(()=>{\n                this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.toMiliseconds)(this.requestQueueDelay)));\n        }, this.connect = async (e)=>{\n            await this.isInitialized();\n            const s = b(g({}, e), {\n                requiredNamespaces: e.requiredNamespaces || {},\n                optionalNamespaces: e.optionalNamespaces || {}\n            });\n            await this.isValidConnect(s);\n            const { pairingTopic: t, requiredNamespaces: i, optionalNamespaces: n, sessionProperties: o, relays: a } = s;\n            let c = t, p, d = !1;\n            if (c && (d = this.client.core.pairing.pairings.get(c).active), !c || !d) {\n                const { topic: v, uri: S } = await this.client.core.pairing.create();\n                c = v, p = S;\n            }\n            const h = await this.client.core.crypto.generateKeyPair(), R = g({\n                requiredNamespaces: i,\n                optionalNamespaces: n,\n                relays: a !== null && a !== void 0 ? a : [\n                    {\n                        protocol: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_DEFAULT_PROTOCOL\n                    }\n                ],\n                proposer: {\n                    publicKey: h,\n                    metadata: this.client.metadata\n                }\n            }, o && {\n                sessionProperties: o\n            }), { reject: w, resolve: T, done: K } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES, oe);\n            if (this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), async (param)=>{\n                let { error: v, session: S } = param;\n                if (v) w(v);\n                else if (S) {\n                    S.self.publicKey = h;\n                    const B = b(g({}, S), {\n                        requiredNamespaces: S.requiredNamespaces,\n                        optionalNamespaces: S.optionalNamespaces\n                    });\n                    await this.client.session.set(S.topic, B), await this.setExpiry(S.topic, S.expiry), c && await this.client.core.pairing.updateMetadata({\n                        topic: c,\n                        metadata: S.peer.metadata\n                    }), T(B);\n                }\n            }), !c) {\n                const { message: v } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"connect() pairing topic: \".concat(c));\n                throw new Error(v);\n            }\n            const L = await this.sendRequest({\n                topic: c,\n                method: \"wc_sessionPropose\",\n                params: R\n            }), ue = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES);\n            return await this.setProposal(L, g({\n                id: L,\n                expiry: ue\n            }, R)), {\n                uri: p,\n                approval: K\n            };\n        }, this.pair = async (e)=>(await this.isInitialized(), await this.client.core.pairing.pair(e)), this.approve = async (e)=>{\n            await this.isInitialized(), await this.isValidApprove(e);\n            const { id: s, relayProtocol: t, namespaces: i, sessionProperties: n } = e, o = this.client.proposal.get(s);\n            let { pairingTopic: a, proposer: c, requiredNamespaces: p, optionalNamespaces: d } = o;\n            a = a || \"\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(p) || (p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRequiredNamespacesFromNamespaces)(i, \"approve()\"));\n            const h = await this.client.core.crypto.generateKeyPair(), R = c.publicKey, w = await this.client.core.crypto.generateSharedKey(h, R);\n            a && s && (await this.client.core.pairing.updateMetadata({\n                topic: a,\n                metadata: c.metadata\n            }), await this.sendResult({\n                id: s,\n                topic: a,\n                result: {\n                    relay: {\n                        protocol: t !== null && t !== void 0 ? t : \"irn\"\n                    },\n                    responderPublicKey: h\n                }\n            }), await this.client.proposal.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: a\n            }));\n            const T = g({\n                relay: {\n                    protocol: t !== null && t !== void 0 ? t : \"irn\"\n                },\n                namespaces: i,\n                requiredNamespaces: p,\n                optionalNamespaces: d,\n                pairingTopic: a,\n                controller: {\n                    publicKey: h,\n                    metadata: this.client.metadata\n                },\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(A)\n            }, n && {\n                sessionProperties: n\n            });\n            await this.client.core.relayer.subscribe(w), await this.sendRequest({\n                topic: w,\n                method: \"wc_sessionSettle\",\n                params: T,\n                throwOnFailedPublish: !0\n            });\n            const K = b(g({}, T), {\n                topic: w,\n                pairingTopic: a,\n                acknowledged: !1,\n                self: T.controller,\n                peer: {\n                    publicKey: c.publicKey,\n                    metadata: c.metadata\n                },\n                controller: h\n            });\n            return await this.client.session.set(w, K), await this.setExpiry(w, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(A)), {\n                topic: w,\n                acknowledged: ()=>new Promise((L)=>setTimeout(()=>L(this.client.session.get(w)), 500))\n            };\n        }, this.reject = async (e)=>{\n            await this.isInitialized(), await this.isValidReject(e);\n            const { id: s, reason: t } = e, { pairingTopic: i } = this.client.proposal.get(s);\n            i && (await this.sendError(s, i, t), await this.client.proposal.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")));\n        }, this.update = async (e)=>{\n            await this.isInitialized(), await this.isValidUpdate(e);\n            const { topic: s, namespaces: t } = e, i = await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionUpdate\",\n                params: {\n                    namespaces: t\n                }\n            }), { done: n, resolve: o, reject: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", i), (param)=>{\n                let { error: c } = param;\n                c ? a(c) : o();\n            }), await this.client.session.update(s, {\n                namespaces: t\n            }), {\n                acknowledged: n\n            };\n        }, this.extend = async (e)=>{\n            await this.isInitialized(), await this.isValidExtend(e);\n            const { topic: s } = e, t = await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionExtend\",\n                params: {}\n            }), { done: i, resolve: n, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", t), (param)=>{\n                let { error: a } = param;\n                a ? o(a) : n();\n            }), await this.setExpiry(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(A)), {\n                acknowledged: i\n            };\n        }, this.request = async (e)=>{\n            await this.isInitialized(), await this.isValidRequest(e);\n            const { chainId: s, request: t, topic: i, expiry: n } = e, o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), { done: a, resolve: c, reject: p } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(n, \"Request expired. Please try again.\");\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", o), (param)=>{\n                let { error: d, result: h } = param;\n                d ? p(d) : c(h);\n            }), await Promise.all([\n                new Promise(async (d)=>{\n                    await this.sendRequest({\n                        clientRpcId: o,\n                        topic: i,\n                        method: \"wc_sessionRequest\",\n                        params: {\n                            request: t,\n                            chainId: s\n                        },\n                        expiry: n,\n                        throwOnFailedPublish: !0\n                    }).catch((h)=>p(h)), this.client.events.emit(\"session_request_sent\", {\n                        topic: i,\n                        request: t,\n                        chainId: s,\n                        id: o\n                    }), d();\n                }),\n                new Promise(async (d)=>{\n                    const h = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDeepLink)(this.client.core.storage, W);\n                    (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.handleDeeplinkRedirect)({\n                        id: o,\n                        topic: i,\n                        wcDeepLink: h\n                    }), d();\n                }),\n                a()\n            ]).then((d)=>d[2]);\n        }, this.respond = async (e)=>{\n            await this.isInitialized(), await this.isValidRespond(e);\n            const { topic: s, response: t } = e, { id: i } = t;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? await this.sendResult({\n                id: i,\n                topic: s,\n                result: t.result,\n                throwOnFailedPublish: !0\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && await this.sendError(i, s, t.error), this.cleanupAfterResponse(e);\n        }, this.ping = async (e)=>{\n            await this.isInitialized(), await this.isValidPing(e);\n            const { topic: s } = e;\n            if (this.client.session.keys.includes(s)) {\n                const t = await this.sendRequest({\n                    topic: s,\n                    method: \"wc_sessionPing\",\n                    params: {}\n                }), { done: i, resolve: n, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", t), (param)=>{\n                    let { error: a } = param;\n                    a ? o(a) : n();\n                }), await i();\n            } else this.client.core.pairing.pairings.keys.includes(s) && await this.client.core.pairing.ping({\n                topic: s\n            });\n        }, this.emit = async (e)=>{\n            await this.isInitialized(), await this.isValidEmit(e);\n            const { topic: s, event: t, chainId: i } = e;\n            await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionEvent\",\n                params: {\n                    event: t,\n                    chainId: i\n                }\n            });\n        }, this.disconnect = async (e)=>{\n            await this.isInitialized(), await this.isValidDisconnect(e);\n            const { topic: s } = e;\n            this.client.session.keys.includes(s) ? (await this.sendRequest({\n                topic: s,\n                method: \"wc_sessionDelete\",\n                params: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"),\n                throwOnFailedPublish: !0\n            }), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({\n                topic: s\n            });\n        }, this.find = (e)=>(this.isInitialized(), this.client.session.getAll().filter((s)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isSessionCompatible)(s, e))), this.getPendingSessionRequests = ()=>(this.isInitialized(), this.client.pendingRequest.getAll()), this.cleanupDuplicatePairings = async (e)=>{\n            if (e.pairingTopic) try {\n                const s = this.client.core.pairing.pairings.get(e.pairingTopic), t = this.client.core.pairing.pairings.getAll().filter((i)=>{\n                    var n, o;\n                    return ((n = i.peerMetadata) == null ? void 0 : n.url) && ((o = i.peerMetadata) == null ? void 0 : o.url) === e.peer.metadata.url && i.topic && i.topic !== s.topic;\n                });\n                if (t.length === 0) return;\n                this.client.logger.info(\"Cleaning up \".concat(t.length, \" duplicate pairing(s)\")), await Promise.all(t.map((i)=>this.client.core.pairing.disconnect({\n                        topic: i.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (s) {\n                this.client.logger.error(s);\n            }\n        }, this.deleteSession = async (e, s)=>{\n            const { self: t } = this.client.session.get(e);\n            await this.client.core.relayer.unsubscribe(e), this.client.session.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.client.core.crypto.keychain.has(t.publicKey) && await this.client.core.crypto.deleteKeyPair(t.publicKey), this.client.core.crypto.keychain.has(e) && await this.client.core.crypto.deleteSymKey(e), s || this.client.core.expirer.del(e), this.client.core.storage.removeItem(W).catch((i)=>this.client.logger.warn(i));\n        }, this.deleteProposal = async (e, s)=>{\n            await Promise.all([\n                this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")),\n                s ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]);\n        }, this.deletePendingSessionRequest = async function(e, s) {\n            let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n            await Promise.all([\n                _this.client.pendingRequest.delete(e, s),\n                t ? Promise.resolve() : _this.client.core.expirer.del(e)\n            ]), _this.sessionRequestQueue.queue = _this.sessionRequestQueue.queue.filter((i)=>i.id !== e), t && (_this.sessionRequestQueue.state = I.idle);\n        }, this.setExpiry = async (e, s)=>{\n            this.client.session.keys.includes(e) && await this.client.session.update(e, {\n                expiry: s\n            }), this.client.core.expirer.set(e, s);\n        }, this.setProposal = async (e, s)=>{\n            await this.client.proposal.set(e, s), this.client.core.expirer.set(e, s.expiry);\n        }, this.setPendingSessionRequest = async (e)=>{\n            const s = V.wc_sessionRequest.req.ttl, { id: t, topic: i, params: n, verifyContext: o } = e;\n            await this.client.pendingRequest.set(t, {\n                id: t,\n                topic: i,\n                params: n,\n                verifyContext: o\n            }), s && this.client.core.expirer.set(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(s));\n        }, this.sendRequest = async (e)=>{\n            const { topic: s, method: t, params: i, expiry: n, relayRpcId: o, clientRpcId: a, throwOnFailedPublish: c } = e, p = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(t, i, a);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isBrowser)() && pe.includes(t)) {\n                const R = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(p));\n                this.client.core.verify.register({\n                    attestationId: R\n                });\n            }\n            const d = await this.client.core.crypto.encode(s, p), h = V[t].req;\n            return n && (h.ttl = n), o && (h.id = o), this.client.core.history.set(s, p), c ? (h.internal = b(g({}, h.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(s, d, h)) : this.client.core.relayer.publish(s, d, h).catch((R)=>this.client.logger.error(R)), p.id;\n        }, this.sendResult = async (e)=>{\n            const { id: s, topic: t, result: i, throwOnFailedPublish: n } = e, o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(s, i), a = await this.client.core.crypto.encode(t, o), c = await this.client.core.history.get(t, s), p = V[c.request.method].res;\n            n ? (p.internal = b(g({}, p.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(t, a, p)) : this.client.core.relayer.publish(t, a, p).catch((d)=>this.client.logger.error(d)), await this.client.core.history.resolve(o);\n        }, this.sendError = async (e, s, t)=>{\n            const i = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(e, t), n = await this.client.core.crypto.encode(s, i), o = await this.client.core.history.get(s, e), a = V[o.request.method].res;\n            this.client.core.relayer.publish(s, n, a), await this.client.core.history.resolve(i);\n        }, this.cleanup = async ()=>{\n            const e = [], s = [];\n            this.client.session.getAll().forEach((t)=>{\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(t.expiry) && e.push(t.topic);\n            }), this.client.proposal.getAll().forEach((t)=>{\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(t.expiry) && s.push(t.id);\n            }), await Promise.all([\n                ...e.map((t)=>this.deleteSession(t)),\n                ...s.map((t)=>this.deleteProposal(t))\n            ]);\n        }, this.onRelayEventRequest = async (e)=>{\n            this.requestQueue.queue.push(e), await this.processRequestsQueue();\n        }, this.processRequestsQueue = async ()=>{\n            if (this.requestQueue.state === I.active) {\n                this.client.logger.info(\"Request queue already active, skipping...\");\n                return;\n            }\n            for(this.client.logger.info(\"Request queue starting with \".concat(this.requestQueue.queue.length, \" requests\")); this.requestQueue.queue.length > 0;){\n                this.requestQueue.state = I.active;\n                const e = this.requestQueue.queue.shift();\n                if (e) try {\n                    this.processRequest(e), await new Promise((s)=>setTimeout(s, 300));\n                } catch (s) {\n                    this.client.logger.warn(s);\n                }\n            }\n            this.requestQueue.state = I.idle;\n        }, this.processRequest = (e)=>{\n            const { topic: s, payload: t } = e, i = t.method;\n            switch(i){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeRequest(s, t);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleRequest(s, t);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateRequest(s, t);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendRequest(s, t);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingRequest(s, t);\n                case \"wc_sessionDelete\":\n                    return this.onSessionDeleteRequest(s, t);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequest(s, t);\n                case \"wc_sessionEvent\":\n                    return this.onSessionEventRequest(s, t);\n                default:\n                    return this.client.logger.info(\"Unsupported request method \".concat(i));\n            }\n        }, this.onRelayEventResponse = async (e)=>{\n            const { topic: s, payload: t } = e, i = (await this.client.core.history.get(s, t.id)).request.method;\n            switch(i){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(s, t);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(s, t);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(s, t);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(s, t);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(s, t);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(s, t);\n                default:\n                    return this.client.logger.info(\"Unsupported response method \".concat(i));\n            }\n        }, this.onRelayEventUnknownPayload = (e)=>{\n            const { topic: s } = e, { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"Decoded payload on topic \".concat(s, \" is not identifiable as a JSON-RPC request or a response.\"));\n            throw new Error(t);\n        }, this.onSessionProposeRequest = async (e, s)=>{\n            const { params: t, id: i } = s;\n            try {\n                this.isValidConnect(g({}, s.params));\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES), o = g({\n                    id: i,\n                    pairingTopic: e,\n                    expiry: n\n                }, t);\n                await this.setProposal(i, o);\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(s)), c = await this.getVerifyContext(a, o.proposer.metadata);\n                this.client.events.emit(\"session_proposal\", {\n                    id: i,\n                    params: o,\n                    verifyContext: c\n                });\n            } catch (n) {\n                await this.sendError(i, e, n), this.client.logger.error(n);\n            }\n        }, this.onSessionProposeResponse = async (e, s)=>{\n            const { id: t } = s;\n            if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s)) {\n                const { result: i } = s;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: i\n                });\n                const n = this.client.proposal.get(t);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: n\n                });\n                const o = n.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: o\n                });\n                const a = i.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: a\n                });\n                const c = await this.client.core.crypto.generateSharedKey(o, a);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    sessionTopic: c\n                });\n                const p = await this.client.core.relayer.subscribe(c);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: p\n                }), await this.client.core.pairing.activate({\n                    topic: e\n                });\n            } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && (await this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), {\n                error: s.error\n            }));\n        }, this.onSessionSettleRequest = async (e, s)=>{\n            const { id: t, params: i } = s;\n            try {\n                this.isValidSessionSettleRequest(i);\n                const { relay: n, controller: o, expiry: a, namespaces: c, requiredNamespaces: p, optionalNamespaces: d, sessionProperties: h, pairingTopic: R } = s.params, w = g({\n                    topic: e,\n                    relay: n,\n                    expiry: a,\n                    namespaces: c,\n                    acknowledged: !0,\n                    pairingTopic: R,\n                    requiredNamespaces: p,\n                    optionalNamespaces: d,\n                    controller: o.publicKey,\n                    self: {\n                        publicKey: \"\",\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: o.publicKey,\n                        metadata: o.metadata\n                    }\n                }, h && {\n                    sessionProperties: h\n                });\n                await this.sendResult({\n                    id: s.id,\n                    topic: e,\n                    result: !0\n                }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), {\n                    session: w\n                }), this.cleanupDuplicatePairings(w);\n            } catch (n) {\n                await this.sendError(t, e, n), this.client.logger.error(n);\n            }\n        }, this.onSessionSettleResponse = async (e, s)=>{\n            const { id: t } = s;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? (await this.client.session.update(e, {\n                acknowledged: !0\n            }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", t), {})) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && (await this.client.session.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", t), {\n                error: s.error\n            }));\n        }, this.onSessionUpdateRequest = async (e, s)=>{\n            const { params: t, id: i } = s;\n            try {\n                const n = \"\".concat(e, \"_session_update\"), o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(n);\n                if (o && this.isRequestOutOfSync(o, i)) {\n                    this.client.logger.info(\"Discarding out of sync request - \".concat(i));\n                    return;\n                }\n                this.isValidUpdate(g({\n                    topic: e\n                }, t)), await this.client.session.update(e, {\n                    namespaces: t.namespaces\n                }), await this.sendResult({\n                    id: i,\n                    topic: e,\n                    result: !0\n                }), this.client.events.emit(\"session_update\", {\n                    id: i,\n                    topic: e,\n                    params: t\n                }), _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(n, i);\n            } catch (n) {\n                await this.sendError(i, e, n), this.client.logger.error(n);\n            }\n        }, this.isRequestOutOfSync = (e, s)=>parseInt(s.toString().slice(0, -3)) <= parseInt(e.toString().slice(0, -3)), this.onSessionUpdateResponse = (e, s)=>{\n            const { id: t } = s;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", t), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", t), {\n                error: s.error\n            });\n        }, this.onSessionExtendRequest = async (e, s)=>{\n            const { id: t } = s;\n            try {\n                this.isValidExtend({\n                    topic: e\n                }), await this.setExpiry(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(A)), await this.sendResult({\n                    id: t,\n                    topic: e,\n                    result: !0\n                }), this.client.events.emit(\"session_extend\", {\n                    id: t,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError(t, e, i), this.client.logger.error(i);\n            }\n        }, this.onSessionExtendResponse = (e, s)=>{\n            const { id: t } = s;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", t), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", t), {\n                error: s.error\n            });\n        }, this.onSessionPingRequest = async (e, s)=>{\n            const { id: t } = s;\n            try {\n                this.isValidPing({\n                    topic: e\n                }), await this.sendResult({\n                    id: t,\n                    topic: e,\n                    result: !0\n                }), this.client.events.emit(\"session_ping\", {\n                    id: t,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError(t, e, i), this.client.logger.error(i);\n            }\n        }, this.onSessionPingResponse = (e, s)=>{\n            const { id: t } = s;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", t), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", t), {\n                    error: s.error\n                });\n            }, 500);\n        }, this.onSessionDeleteRequest = async (e, s)=>{\n            const { id: t } = s;\n            try {\n                this.isValidDisconnect({\n                    topic: e,\n                    reason: s.params\n                }), await Promise.all([\n                    new Promise((i)=>{\n                        this.client.core.relayer.once(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.publish, async ()=>{\n                            i(await this.deleteSession(e));\n                        });\n                    }),\n                    this.sendResult({\n                        id: t,\n                        topic: e,\n                        result: !0\n                    })\n                ]), this.client.events.emit(\"session_delete\", {\n                    id: t,\n                    topic: e\n                });\n            } catch (i) {\n                this.client.logger.error(i);\n            }\n        }, this.onSessionRequest = async (e, s)=>{\n            const { id: t, params: i } = s;\n            try {\n                this.isValidRequest(g({\n                    topic: e\n                }, i));\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionRequest\", i, t))), o = this.client.session.get(e), a = await this.getVerifyContext(n, o.peer.metadata), c = {\n                    id: t,\n                    topic: e,\n                    params: i,\n                    verifyContext: a\n                };\n                await this.setPendingSessionRequest(c), this.addSessionRequestToSessionRequestQueue(c), this.processSessionRequestQueue();\n            } catch (n) {\n                await this.sendError(t, e, n), this.client.logger.error(n);\n            }\n        }, this.onSessionRequestResponse = (e, s)=>{\n            const { id: t } = s;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", t), {\n                result: s.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", t), {\n                error: s.error\n            });\n        }, this.onSessionEventRequest = async (e, s)=>{\n            const { id: t, params: i } = s;\n            try {\n                const n = \"\".concat(e, \"_session_event_\").concat(i.event.name), o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(n);\n                if (o && this.isRequestOutOfSync(o, t)) {\n                    this.client.logger.info(\"Discarding out of sync request - \".concat(t));\n                    return;\n                }\n                this.isValidEmit(g({\n                    topic: e\n                }, i)), this.client.events.emit(\"session_event\", {\n                    id: t,\n                    topic: e,\n                    params: i\n                }), _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(n, t);\n            } catch (n) {\n                await this.sendError(t, e, n), this.client.logger.error(n);\n            }\n        }, this.addSessionRequestToSessionRequestQueue = (e)=>{\n            this.sessionRequestQueue.queue.push(e);\n        }, this.cleanupAfterResponse = (e)=>{\n            this.deletePendingSessionRequest(e.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = I.idle, this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.toMiliseconds)(this.requestQueueDelay));\n        }, this.processSessionRequestQueue = ()=>{\n            if (this.sessionRequestQueue.state === I.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            const e = this.sessionRequestQueue.queue[0];\n            if (!e) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = I.active, this.client.events.emit(\"session_request\", e);\n            } catch (s) {\n                this.client.logger.error(s);\n            }\n        }, this.onPairingCreated = (e)=>{\n            if (e.active) return;\n            const s = this.client.proposal.getAll().find((t)=>t.pairingTopic === e.topic);\n            s && this.onSessionProposeRequest(e.topic, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionPropose\", {\n                requiredNamespaces: s.requiredNamespaces,\n                optionalNamespaces: s.optionalNamespaces,\n                relays: s.relays,\n                proposer: s.proposer,\n                sessionProperties: s.sessionProperties\n            }, s.id));\n        }, this.isValidConnect = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"connect() params: \".concat(JSON.stringify(e)));\n                throw new Error(a);\n            }\n            const { pairingTopic: s, requiredNamespaces: t, optionalNamespaces: i, sessionProperties: n, relays: o } = e;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(s) || await this.isValidPairingTopic(s), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelays)(o, !0)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"connect() relays: \".concat(o));\n                throw new Error(a);\n            }\n            !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(t) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(t) !== 0 && this.validateNamespaces(t, \"requiredNamespaces\"), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(i) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(i) !== 0 && this.validateNamespaces(i, \"optionalNamespaces\"), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(n) || this.validateSessionProps(n, \"sessionProperties\");\n        }, this.validateNamespaces = (e, s)=>{\n            const t = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequiredNamespaces)(e, \"connect()\", s);\n            if (t) throw new Error(t.message);\n        }, this.isValidApprove = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"approve() params: \".concat(e)).message);\n            const { id: s, namespaces: t, relayProtocol: i, sessionProperties: n } = e;\n            await this.isValidProposalId(s);\n            const o = this.client.proposal.get(s), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(t, \"approve()\");\n            if (a) throw new Error(a.message);\n            const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(o.requiredNamespaces, t, \"approve()\");\n            if (c) throw new Error(c.message);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !0)) {\n                const { message: p } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"approve() relayProtocol: \".concat(i));\n                throw new Error(p);\n            }\n            (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(n) || this.validateSessionProps(n, \"sessionProperties\");\n        }, this.isValidReject = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"reject() params: \".concat(e));\n                throw new Error(i);\n            }\n            const { id: s, reason: t } = e;\n            if (await this.isValidProposalId(s), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidErrorReason)(t)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"reject() reason: \".concat(JSON.stringify(t)));\n                throw new Error(i);\n            }\n        }, this.isValidSessionSettleRequest = (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() params: \".concat(e));\n                throw new Error(c);\n            }\n            const { relay: s, controller: t, namespaces: i, expiry: n } = e;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelay)(s)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(c);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidController)(t, \"onSessionSettleRequest()\");\n            if (o) throw new Error(o.message);\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(i, \"onSessionSettleRequest()\");\n            if (a) throw new Error(a.message);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(n)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(c);\n            }\n        }, this.isValidUpdate = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"update() params: \".concat(e));\n                throw new Error(a);\n            }\n            const { topic: s, namespaces: t } = e;\n            await this.isValidSessionTopic(s);\n            const i = this.client.session.get(s), n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(t, \"update()\");\n            if (n) throw new Error(n.message);\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(i.requiredNamespaces, t, \"update()\");\n            if (o) throw new Error(o.message);\n        }, this.isValidExtend = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"extend() params: \".concat(e));\n                throw new Error(t);\n            }\n            const { topic: s } = e;\n            await this.isValidSessionTopic(s);\n        }, this.isValidRequest = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() params: \".concat(e));\n                throw new Error(a);\n            }\n            const { topic: s, request: t, chainId: i, expiry: n } = e;\n            await this.isValidSessionTopic(s);\n            const { namespaces: o } = this.client.session.get(s);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(o, i)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() chainId: \".concat(i));\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequest)(t)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() \".concat(JSON.stringify(t)));\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesRequest)(o, i, t.method)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() method: \".concat(t.method));\n                throw new Error(a);\n            }\n            if (n && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequestExpiry)(n, U)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() expiry: \".concat(n, \". Expiry must be a number (in seconds) between \").concat(U.min, \" and \").concat(U.max));\n                throw new Error(a);\n            }\n        }, this.isValidRespond = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"respond() params: \".concat(e));\n                throw new Error(i);\n            }\n            const { topic: s, response: t } = e;\n            if (await this.isValidSessionTopic(s), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidResponse)(t)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"respond() response: \".concat(JSON.stringify(t)));\n                throw new Error(i);\n            }\n        }, this.isValidPing = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"ping() params: \".concat(e));\n                throw new Error(t);\n            }\n            const { topic: s } = e;\n            await this.isValidSessionOrPairingTopic(s);\n        }, this.isValidEmit = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() params: \".concat(e));\n                throw new Error(o);\n            }\n            const { topic: s, event: t, chainId: i } = e;\n            await this.isValidSessionTopic(s);\n            const { namespaces: n } = this.client.session.get(s);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(n, i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() chainId: \".concat(i));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidEvent)(t)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(t)));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesEvent)(n, i, t.name)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(t)));\n                throw new Error(o);\n            }\n        }, this.isValidDisconnect = async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(e));\n                throw new Error(t);\n            }\n            const { topic: s } = e;\n            await this.isValidSessionOrPairingTopic(s);\n        }, this.getVerifyContext = async (e, s)=>{\n            const t = {\n                verified: {\n                    verifyUrl: s.verifyUrl || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.VERIFY_SERVER,\n                    validation: \"UNKNOWN\",\n                    origin: s.url || \"\"\n                }\n            };\n            try {\n                const i = await this.client.core.verify.resolve({\n                    attestationId: e,\n                    verifyUrl: s.verifyUrl\n                });\n                i && (t.verified.origin = i.origin, t.verified.isScam = i.isScam, t.verified.validation = i.origin === new URL(s.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (i) {\n                this.client.logger.info(i);\n            }\n            return this.client.logger.info(\"Verify context: \".concat(JSON.stringify(t))), t;\n        }, this.validateSessionProps = (e, s)=>{\n            Object.values(e).forEach((t)=>{\n                if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(t, !1)) {\n                    const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"\".concat(s, \" must be in Record<string, string> format. Received: \").concat(JSON.stringify(t)));\n                    throw new Error(i);\n                }\n            });\n        };\n    }\n}\nclass ds extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(r, e){\n        super(r, e, ne, G), this.core = r, this.logger = e;\n    }\n}\nclass us extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(r, e){\n        super(r, e, ae, G), this.core = r, this.logger = e;\n    }\n}\nclass gs extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(r, e){\n        super(r, e, le, G, (s)=>s.id), this.core = r, this.logger = e;\n    }\n}\nclass Q extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.ISignClient {\n    static async init(r) {\n        const e = new Q(r);\n        return await e.initialize(), e;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getLoggerContext)(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.core.verify.init({\n                verifyUrl: this.metadata.verifyUrl\n            }), this.logger.info(\"SignClient Initialization Success\");\n        } catch (r) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(r.message), r;\n        }\n    }\n    constructor(r){\n        super(r), this.protocol = X, this.version = F, this.name = M.name, this.events = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, this.on = (s, t)=>this.events.on(s, t), this.once = (s, t)=>this.events.once(s, t), this.off = (s, t)=>this.events.off(s, t), this.removeListener = (s, t)=>this.events.removeListener(s, t), this.removeAllListeners = (s)=>this.events.removeAllListeners(s), this.connect = async (s)=>{\n            try {\n                return await this.engine.connect(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.pair = async (s)=>{\n            try {\n                return await this.engine.pair(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.approve = async (s)=>{\n            try {\n                return await this.engine.approve(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.reject = async (s)=>{\n            try {\n                return await this.engine.reject(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.update = async (s)=>{\n            try {\n                return await this.engine.update(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.extend = async (s)=>{\n            try {\n                return await this.engine.extend(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.request = async (s)=>{\n            try {\n                return await this.engine.request(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.respond = async (s)=>{\n            try {\n                return await this.engine.respond(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.ping = async (s)=>{\n            try {\n                return await this.engine.ping(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.emit = async (s)=>{\n            try {\n                return await this.engine.emit(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.disconnect = async (s)=>{\n            try {\n                return await this.engine.disconnect(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.find = (s)=>{\n            try {\n                return this.engine.find(s);\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }, this.getPendingSessionRequests = ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.name = (r === null || r === void 0 ? void 0 : r.name) || M.name, this.metadata = (r === null || r === void 0 ? void 0 : r.metadata) || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getAppMetadata)();\n        const e = typeof (r === null || r === void 0 ? void 0 : r.logger) < \"u\" && typeof (r === null || r === void 0 ? void 0 : r.logger) != \"string\" ? r.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: (r === null || r === void 0 ? void 0 : r.logger) || M.logger\n        }));\n        this.core = (r === null || r === void 0 ? void 0 : r.core) || new _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Core(r), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.generateChildLogger)(e, this.name), this.session = new us(this.core, this.logger), this.proposal = new ds(this.core, this.logger), this.pendingRequest = new gs(this.core, this.logger), this.engine = new hs(this);\n    }\n}\nconst ms = Q;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0s7QUFBNkg7QUFBa0U7QUFBNnlCO0FBQTJDO0FBQTZKO0FBQStOO0FBQUEsTUFBTWlJLElBQUUsTUFBS0MsSUFBRSxHQUFFQyxJQUFFLFVBQVNDLElBQUUsR0FBUUYsT0FBTEQsR0FBRSxLQUFRRSxPQUFMRCxHQUFFLEtBQUssT0FBRkMsR0FBRSxNQUFHRSxJQUFFO0lBQUNDLE1BQUtIO0lBQUVJLFFBQU87SUFBUUMsWUFBVyxDQUFDO0lBQUVDLFVBQVM7QUFBK0IsR0FBRUMsS0FBRztJQUFDQyxrQkFBaUI7SUFBbUJDLGdCQUFlO0lBQWlCQyxnQkFBZTtJQUFpQkMsY0FBYTtJQUFlQyxnQkFBZTtJQUFpQkMsZ0JBQWU7SUFBaUJDLGlCQUFnQjtJQUFrQkMsc0JBQXFCO0lBQXVCQyxlQUFjO0lBQWdCQyxpQkFBZ0I7QUFBaUIsR0FBRUMsS0FBRztJQUFDQyxVQUFTO0FBQVUsR0FBRUMsSUFBRSxpQ0FBZ0NDLEtBQUc7SUFBQ0MsU0FBUTtJQUFrQkMsU0FBUTtJQUFrQkMsU0FBUTtJQUFrQkMsTUFBSztBQUFjLEdBQUVDLEtBQUcsV0FBVUMsS0FBRyxPQUFNQyxLQUFHLFlBQVdDLEtBQUc1RCw0REFBRUEsRUFBQzZELEtBQUcsb0JBQW1CQyxLQUFHLFdBQVVDLElBQUU3RCwyREFBRUEsRUFBQzhELEtBQUcsVUFBU0MsSUFBRTtJQUFDQyxtQkFBa0I7UUFBQ0MsS0FBSTtZQUFDQyxLQUFJaEUsNkRBQUNBO1lBQUNpRSxRQUFPLENBQUM7WUFBRUMsS0FBSTtRQUFJO1FBQUVDLEtBQUk7WUFBQ0gsS0FBSWhFLDZEQUFDQTtZQUFDaUUsUUFBTyxDQUFDO1lBQUVDLEtBQUk7UUFBSTtJQUFDO0lBQUVFLGtCQUFpQjtRQUFDTCxLQUFJ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RUFBR2tHLFFBQVEsS0FBRTlNLG9FQUFFQTtRQUFHLE1BQU02RyxJQUFFLFFBQU9ELGNBQUFBLHdCQUFBQSxFQUFHcEUsTUFBTSxJQUFDLE9BQUssUUFBT29FLGNBQUFBLHdCQUFBQSxFQUFHcEUsTUFBTSxLQUFFLFdBQVNvRSxFQUFFcEUsTUFBTSxHQUFDeEgsMkRBQUVBLENBQUNFLDhFQUFFQSxDQUFDO1lBQUN3YSxPQUFNOU8sQ0FBQUEsY0FBQUEsd0JBQUFBLEVBQUdwRSxNQUFNLEtBQUVGLEVBQUVFLE1BQU07UUFBQTtRQUFJLElBQUksQ0FBQ21GLElBQUksR0FBQ2YsQ0FBQUEsY0FBQUEsd0JBQUFBLEVBQUdlLElBQUksS0FBRSxJQUFJN00scURBQUVBLENBQUM4TCxJQUFHLElBQUksQ0FBQ3BFLE1BQU0sR0FBQ3BILDBFQUFFQSxDQUFDeUwsR0FBRSxJQUFJLENBQUN0RSxJQUFJLEdBQUUsSUFBSSxDQUFDbUgsT0FBTyxHQUFDLElBQUlxTCxHQUFHLElBQUksQ0FBQ3BOLElBQUksRUFBQyxJQUFJLENBQUNuRixNQUFNLEdBQUUsSUFBSSxDQUFDa0ksUUFBUSxHQUFDLElBQUlvSyxHQUFHLElBQUksQ0FBQ25OLElBQUksRUFBQyxJQUFJLENBQUNuRixNQUFNLEdBQUUsSUFBSSxDQUFDK0csY0FBYyxHQUFDLElBQUl5TCxHQUFHLElBQUksQ0FBQ3JOLElBQUksRUFBQyxJQUFJLENBQUNuRixNQUFNLEdBQUUsSUFBSSxDQUFDNlMsTUFBTSxHQUFDLElBQUloTyxHQUFHLElBQUk7SUFBQztBQUEraUI7QUFBQyxNQUFNc08sS0FBR1Y7QUFBaW1CLENBQ3A5aEMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9zaWduLWNsaWVudC9kaXN0L2luZGV4LmVzLmpzP2ViMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e1JFTEFZRVJfREVGQVVMVF9QUk9UT0NPTCBhcyBnZSxSRUxBWUVSX0VWRU5UUyBhcyBaLFZFUklGWV9TRVJWRVIgYXMgbWUsRVhQSVJFUl9FVkVOVFMgYXMgd2UsUEFJUklOR19FVkVOVFMgYXMgeWUsU3RvcmUgYXMgayxDb3JlIGFzIFNlfWZyb21cIkB3YWxsZXRjb25uZWN0L2NvcmVcIjtpbXBvcnR7cGlubyBhcyBFZSxnZXREZWZhdWx0TG9nZ2VyT3B0aW9ucyBhcyBSZSxnZW5lcmF0ZUNoaWxkTG9nZ2VyIGFzIEllLGdldExvZ2dlckNvbnRleHQgYXMgX2V9ZnJvbVwiQHdhbGxldGNvbm5lY3QvbG9nZ2VyXCI7aW1wb3J0e0lFbmdpbmUgYXMgTmUsSVNpZ25DbGllbnQgYXMgcWV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdHlwZXNcIjtpbXBvcnR7VFlQRV8xIGFzIGZlLGNyZWF0ZURlbGF5ZWRQcm9taXNlIGFzIHgsZW5naW5lRXZlbnQgYXMgdSxnZXRJbnRlcm5hbEVycm9yIGFzIGwsY2FsY0V4cGlyeSBhcyBfLGlzVmFsaWRPYmplY3QgYXMgeixnZXRSZXF1aXJlZE5hbWVzcGFjZXNGcm9tTmFtZXNwYWNlcyBhcyB2ZSxnZXRTZGtFcnJvciBhcyBOLGdldERlZXBMaW5rIGFzIFBlLGhhbmRsZURlZXBsaW5rUmVkaXJlY3QgYXMgT2UsaXNTZXNzaW9uQ29tcGF0aWJsZSBhcyBWZSxpc0Jyb3dzZXIgYXMgVGUsaGFzaE1lc3NhZ2UgYXMgWSxpc0V4cGlyZWQgYXMgUCxNZW1vcnlTdG9yZSBhcyAkLGlzVmFsaWRQYXJhbXMgYXMgRSxpc1VuZGVmaW5lZCBhcyBELGlzVmFsaWRSZWxheXMgYXMgeGUsaXNWYWxpZFJlcXVpcmVkTmFtZXNwYWNlcyBhcyBEZSxpc1ZhbGlkTmFtZXNwYWNlcyBhcyBqLGlzQ29uZm9ybWluZ05hbWVzcGFjZXMgYXMgZWUsaXNWYWxpZFN0cmluZyBhcyBDLGlzVmFsaWRFcnJvclJlYXNvbiBhcyBDZSxpc1ZhbGlkUmVsYXkgYXMgQWUsaXNWYWxpZENvbnRyb2xsZXIgYXMgYmUsaXNWYWxpZE5hbWVzcGFjZXNDaGFpbklkIGFzIHNlLGlzVmFsaWRSZXF1ZXN0IGFzIExlLGlzVmFsaWROYW1lc3BhY2VzUmVxdWVzdCBhcyAkZSxpc1ZhbGlkUmVxdWVzdEV4cGlyeSBhcyBHZSxpc1ZhbGlkUmVzcG9uc2UgYXMgTWUsaXNWYWxpZEV2ZW50IGFzIFVlLGlzVmFsaWROYW1lc3BhY2VzRXZlbnQgYXMgUWUscGFyc2VFeHBpcmVyVGFyZ2V0IGFzIEtlLGlzVmFsaWRJZCBhcyBrZSxnZXRBcHBNZXRhZGF0YSBhcyB6ZX1mcm9tXCJAd2FsbGV0Y29ubmVjdC91dGlsc1wiO2ltcG9ydCBZZSx7RXZlbnRFbWl0dGVyIGFzIGplfWZyb21cImV2ZW50c1wiO2ltcG9ydHtUSElSVFlfREFZUyBhcyBKZSxTRVZFTl9EQVlTIGFzIHRlLEZJVkVfTUlOVVRFUyBhcyB5LE9ORV9EQVkgYXMgTyxUSElSVFlfU0VDT05EUyBhcyBpZSxPTkVfU0VDT05EIGFzIFhlLHRvTWlsaXNlY29uZHMgYXMgcmV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvdGltZVwiO2ltcG9ydHtwYXlsb2FkSWQgYXMgRmUsaXNKc29uUnBjUmVzdWx0IGFzIHEsaXNKc29uUnBjRXJyb3IgYXMgZixmb3JtYXRKc29uUnBjUmVxdWVzdCBhcyBKLGZvcm1hdEpzb25ScGNSZXN1bHQgYXMgSGUsZm9ybWF0SnNvblJwY0Vycm9yIGFzIFdlLGlzSnNvblJwY1JlcXVlc3QgYXMgQmUsaXNKc29uUnBjUmVzcG9uc2UgYXMgWmV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlsc1wiO2NvbnN0IFg9XCJ3Y1wiLEY9MixIPVwiY2xpZW50XCIsRz1gJHtYfUAke0Z9OiR7SH06YCxNPXtuYW1lOkgsbG9nZ2VyOlwiZXJyb3JcIixjb250cm9sbGVyOiExLHJlbGF5VXJsOlwid3NzOi8vcmVsYXkud2FsbGV0Y29ubmVjdC5jb21cIn0sZXM9e3Nlc3Npb25fcHJvcG9zYWw6XCJzZXNzaW9uX3Byb3Bvc2FsXCIsc2Vzc2lvbl91cGRhdGU6XCJzZXNzaW9uX3VwZGF0ZVwiLHNlc3Npb25fZXh0ZW5kOlwic2Vzc2lvbl9leHRlbmRcIixzZXNzaW9uX3Bpbmc6XCJzZXNzaW9uX3BpbmdcIixzZXNzaW9uX2RlbGV0ZTpcInNlc3Npb25fZGVsZXRlXCIsc2Vzc2lvbl9leHBpcmU6XCJzZXNzaW9uX2V4cGlyZVwiLHNlc3Npb25fcmVxdWVzdDpcInNlc3Npb25fcmVxdWVzdFwiLHNlc3Npb25fcmVxdWVzdF9zZW50Olwic2Vzc2lvbl9yZXF1ZXN0X3NlbnRcIixzZXNzaW9uX2V2ZW50Olwic2Vzc2lvbl9ldmVudFwiLHByb3Bvc2FsX2V4cGlyZTpcInByb3Bvc2FsX2V4cGlyZVwifSxzcz17ZGF0YWJhc2U6XCI6bWVtb3J5OlwifSxXPVwiV0FMTEVUQ09OTkVDVF9ERUVQTElOS19DSE9JQ0VcIix0cz17Y3JlYXRlZDpcImhpc3RvcnlfY3JlYXRlZFwiLHVwZGF0ZWQ6XCJoaXN0b3J5X3VwZGF0ZWRcIixkZWxldGVkOlwiaGlzdG9yeV9kZWxldGVkXCIsc3luYzpcImhpc3Rvcnlfc3luY1wifSxpcz1cImhpc3RvcnlcIixycz1cIjAuM1wiLG5lPVwicHJvcG9zYWxcIixucz1KZSxvZT1cIlByb3Bvc2FsIGV4cGlyZWRcIixhZT1cInNlc3Npb25cIixBPXRlLGNlPVwiZW5naW5lXCIsVj17d2Nfc2Vzc2lvblByb3Bvc2U6e3JlcTp7dHRsOnkscHJvbXB0OiEwLHRhZzoxMTAwfSxyZXM6e3R0bDp5LHByb21wdDohMSx0YWc6MTEwMX19LHdjX3Nlc3Npb25TZXR0bGU6e3JlcTp7dHRsOnkscHJvbXB0OiExLHRhZzoxMTAyfSxyZXM6e3R0bDp5LHByb21wdDohMSx0YWc6MTEwM319LHdjX3Nlc3Npb25VcGRhdGU6e3JlcTp7dHRsOk8scHJvbXB0OiExLHRhZzoxMTA0fSxyZXM6e3R0bDpPLHByb21wdDohMSx0YWc6MTEwNX19LHdjX3Nlc3Npb25FeHRlbmQ6e3JlcTp7dHRsOk8scHJvbXB0OiExLHRhZzoxMTA2fSxyZXM6e3R0bDpPLHByb21wdDohMSx0YWc6MTEwN319LHdjX3Nlc3Npb25SZXF1ZXN0OntyZXE6e3R0bDp5LHByb21wdDohMCx0YWc6MTEwOH0scmVzOnt0dGw6eSxwcm9tcHQ6ITEsdGFnOjExMDl9fSx3Y19zZXNzaW9uRXZlbnQ6e3JlcTp7dHRsOnkscHJvbXB0OiEwLHRhZzoxMTEwfSxyZXM6e3R0bDp5LHByb21wdDohMSx0YWc6MTExMX19LHdjX3Nlc3Npb25EZWxldGU6e3JlcTp7dHRsOk8scHJvbXB0OiExLHRhZzoxMTEyfSxyZXM6e3R0bDpPLHByb21wdDohMSx0YWc6MTExM319LHdjX3Nlc3Npb25QaW5nOntyZXE6e3R0bDppZSxwcm9tcHQ6ITEsdGFnOjExMTR9LHJlczp7dHRsOmllLHByb21wdDohMSx0YWc6MTExNX19fSxVPXttaW46eSxtYXg6dGV9LEk9e2lkbGU6XCJJRExFXCIsYWN0aXZlOlwiQUNUSVZFXCJ9LGxlPVwicmVxdWVzdFwiLHBlPVtcIndjX3Nlc3Npb25Qcm9wb3NlXCIsXCJ3Y19zZXNzaW9uUmVxdWVzdFwiLFwid2NfYXV0aFJlcXVlc3RcIl07dmFyIG9zPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxhcz1PYmplY3QuZGVmaW5lUHJvcGVydGllcyxjcz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyxoZT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLGxzPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkscHM9T2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxkZT0obSxyLGUpPT5yIGluIG0/b3MobSxyLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTplfSk6bVtyXT1lLGc9KG0scik9Pntmb3IodmFyIGUgaW4gcnx8KHI9e30pKWxzLmNhbGwocixlKSYmZGUobSxlLHJbZV0pO2lmKGhlKWZvcih2YXIgZSBvZiBoZShyKSlwcy5jYWxsKHIsZSkmJmRlKG0sZSxyW2VdKTtyZXR1cm4gbX0sYj0obSxyKT0+YXMobSxjcyhyKSk7Y2xhc3MgaHMgZXh0ZW5kcyBOZXtjb25zdHJ1Y3RvcihyKXtzdXBlcihyKSx0aGlzLm5hbWU9Y2UsdGhpcy5ldmVudHM9bmV3IFllLHRoaXMuaW5pdGlhbGl6ZWQ9ITEsdGhpcy5pZ25vcmVkUGF5bG9hZFR5cGVzPVtmZV0sdGhpcy5yZXF1ZXN0UXVldWU9e3N0YXRlOkkuaWRsZSxxdWV1ZTpbXX0sdGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlPXtzdGF0ZTpJLmlkbGUscXVldWU6W119LHRoaXMucmVxdWVzdFF1ZXVlRGVsYXk9WGUsdGhpcy5pbml0PWFzeW5jKCk9Pnt0aGlzLmluaXRpYWxpemVkfHwoYXdhaXQgdGhpcy5jbGVhbnVwKCksdGhpcy5yZWdpc3RlclJlbGF5ZXJFdmVudHMoKSx0aGlzLnJlZ2lzdGVyRXhwaXJlckV2ZW50cygpLHRoaXMucmVnaXN0ZXJQYWlyaW5nRXZlbnRzKCksdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLnJlZ2lzdGVyKHttZXRob2RzOk9iamVjdC5rZXlzKFYpfSksdGhpcy5pbml0aWFsaXplZD0hMCxzZXRUaW1lb3V0KCgpPT57dGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlLnF1ZXVlPXRoaXMuZ2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0cygpLHRoaXMucHJvY2Vzc1Nlc3Npb25SZXF1ZXN0UXVldWUoKX0scmUodGhpcy5yZXF1ZXN0UXVldWVEZWxheSkpKX0sdGhpcy5jb25uZWN0PWFzeW5jIGU9Pnthd2FpdCB0aGlzLmlzSW5pdGlhbGl6ZWQoKTtjb25zdCBzPWIoZyh7fSxlKSx7cmVxdWlyZWROYW1lc3BhY2VzOmUucmVxdWlyZWROYW1lc3BhY2VzfHx7fSxvcHRpb25hbE5hbWVzcGFjZXM6ZS5vcHRpb25hbE5hbWVzcGFjZXN8fHt9fSk7YXdhaXQgdGhpcy5pc1ZhbGlkQ29ubmVjdChzKTtjb25zdHtwYWlyaW5nVG9waWM6dCxyZXF1aXJlZE5hbWVzcGFjZXM6aSxvcHRpb25hbE5hbWVzcGFjZXM6bixzZXNzaW9uUHJvcGVydGllczpvLHJlbGF5czphfT1zO2xldCBjPXQscCxkPSExO2lmKGMmJihkPXRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5nZXQoYykuYWN0aXZlKSwhY3x8IWQpe2NvbnN0e3RvcGljOnYsdXJpOlN9PWF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5jcmVhdGUoKTtjPXYscD1TfWNvbnN0IGg9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZ2VuZXJhdGVLZXlQYWlyKCksUj1nKHtyZXF1aXJlZE5hbWVzcGFjZXM6aSxvcHRpb25hbE5hbWVzcGFjZXM6bixyZWxheXM6YT8/W3twcm90b2NvbDpnZX1dLHByb3Bvc2VyOntwdWJsaWNLZXk6aCxtZXRhZGF0YTp0aGlzLmNsaWVudC5tZXRhZGF0YX19LG8mJntzZXNzaW9uUHJvcGVydGllczpvfSkse3JlamVjdDp3LHJlc29sdmU6VCxkb25lOkt9PXgoeSxvZSk7aWYodGhpcy5ldmVudHMub25jZSh1KFwic2Vzc2lvbl9jb25uZWN0XCIpLGFzeW5jKHtlcnJvcjp2LHNlc3Npb246U30pPT57aWYodil3KHYpO2Vsc2UgaWYoUyl7Uy5zZWxmLnB1YmxpY0tleT1oO2NvbnN0IEI9YihnKHt9LFMpLHtyZXF1aXJlZE5hbWVzcGFjZXM6Uy5yZXF1aXJlZE5hbWVzcGFjZXMsb3B0aW9uYWxOYW1lc3BhY2VzOlMub3B0aW9uYWxOYW1lc3BhY2VzfSk7YXdhaXQgdGhpcy5jbGllbnQuc2Vzc2lvbi5zZXQoUy50b3BpYyxCKSxhd2FpdCB0aGlzLnNldEV4cGlyeShTLnRvcGljLFMuZXhwaXJ5KSxjJiZhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcudXBkYXRlTWV0YWRhdGEoe3RvcGljOmMsbWV0YWRhdGE6Uy5wZWVyLm1ldGFkYXRhfSksVChCKX19KSwhYyl7Y29uc3R7bWVzc2FnZTp2fT1sKFwiTk9fTUFUQ0hJTkdfS0VZXCIsYGNvbm5lY3QoKSBwYWlyaW5nIHRvcGljOiAke2N9YCk7dGhyb3cgbmV3IEVycm9yKHYpfWNvbnN0IEw9YXdhaXQgdGhpcy5zZW5kUmVxdWVzdCh7dG9waWM6YyxtZXRob2Q6XCJ3Y19zZXNzaW9uUHJvcG9zZVwiLHBhcmFtczpSfSksdWU9Xyh5KTtyZXR1cm4gYXdhaXQgdGhpcy5zZXRQcm9wb3NhbChMLGcoe2lkOkwsZXhwaXJ5OnVlfSxSKSkse3VyaTpwLGFwcHJvdmFsOkt9fSx0aGlzLnBhaXI9YXN5bmMgZT0+KGF3YWl0IHRoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyKGUpKSx0aGlzLmFwcHJvdmU9YXN5bmMgZT0+e2F3YWl0IHRoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZEFwcHJvdmUoZSk7Y29uc3R7aWQ6cyxyZWxheVByb3RvY29sOnQsbmFtZXNwYWNlczppLHNlc3Npb25Qcm9wZXJ0aWVzOm59PWUsbz10aGlzLmNsaWVudC5wcm9wb3NhbC5nZXQocyk7bGV0e3BhaXJpbmdUb3BpYzphLHByb3Bvc2VyOmMscmVxdWlyZWROYW1lc3BhY2VzOnAsb3B0aW9uYWxOYW1lc3BhY2VzOmR9PW87YT1hfHxcIlwiLHoocCl8fChwPXZlKGksXCJhcHByb3ZlKClcIikpO2NvbnN0IGg9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZ2VuZXJhdGVLZXlQYWlyKCksUj1jLnB1YmxpY0tleSx3PWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmdlbmVyYXRlU2hhcmVkS2V5KGgsUik7YSYmcyYmKGF3YWl0IHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy51cGRhdGVNZXRhZGF0YSh7dG9waWM6YSxtZXRhZGF0YTpjLm1ldGFkYXRhfSksYXdhaXQgdGhpcy5zZW5kUmVzdWx0KHtpZDpzLHRvcGljOmEscmVzdWx0OntyZWxheTp7cHJvdG9jb2w6dD8/XCJpcm5cIn0scmVzcG9uZGVyUHVibGljS2V5Omh9fSksYXdhaXQgdGhpcy5jbGllbnQucHJvcG9zYWwuZGVsZXRlKHMsTihcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuYWN0aXZhdGUoe3RvcGljOmF9KSk7Y29uc3QgVD1nKHtyZWxheTp7cHJvdG9jb2w6dD8/XCJpcm5cIn0sbmFtZXNwYWNlczppLHJlcXVpcmVkTmFtZXNwYWNlczpwLG9wdGlvbmFsTmFtZXNwYWNlczpkLHBhaXJpbmdUb3BpYzphLGNvbnRyb2xsZXI6e3B1YmxpY0tleTpoLG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfSxleHBpcnk6XyhBKX0sbiYme3Nlc3Npb25Qcm9wZXJ0aWVzOm59KTthd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIuc3Vic2NyaWJlKHcpLGF3YWl0IHRoaXMuc2VuZFJlcXVlc3Qoe3RvcGljOncsbWV0aG9kOlwid2Nfc2Vzc2lvblNldHRsZVwiLHBhcmFtczpULHRocm93T25GYWlsZWRQdWJsaXNoOiEwfSk7Y29uc3QgSz1iKGcoe30sVCkse3RvcGljOncscGFpcmluZ1RvcGljOmEsYWNrbm93bGVkZ2VkOiExLHNlbGY6VC5jb250cm9sbGVyLHBlZXI6e3B1YmxpY0tleTpjLnB1YmxpY0tleSxtZXRhZGF0YTpjLm1ldGFkYXRhfSxjb250cm9sbGVyOmh9KTtyZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuc2Vzc2lvbi5zZXQodyxLKSxhd2FpdCB0aGlzLnNldEV4cGlyeSh3LF8oQSkpLHt0b3BpYzp3LGFja25vd2xlZGdlZDooKT0+bmV3IFByb21pc2UoTD0+c2V0VGltZW91dCgoKT0+TCh0aGlzLmNsaWVudC5zZXNzaW9uLmdldCh3KSksNTAwKSl9fSx0aGlzLnJlamVjdD1hc3luYyBlPT57YXdhaXQgdGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkUmVqZWN0KGUpO2NvbnN0e2lkOnMscmVhc29uOnR9PWUse3BhaXJpbmdUb3BpYzppfT10aGlzLmNsaWVudC5wcm9wb3NhbC5nZXQocyk7aSYmKGF3YWl0IHRoaXMuc2VuZEVycm9yKHMsaSx0KSxhd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5kZWxldGUocyxOKFwiVVNFUl9ESVNDT05ORUNURURcIikpKX0sdGhpcy51cGRhdGU9YXN5bmMgZT0+e2F3YWl0IHRoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZFVwZGF0ZShlKTtjb25zdHt0b3BpYzpzLG5hbWVzcGFjZXM6dH09ZSxpPWF3YWl0IHRoaXMuc2VuZFJlcXVlc3Qoe3RvcGljOnMsbWV0aG9kOlwid2Nfc2Vzc2lvblVwZGF0ZVwiLHBhcmFtczp7bmFtZXNwYWNlczp0fX0pLHtkb25lOm4scmVzb2x2ZTpvLHJlamVjdDphfT14KCk7cmV0dXJuIHRoaXMuZXZlbnRzLm9uY2UodShcInNlc3Npb25fdXBkYXRlXCIsaSksKHtlcnJvcjpjfSk9PntjP2EoYyk6bygpfSksYXdhaXQgdGhpcy5jbGllbnQuc2Vzc2lvbi51cGRhdGUocyx7bmFtZXNwYWNlczp0fSkse2Fja25vd2xlZGdlZDpufX0sdGhpcy5leHRlbmQ9YXN5bmMgZT0+e2F3YWl0IHRoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZEV4dGVuZChlKTtjb25zdHt0b3BpYzpzfT1lLHQ9YXdhaXQgdGhpcy5zZW5kUmVxdWVzdCh7dG9waWM6cyxtZXRob2Q6XCJ3Y19zZXNzaW9uRXh0ZW5kXCIscGFyYW1zOnt9fSkse2RvbmU6aSxyZXNvbHZlOm4scmVqZWN0Om99PXgoKTtyZXR1cm4gdGhpcy5ldmVudHMub25jZSh1KFwic2Vzc2lvbl9leHRlbmRcIix0KSwoe2Vycm9yOmF9KT0+e2E/byhhKTpuKCl9KSxhd2FpdCB0aGlzLnNldEV4cGlyeShzLF8oQSkpLHthY2tub3dsZWRnZWQ6aX19LHRoaXMucmVxdWVzdD1hc3luYyBlPT57YXdhaXQgdGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkUmVxdWVzdChlKTtjb25zdHtjaGFpbklkOnMscmVxdWVzdDp0LHRvcGljOmksZXhwaXJ5Om59PWUsbz1GZSgpLHtkb25lOmEscmVzb2x2ZTpjLHJlamVjdDpwfT14KG4sXCJSZXF1ZXN0IGV4cGlyZWQuIFBsZWFzZSB0cnkgYWdhaW4uXCIpO3JldHVybiB0aGlzLmV2ZW50cy5vbmNlKHUoXCJzZXNzaW9uX3JlcXVlc3RcIixvKSwoe2Vycm9yOmQscmVzdWx0Omh9KT0+e2Q/cChkKTpjKGgpfSksYXdhaXQgUHJvbWlzZS5hbGwoW25ldyBQcm9taXNlKGFzeW5jIGQ9Pnthd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHtjbGllbnRScGNJZDpvLHRvcGljOmksbWV0aG9kOlwid2Nfc2Vzc2lvblJlcXVlc3RcIixwYXJhbXM6e3JlcXVlc3Q6dCxjaGFpbklkOnN9LGV4cGlyeTpuLHRocm93T25GYWlsZWRQdWJsaXNoOiEwfSkuY2F0Y2goaD0+cChoKSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3JlcXVlc3Rfc2VudFwiLHt0b3BpYzppLHJlcXVlc3Q6dCxjaGFpbklkOnMsaWQ6b30pLGQoKX0pLG5ldyBQcm9taXNlKGFzeW5jIGQ9Pntjb25zdCBoPWF3YWl0IFBlKHRoaXMuY2xpZW50LmNvcmUuc3RvcmFnZSxXKTtPZSh7aWQ6byx0b3BpYzppLHdjRGVlcExpbms6aH0pLGQoKX0pLGEoKV0pLnRoZW4oZD0+ZFsyXSl9LHRoaXMucmVzcG9uZD1hc3luYyBlPT57YXdhaXQgdGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkUmVzcG9uZChlKTtjb25zdHt0b3BpYzpzLHJlc3BvbnNlOnR9PWUse2lkOml9PXQ7cSh0KT9hd2FpdCB0aGlzLnNlbmRSZXN1bHQoe2lkOmksdG9waWM6cyxyZXN1bHQ6dC5yZXN1bHQsdGhyb3dPbkZhaWxlZFB1Ymxpc2g6ITB9KTpmKHQpJiZhd2FpdCB0aGlzLnNlbmRFcnJvcihpLHMsdC5lcnJvciksdGhpcy5jbGVhbnVwQWZ0ZXJSZXNwb25zZShlKX0sdGhpcy5waW5nPWFzeW5jIGU9Pnthd2FpdCB0aGlzLmlzSW5pdGlhbGl6ZWQoKSxhd2FpdCB0aGlzLmlzVmFsaWRQaW5nKGUpO2NvbnN0e3RvcGljOnN9PWU7aWYodGhpcy5jbGllbnQuc2Vzc2lvbi5rZXlzLmluY2x1ZGVzKHMpKXtjb25zdCB0PWF3YWl0IHRoaXMuc2VuZFJlcXVlc3Qoe3RvcGljOnMsbWV0aG9kOlwid2Nfc2Vzc2lvblBpbmdcIixwYXJhbXM6e319KSx7ZG9uZTppLHJlc29sdmU6bixyZWplY3Q6b309eCgpO3RoaXMuZXZlbnRzLm9uY2UodShcInNlc3Npb25fcGluZ1wiLHQpLCh7ZXJyb3I6YX0pPT57YT9vKGEpOm4oKX0pLGF3YWl0IGkoKX1lbHNlIHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5rZXlzLmluY2x1ZGVzKHMpJiZhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGluZyh7dG9waWM6c30pfSx0aGlzLmVtaXQ9YXN5bmMgZT0+e2F3YWl0IHRoaXMuaXNJbml0aWFsaXplZCgpLGF3YWl0IHRoaXMuaXNWYWxpZEVtaXQoZSk7Y29uc3R7dG9waWM6cyxldmVudDp0LGNoYWluSWQ6aX09ZTthd2FpdCB0aGlzLnNlbmRSZXF1ZXN0KHt0b3BpYzpzLG1ldGhvZDpcIndjX3Nlc3Npb25FdmVudFwiLHBhcmFtczp7ZXZlbnQ6dCxjaGFpbklkOml9fSl9LHRoaXMuZGlzY29ubmVjdD1hc3luYyBlPT57YXdhaXQgdGhpcy5pc0luaXRpYWxpemVkKCksYXdhaXQgdGhpcy5pc1ZhbGlkRGlzY29ubmVjdChlKTtjb25zdHt0b3BpYzpzfT1lO3RoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhzKT8oYXdhaXQgdGhpcy5zZW5kUmVxdWVzdCh7dG9waWM6cyxtZXRob2Q6XCJ3Y19zZXNzaW9uRGVsZXRlXCIscGFyYW1zOk4oXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSx0aHJvd09uRmFpbGVkUHVibGlzaDohMH0pLGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbihzKSk6YXdhaXQgdGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLmRpc2Nvbm5lY3Qoe3RvcGljOnN9KX0sdGhpcy5maW5kPWU9Pih0aGlzLmlzSW5pdGlhbGl6ZWQoKSx0aGlzLmNsaWVudC5zZXNzaW9uLmdldEFsbCgpLmZpbHRlcihzPT5WZShzLGUpKSksdGhpcy5nZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3RzPSgpPT4odGhpcy5pc0luaXRpYWxpemVkKCksdGhpcy5jbGllbnQucGVuZGluZ1JlcXVlc3QuZ2V0QWxsKCkpLHRoaXMuY2xlYW51cER1cGxpY2F0ZVBhaXJpbmdzPWFzeW5jIGU9PntpZihlLnBhaXJpbmdUb3BpYyl0cnl7Y29uc3Qgcz10aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3MuZ2V0KGUucGFpcmluZ1RvcGljKSx0PXRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5nZXRBbGwoKS5maWx0ZXIoaT0+e3ZhciBuLG87cmV0dXJuKChuPWkucGVlck1ldGFkYXRhKT09bnVsbD92b2lkIDA6bi51cmwpJiYoKG89aS5wZWVyTWV0YWRhdGEpPT1udWxsP3ZvaWQgMDpvLnVybCk9PT1lLnBlZXIubWV0YWRhdGEudXJsJiZpLnRvcGljJiZpLnRvcGljIT09cy50b3BpY30pO2lmKHQubGVuZ3RoPT09MClyZXR1cm47dGhpcy5jbGllbnQubG9nZ2VyLmluZm8oYENsZWFuaW5nIHVwICR7dC5sZW5ndGh9IGR1cGxpY2F0ZSBwYWlyaW5nKHMpYCksYXdhaXQgUHJvbWlzZS5hbGwodC5tYXAoaT0+dGhpcy5jbGllbnQuY29yZS5wYWlyaW5nLmRpc2Nvbm5lY3Qoe3RvcGljOmkudG9waWN9KSkpLHRoaXMuY2xpZW50LmxvZ2dlci5pbmZvKFwiRHVwbGljYXRlIHBhaXJpbmdzIGNsZWFuIHVwIGZpbmlzaGVkXCIpfWNhdGNoKHMpe3RoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihzKX19LHRoaXMuZGVsZXRlU2Vzc2lvbj1hc3luYyhlLHMpPT57Y29uc3R7c2VsZjp0fT10aGlzLmNsaWVudC5zZXNzaW9uLmdldChlKTthd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIudW5zdWJzY3JpYmUoZSksdGhpcy5jbGllbnQuc2Vzc2lvbi5kZWxldGUoZSxOKFwiVVNFUl9ESVNDT05ORUNURURcIikpLHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmtleWNoYWluLmhhcyh0LnB1YmxpY0tleSkmJmF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmRlbGV0ZUtleVBhaXIodC5wdWJsaWNLZXkpLHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmtleWNoYWluLmhhcyhlKSYmYXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZGVsZXRlU3ltS2V5KGUpLHN8fHRoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5kZWwoZSksdGhpcy5jbGllbnQuY29yZS5zdG9yYWdlLnJlbW92ZUl0ZW0oVykuY2F0Y2goaT0+dGhpcy5jbGllbnQubG9nZ2VyLndhcm4oaSkpfSx0aGlzLmRlbGV0ZVByb3Bvc2FsPWFzeW5jKGUscyk9Pnthd2FpdCBQcm9taXNlLmFsbChbdGhpcy5jbGllbnQucHJvcG9zYWwuZGVsZXRlKGUsTihcIlVTRVJfRElTQ09OTkVDVEVEXCIpKSxzP1Byb21pc2UucmVzb2x2ZSgpOnRoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5kZWwoZSldKX0sdGhpcy5kZWxldGVQZW5kaW5nU2Vzc2lvblJlcXVlc3Q9YXN5bmMoZSxzLHQ9ITEpPT57YXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMuY2xpZW50LnBlbmRpbmdSZXF1ZXN0LmRlbGV0ZShlLHMpLHQ/UHJvbWlzZS5yZXNvbHZlKCk6dGhpcy5jbGllbnQuY29yZS5leHBpcmVyLmRlbChlKV0pLHRoaXMuc2Vzc2lvblJlcXVlc3RRdWV1ZS5xdWV1ZT10aGlzLnNlc3Npb25SZXF1ZXN0UXVldWUucXVldWUuZmlsdGVyKGk9PmkuaWQhPT1lKSx0JiYodGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlLnN0YXRlPUkuaWRsZSl9LHRoaXMuc2V0RXhwaXJ5PWFzeW5jKGUscyk9Pnt0aGlzLmNsaWVudC5zZXNzaW9uLmtleXMuaW5jbHVkZXMoZSkmJmF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKGUse2V4cGlyeTpzfSksdGhpcy5jbGllbnQuY29yZS5leHBpcmVyLnNldChlLHMpfSx0aGlzLnNldFByb3Bvc2FsPWFzeW5jKGUscyk9Pnthd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5zZXQoZSxzKSx0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuc2V0KGUscy5leHBpcnkpfSx0aGlzLnNldFBlbmRpbmdTZXNzaW9uUmVxdWVzdD1hc3luYyBlPT57Y29uc3Qgcz1WLndjX3Nlc3Npb25SZXF1ZXN0LnJlcS50dGwse2lkOnQsdG9waWM6aSxwYXJhbXM6bix2ZXJpZnlDb250ZXh0Om99PWU7YXdhaXQgdGhpcy5jbGllbnQucGVuZGluZ1JlcXVlc3Quc2V0KHQse2lkOnQsdG9waWM6aSxwYXJhbXM6bix2ZXJpZnlDb250ZXh0Om99KSxzJiZ0aGlzLmNsaWVudC5jb3JlLmV4cGlyZXIuc2V0KHQsXyhzKSl9LHRoaXMuc2VuZFJlcXVlc3Q9YXN5bmMgZT0+e2NvbnN0e3RvcGljOnMsbWV0aG9kOnQscGFyYW1zOmksZXhwaXJ5Om4scmVsYXlScGNJZDpvLGNsaWVudFJwY0lkOmEsdGhyb3dPbkZhaWxlZFB1Ymxpc2g6Y309ZSxwPUoodCxpLGEpO2lmKFRlKCkmJnBlLmluY2x1ZGVzKHQpKXtjb25zdCBSPVkoSlNPTi5zdHJpbmdpZnkocCkpO3RoaXMuY2xpZW50LmNvcmUudmVyaWZ5LnJlZ2lzdGVyKHthdHRlc3RhdGlvbklkOlJ9KX1jb25zdCBkPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmVuY29kZShzLHApLGg9Vlt0XS5yZXE7cmV0dXJuIG4mJihoLnR0bD1uKSxvJiYoaC5pZD1vKSx0aGlzLmNsaWVudC5jb3JlLmhpc3Rvcnkuc2V0KHMscCksYz8oaC5pbnRlcm5hbD1iKGcoe30saC5pbnRlcm5hbCkse3Rocm93T25GYWlsZWRQdWJsaXNoOiEwfSksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnB1Ymxpc2gocyxkLGgpKTp0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIucHVibGlzaChzLGQsaCkuY2F0Y2goUj0+dGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKFIpKSxwLmlkfSx0aGlzLnNlbmRSZXN1bHQ9YXN5bmMgZT0+e2NvbnN0e2lkOnMsdG9waWM6dCxyZXN1bHQ6aSx0aHJvd09uRmFpbGVkUHVibGlzaDpufT1lLG89SGUocyxpKSxhPWF3YWl0IHRoaXMuY2xpZW50LmNvcmUuY3J5cHRvLmVuY29kZSh0LG8pLGM9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5oaXN0b3J5LmdldCh0LHMpLHA9VltjLnJlcXVlc3QubWV0aG9kXS5yZXM7bj8ocC5pbnRlcm5hbD1iKGcoe30scC5pbnRlcm5hbCkse3Rocm93T25GYWlsZWRQdWJsaXNoOiEwfSksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5yZWxheWVyLnB1Ymxpc2godCxhLHApKTp0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIucHVibGlzaCh0LGEscCkuY2F0Y2goZD0+dGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGQpKSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkucmVzb2x2ZShvKX0sdGhpcy5zZW5kRXJyb3I9YXN5bmMoZSxzLHQpPT57Y29uc3QgaT1XZShlLHQpLG49YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZW5jb2RlKHMsaSksbz1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkuZ2V0KHMsZSksYT1WW28ucmVxdWVzdC5tZXRob2RdLnJlczt0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIucHVibGlzaChzLG4sYSksYXdhaXQgdGhpcy5jbGllbnQuY29yZS5oaXN0b3J5LnJlc29sdmUoaSl9LHRoaXMuY2xlYW51cD1hc3luYygpPT57Y29uc3QgZT1bXSxzPVtdO3RoaXMuY2xpZW50LnNlc3Npb24uZ2V0QWxsKCkuZm9yRWFjaCh0PT57UCh0LmV4cGlyeSkmJmUucHVzaCh0LnRvcGljKX0pLHRoaXMuY2xpZW50LnByb3Bvc2FsLmdldEFsbCgpLmZvckVhY2godD0+e1AodC5leHBpcnkpJiZzLnB1c2godC5pZCl9KSxhd2FpdCBQcm9taXNlLmFsbChbLi4uZS5tYXAodD0+dGhpcy5kZWxldGVTZXNzaW9uKHQpKSwuLi5zLm1hcCh0PT50aGlzLmRlbGV0ZVByb3Bvc2FsKHQpKV0pfSx0aGlzLm9uUmVsYXlFdmVudFJlcXVlc3Q9YXN5bmMgZT0+e3RoaXMucmVxdWVzdFF1ZXVlLnF1ZXVlLnB1c2goZSksYXdhaXQgdGhpcy5wcm9jZXNzUmVxdWVzdHNRdWV1ZSgpfSx0aGlzLnByb2Nlc3NSZXF1ZXN0c1F1ZXVlPWFzeW5jKCk9PntpZih0aGlzLnJlcXVlc3RRdWV1ZS5zdGF0ZT09PUkuYWN0aXZlKXt0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhcIlJlcXVlc3QgcXVldWUgYWxyZWFkeSBhY3RpdmUsIHNraXBwaW5nLi4uXCIpO3JldHVybn1mb3IodGhpcy5jbGllbnQubG9nZ2VyLmluZm8oYFJlcXVlc3QgcXVldWUgc3RhcnRpbmcgd2l0aCAke3RoaXMucmVxdWVzdFF1ZXVlLnF1ZXVlLmxlbmd0aH0gcmVxdWVzdHNgKTt0aGlzLnJlcXVlc3RRdWV1ZS5xdWV1ZS5sZW5ndGg+MDspe3RoaXMucmVxdWVzdFF1ZXVlLnN0YXRlPUkuYWN0aXZlO2NvbnN0IGU9dGhpcy5yZXF1ZXN0UXVldWUucXVldWUuc2hpZnQoKTtpZihlKXRyeXt0aGlzLnByb2Nlc3NSZXF1ZXN0KGUpLGF3YWl0IG5ldyBQcm9taXNlKHM9PnNldFRpbWVvdXQocywzMDApKX1jYXRjaChzKXt0aGlzLmNsaWVudC5sb2dnZXIud2FybihzKX19dGhpcy5yZXF1ZXN0UXVldWUuc3RhdGU9SS5pZGxlfSx0aGlzLnByb2Nlc3NSZXF1ZXN0PWU9Pntjb25zdHt0b3BpYzpzLHBheWxvYWQ6dH09ZSxpPXQubWV0aG9kO3N3aXRjaChpKXtjYXNlXCJ3Y19zZXNzaW9uUHJvcG9zZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblByb3Bvc2VSZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblNldHRsZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblNldHRsZVJlcXVlc3Qocyx0KTtjYXNlXCJ3Y19zZXNzaW9uVXBkYXRlXCI6cmV0dXJuIHRoaXMub25TZXNzaW9uVXBkYXRlUmVxdWVzdChzLHQpO2Nhc2VcIndjX3Nlc3Npb25FeHRlbmRcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25FeHRlbmRSZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblBpbmdcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25QaW5nUmVxdWVzdChzLHQpO2Nhc2VcIndjX3Nlc3Npb25EZWxldGVcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25EZWxldGVSZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblJlcXVlc3RcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25SZXF1ZXN0KHMsdCk7Y2FzZVwid2Nfc2Vzc2lvbkV2ZW50XCI6cmV0dXJuIHRoaXMub25TZXNzaW9uRXZlbnRSZXF1ZXN0KHMsdCk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbGllbnQubG9nZ2VyLmluZm8oYFVuc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kICR7aX1gKX19LHRoaXMub25SZWxheUV2ZW50UmVzcG9uc2U9YXN5bmMgZT0+e2NvbnN0e3RvcGljOnMscGF5bG9hZDp0fT1lLGk9KGF3YWl0IHRoaXMuY2xpZW50LmNvcmUuaGlzdG9yeS5nZXQocyx0LmlkKSkucmVxdWVzdC5tZXRob2Q7c3dpdGNoKGkpe2Nhc2VcIndjX3Nlc3Npb25Qcm9wb3NlXCI6cmV0dXJuIHRoaXMub25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblNldHRsZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblNldHRsZVJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblVwZGF0ZVwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblVwZGF0ZVJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvbkV4dGVuZFwiOnJldHVybiB0aGlzLm9uU2Vzc2lvbkV4dGVuZFJlc3BvbnNlKHMsdCk7Y2FzZVwid2Nfc2Vzc2lvblBpbmdcIjpyZXR1cm4gdGhpcy5vblNlc3Npb25QaW5nUmVzcG9uc2Uocyx0KTtjYXNlXCJ3Y19zZXNzaW9uUmVxdWVzdFwiOnJldHVybiB0aGlzLm9uU2Vzc2lvblJlcXVlc3RSZXNwb25zZShzLHQpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY2xpZW50LmxvZ2dlci5pbmZvKGBVbnN1cHBvcnRlZCByZXNwb25zZSBtZXRob2QgJHtpfWApfX0sdGhpcy5vblJlbGF5RXZlbnRVbmtub3duUGF5bG9hZD1lPT57Y29uc3R7dG9waWM6c309ZSx7bWVzc2FnZTp0fT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYERlY29kZWQgcGF5bG9hZCBvbiB0b3BpYyAke3N9IGlzIG5vdCBpZGVudGlmaWFibGUgYXMgYSBKU09OLVJQQyByZXF1ZXN0IG9yIGEgcmVzcG9uc2UuYCk7dGhyb3cgbmV3IEVycm9yKHQpfSx0aGlzLm9uU2Vzc2lvblByb3Bvc2VSZXF1ZXN0PWFzeW5jKGUscyk9Pntjb25zdHtwYXJhbXM6dCxpZDppfT1zO3RyeXt0aGlzLmlzVmFsaWRDb25uZWN0KGcoe30scy5wYXJhbXMpKTtjb25zdCBuPV8oeSksbz1nKHtpZDppLHBhaXJpbmdUb3BpYzplLGV4cGlyeTpufSx0KTthd2FpdCB0aGlzLnNldFByb3Bvc2FsKGksbyk7Y29uc3QgYT1ZKEpTT04uc3RyaW5naWZ5KHMpKSxjPWF3YWl0IHRoaXMuZ2V0VmVyaWZ5Q29udGV4dChhLG8ucHJvcG9zZXIubWV0YWRhdGEpO3RoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9wcm9wb3NhbFwiLHtpZDppLHBhcmFtczpvLHZlcmlmeUNvbnRleHQ6Y30pfWNhdGNoKG4pe2F3YWl0IHRoaXMuc2VuZEVycm9yKGksZSxuKSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3Iobil9fSx0aGlzLm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZT1hc3luYyhlLHMpPT57Y29uc3R7aWQ6dH09cztpZihxKHMpKXtjb25zdHtyZXN1bHQ6aX09czt0aGlzLmNsaWVudC5sb2dnZXIudHJhY2Uoe3R5cGU6XCJtZXRob2RcIixtZXRob2Q6XCJvblNlc3Npb25Qcm9wb3NlUmVzcG9uc2VcIixyZXN1bHQ6aX0pO2NvbnN0IG49dGhpcy5jbGllbnQucHJvcG9zYWwuZ2V0KHQpO3RoaXMuY2xpZW50LmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcIm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZVwiLHByb3Bvc2FsOm59KTtjb25zdCBvPW4ucHJvcG9zZXIucHVibGljS2V5O3RoaXMuY2xpZW50LmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcIm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZVwiLHNlbGZQdWJsaWNLZXk6b30pO2NvbnN0IGE9aS5yZXNwb25kZXJQdWJsaWNLZXk7dGhpcy5jbGllbnQubG9nZ2VyLnRyYWNlKHt0eXBlOlwibWV0aG9kXCIsbWV0aG9kOlwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlXCIscGVlclB1YmxpY0tleTphfSk7Y29uc3QgYz1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZW5lcmF0ZVNoYXJlZEtleShvLGEpO3RoaXMuY2xpZW50LmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcIm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZVwiLHNlc3Npb25Ub3BpYzpjfSk7Y29uc3QgcD1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIuc3Vic2NyaWJlKGMpO3RoaXMuY2xpZW50LmxvZ2dlci50cmFjZSh7dHlwZTpcIm1ldGhvZFwiLG1ldGhvZDpcIm9uU2Vzc2lvblByb3Bvc2VSZXNwb25zZVwiLHN1YnNjcmlwdGlvbklkOnB9KSxhd2FpdCB0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcuYWN0aXZhdGUoe3RvcGljOmV9KX1lbHNlIGYocykmJihhd2FpdCB0aGlzLmNsaWVudC5wcm9wb3NhbC5kZWxldGUodCxOKFwiVVNFUl9ESVNDT05ORUNURURcIikpLHRoaXMuZXZlbnRzLmVtaXQodShcInNlc3Npb25fY29ubmVjdFwiKSx7ZXJyb3I6cy5lcnJvcn0pKX0sdGhpcy5vblNlc3Npb25TZXR0bGVSZXF1ZXN0PWFzeW5jKGUscyk9Pntjb25zdHtpZDp0LHBhcmFtczppfT1zO3RyeXt0aGlzLmlzVmFsaWRTZXNzaW9uU2V0dGxlUmVxdWVzdChpKTtjb25zdHtyZWxheTpuLGNvbnRyb2xsZXI6byxleHBpcnk6YSxuYW1lc3BhY2VzOmMscmVxdWlyZWROYW1lc3BhY2VzOnAsb3B0aW9uYWxOYW1lc3BhY2VzOmQsc2Vzc2lvblByb3BlcnRpZXM6aCxwYWlyaW5nVG9waWM6Un09cy5wYXJhbXMsdz1nKHt0b3BpYzplLHJlbGF5Om4sZXhwaXJ5OmEsbmFtZXNwYWNlczpjLGFja25vd2xlZGdlZDohMCxwYWlyaW5nVG9waWM6UixyZXF1aXJlZE5hbWVzcGFjZXM6cCxvcHRpb25hbE5hbWVzcGFjZXM6ZCxjb250cm9sbGVyOm8ucHVibGljS2V5LHNlbGY6e3B1YmxpY0tleTpcIlwiLG1ldGFkYXRhOnRoaXMuY2xpZW50Lm1ldGFkYXRhfSxwZWVyOntwdWJsaWNLZXk6by5wdWJsaWNLZXksbWV0YWRhdGE6by5tZXRhZGF0YX19LGgmJntzZXNzaW9uUHJvcGVydGllczpofSk7YXdhaXQgdGhpcy5zZW5kUmVzdWx0KHtpZDpzLmlkLHRvcGljOmUscmVzdWx0OiEwfSksdGhpcy5ldmVudHMuZW1pdCh1KFwic2Vzc2lvbl9jb25uZWN0XCIpLHtzZXNzaW9uOnd9KSx0aGlzLmNsZWFudXBEdXBsaWNhdGVQYWlyaW5ncyh3KX1jYXRjaChuKXthd2FpdCB0aGlzLnNlbmRFcnJvcih0LGUsbiksdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKG4pfX0sdGhpcy5vblNlc3Npb25TZXR0bGVSZXNwb25zZT1hc3luYyhlLHMpPT57Y29uc3R7aWQ6dH09cztxKHMpPyhhd2FpdCB0aGlzLmNsaWVudC5zZXNzaW9uLnVwZGF0ZShlLHthY2tub3dsZWRnZWQ6ITB9KSx0aGlzLmV2ZW50cy5lbWl0KHUoXCJzZXNzaW9uX2FwcHJvdmVcIix0KSx7fSkpOmYocykmJihhd2FpdCB0aGlzLmNsaWVudC5zZXNzaW9uLmRlbGV0ZShlLE4oXCJVU0VSX0RJU0NPTk5FQ1RFRFwiKSksdGhpcy5ldmVudHMuZW1pdCh1KFwic2Vzc2lvbl9hcHByb3ZlXCIsdCkse2Vycm9yOnMuZXJyb3J9KSl9LHRoaXMub25TZXNzaW9uVXBkYXRlUmVxdWVzdD1hc3luYyhlLHMpPT57Y29uc3R7cGFyYW1zOnQsaWQ6aX09czt0cnl7Y29uc3Qgbj1gJHtlfV9zZXNzaW9uX3VwZGF0ZWAsbz0kLmdldChuKTtpZihvJiZ0aGlzLmlzUmVxdWVzdE91dE9mU3luYyhvLGkpKXt0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhgRGlzY2FyZGluZyBvdXQgb2Ygc3luYyByZXF1ZXN0IC0gJHtpfWApO3JldHVybn10aGlzLmlzVmFsaWRVcGRhdGUoZyh7dG9waWM6ZX0sdCkpLGF3YWl0IHRoaXMuY2xpZW50LnNlc3Npb24udXBkYXRlKGUse25hbWVzcGFjZXM6dC5uYW1lc3BhY2VzfSksYXdhaXQgdGhpcy5zZW5kUmVzdWx0KHtpZDppLHRvcGljOmUscmVzdWx0OiEwfSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3VwZGF0ZVwiLHtpZDppLHRvcGljOmUscGFyYW1zOnR9KSwkLnNldChuLGkpfWNhdGNoKG4pe2F3YWl0IHRoaXMuc2VuZEVycm9yKGksZSxuKSx0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3Iobil9fSx0aGlzLmlzUmVxdWVzdE91dE9mU3luYz0oZSxzKT0+cGFyc2VJbnQocy50b1N0cmluZygpLnNsaWNlKDAsLTMpKTw9cGFyc2VJbnQoZS50b1N0cmluZygpLnNsaWNlKDAsLTMpKSx0aGlzLm9uU2Vzc2lvblVwZGF0ZVJlc3BvbnNlPShlLHMpPT57Y29uc3R7aWQ6dH09cztxKHMpP3RoaXMuZXZlbnRzLmVtaXQodShcInNlc3Npb25fdXBkYXRlXCIsdCkse30pOmYocykmJnRoaXMuZXZlbnRzLmVtaXQodShcInNlc3Npb25fdXBkYXRlXCIsdCkse2Vycm9yOnMuZXJyb3J9KX0sdGhpcy5vblNlc3Npb25FeHRlbmRSZXF1ZXN0PWFzeW5jKGUscyk9Pntjb25zdHtpZDp0fT1zO3RyeXt0aGlzLmlzVmFsaWRFeHRlbmQoe3RvcGljOmV9KSxhd2FpdCB0aGlzLnNldEV4cGlyeShlLF8oQSkpLGF3YWl0IHRoaXMuc2VuZFJlc3VsdCh7aWQ6dCx0b3BpYzplLHJlc3VsdDohMH0pLHRoaXMuY2xpZW50LmV2ZW50cy5lbWl0KFwic2Vzc2lvbl9leHRlbmRcIix7aWQ6dCx0b3BpYzplfSl9Y2F0Y2goaSl7YXdhaXQgdGhpcy5zZW5kRXJyb3IodCxlLGkpLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihpKX19LHRoaXMub25TZXNzaW9uRXh0ZW5kUmVzcG9uc2U9KGUscyk9Pntjb25zdHtpZDp0fT1zO3Eocyk/dGhpcy5ldmVudHMuZW1pdCh1KFwic2Vzc2lvbl9leHRlbmRcIix0KSx7fSk6ZihzKSYmdGhpcy5ldmVudHMuZW1pdCh1KFwic2Vzc2lvbl9leHRlbmRcIix0KSx7ZXJyb3I6cy5lcnJvcn0pfSx0aGlzLm9uU2Vzc2lvblBpbmdSZXF1ZXN0PWFzeW5jKGUscyk9Pntjb25zdHtpZDp0fT1zO3RyeXt0aGlzLmlzVmFsaWRQaW5nKHt0b3BpYzplfSksYXdhaXQgdGhpcy5zZW5kUmVzdWx0KHtpZDp0LHRvcGljOmUscmVzdWx0OiEwfSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3BpbmdcIix7aWQ6dCx0b3BpYzplfSl9Y2F0Y2goaSl7YXdhaXQgdGhpcy5zZW5kRXJyb3IodCxlLGkpLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihpKX19LHRoaXMub25TZXNzaW9uUGluZ1Jlc3BvbnNlPShlLHMpPT57Y29uc3R7aWQ6dH09cztzZXRUaW1lb3V0KCgpPT57cShzKT90aGlzLmV2ZW50cy5lbWl0KHUoXCJzZXNzaW9uX3BpbmdcIix0KSx7fSk6ZihzKSYmdGhpcy5ldmVudHMuZW1pdCh1KFwic2Vzc2lvbl9waW5nXCIsdCkse2Vycm9yOnMuZXJyb3J9KX0sNTAwKX0sdGhpcy5vblNlc3Npb25EZWxldGVSZXF1ZXN0PWFzeW5jKGUscyk9Pntjb25zdHtpZDp0fT1zO3RyeXt0aGlzLmlzVmFsaWREaXNjb25uZWN0KHt0b3BpYzplLHJlYXNvbjpzLnBhcmFtc30pLGF3YWl0IFByb21pc2UuYWxsKFtuZXcgUHJvbWlzZShpPT57dGhpcy5jbGllbnQuY29yZS5yZWxheWVyLm9uY2UoWi5wdWJsaXNoLGFzeW5jKCk9PntpKGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbihlKSl9KX0pLHRoaXMuc2VuZFJlc3VsdCh7aWQ6dCx0b3BpYzplLHJlc3VsdDohMH0pXSksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX2RlbGV0ZVwiLHtpZDp0LHRvcGljOmV9KX1jYXRjaChpKXt0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3IoaSl9fSx0aGlzLm9uU2Vzc2lvblJlcXVlc3Q9YXN5bmMoZSxzKT0+e2NvbnN0e2lkOnQscGFyYW1zOml9PXM7dHJ5e3RoaXMuaXNWYWxpZFJlcXVlc3QoZyh7dG9waWM6ZX0saSkpO2NvbnN0IG49WShKU09OLnN0cmluZ2lmeShKKFwid2Nfc2Vzc2lvblJlcXVlc3RcIixpLHQpKSksbz10aGlzLmNsaWVudC5zZXNzaW9uLmdldChlKSxhPWF3YWl0IHRoaXMuZ2V0VmVyaWZ5Q29udGV4dChuLG8ucGVlci5tZXRhZGF0YSksYz17aWQ6dCx0b3BpYzplLHBhcmFtczppLHZlcmlmeUNvbnRleHQ6YX07YXdhaXQgdGhpcy5zZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3QoYyksdGhpcy5hZGRTZXNzaW9uUmVxdWVzdFRvU2Vzc2lvblJlcXVlc3RRdWV1ZShjKSx0aGlzLnByb2Nlc3NTZXNzaW9uUmVxdWVzdFF1ZXVlKCl9Y2F0Y2gobil7YXdhaXQgdGhpcy5zZW5kRXJyb3IodCxlLG4pLHRoaXMuY2xpZW50LmxvZ2dlci5lcnJvcihuKX19LHRoaXMub25TZXNzaW9uUmVxdWVzdFJlc3BvbnNlPShlLHMpPT57Y29uc3R7aWQ6dH09cztxKHMpP3RoaXMuZXZlbnRzLmVtaXQodShcInNlc3Npb25fcmVxdWVzdFwiLHQpLHtyZXN1bHQ6cy5yZXN1bHR9KTpmKHMpJiZ0aGlzLmV2ZW50cy5lbWl0KHUoXCJzZXNzaW9uX3JlcXVlc3RcIix0KSx7ZXJyb3I6cy5lcnJvcn0pfSx0aGlzLm9uU2Vzc2lvbkV2ZW50UmVxdWVzdD1hc3luYyhlLHMpPT57Y29uc3R7aWQ6dCxwYXJhbXM6aX09czt0cnl7Y29uc3Qgbj1gJHtlfV9zZXNzaW9uX2V2ZW50XyR7aS5ldmVudC5uYW1lfWAsbz0kLmdldChuKTtpZihvJiZ0aGlzLmlzUmVxdWVzdE91dE9mU3luYyhvLHQpKXt0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhgRGlzY2FyZGluZyBvdXQgb2Ygc3luYyByZXF1ZXN0IC0gJHt0fWApO3JldHVybn10aGlzLmlzVmFsaWRFbWl0KGcoe3RvcGljOmV9LGkpKSx0aGlzLmNsaWVudC5ldmVudHMuZW1pdChcInNlc3Npb25fZXZlbnRcIix7aWQ6dCx0b3BpYzplLHBhcmFtczppfSksJC5zZXQobix0KX1jYXRjaChuKXthd2FpdCB0aGlzLnNlbmRFcnJvcih0LGUsbiksdGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKG4pfX0sdGhpcy5hZGRTZXNzaW9uUmVxdWVzdFRvU2Vzc2lvblJlcXVlc3RRdWV1ZT1lPT57dGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlLnF1ZXVlLnB1c2goZSl9LHRoaXMuY2xlYW51cEFmdGVyUmVzcG9uc2U9ZT0+e3RoaXMuZGVsZXRlUGVuZGluZ1Nlc3Npb25SZXF1ZXN0KGUucmVzcG9uc2UuaWQse21lc3NhZ2U6XCJmdWxmaWxsZWRcIixjb2RlOjB9KSxzZXRUaW1lb3V0KCgpPT57dGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlLnN0YXRlPUkuaWRsZSx0aGlzLnByb2Nlc3NTZXNzaW9uUmVxdWVzdFF1ZXVlKCl9LHJlKHRoaXMucmVxdWVzdFF1ZXVlRGVsYXkpKX0sdGhpcy5wcm9jZXNzU2Vzc2lvblJlcXVlc3RRdWV1ZT0oKT0+e2lmKHRoaXMuc2Vzc2lvblJlcXVlc3RRdWV1ZS5zdGF0ZT09PUkuYWN0aXZlKXt0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhcInNlc3Npb24gcmVxdWVzdCBxdWV1ZSBpcyBhbHJlYWR5IGFjdGl2ZS5cIik7cmV0dXJufWNvbnN0IGU9dGhpcy5zZXNzaW9uUmVxdWVzdFF1ZXVlLnF1ZXVlWzBdO2lmKCFlKXt0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhcInNlc3Npb24gcmVxdWVzdCBxdWV1ZSBpcyBlbXB0eS5cIik7cmV0dXJufXRyeXt0aGlzLnNlc3Npb25SZXF1ZXN0UXVldWUuc3RhdGU9SS5hY3RpdmUsdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJzZXNzaW9uX3JlcXVlc3RcIixlKX1jYXRjaChzKXt0aGlzLmNsaWVudC5sb2dnZXIuZXJyb3Iocyl9fSx0aGlzLm9uUGFpcmluZ0NyZWF0ZWQ9ZT0+e2lmKGUuYWN0aXZlKXJldHVybjtjb25zdCBzPXRoaXMuY2xpZW50LnByb3Bvc2FsLmdldEFsbCgpLmZpbmQodD0+dC5wYWlyaW5nVG9waWM9PT1lLnRvcGljKTtzJiZ0aGlzLm9uU2Vzc2lvblByb3Bvc2VSZXF1ZXN0KGUudG9waWMsSihcIndjX3Nlc3Npb25Qcm9wb3NlXCIse3JlcXVpcmVkTmFtZXNwYWNlczpzLnJlcXVpcmVkTmFtZXNwYWNlcyxvcHRpb25hbE5hbWVzcGFjZXM6cy5vcHRpb25hbE5hbWVzcGFjZXMscmVsYXlzOnMucmVsYXlzLHByb3Bvc2VyOnMucHJvcG9zZXIsc2Vzc2lvblByb3BlcnRpZXM6cy5zZXNzaW9uUHJvcGVydGllc30scy5pZCkpfSx0aGlzLmlzVmFsaWRDb25uZWN0PWFzeW5jIGU9PntpZighRShlKSl7Y29uc3R7bWVzc2FnZTphfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGNvbm5lY3QoKSBwYXJhbXM6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YCk7dGhyb3cgbmV3IEVycm9yKGEpfWNvbnN0e3BhaXJpbmdUb3BpYzpzLHJlcXVpcmVkTmFtZXNwYWNlczp0LG9wdGlvbmFsTmFtZXNwYWNlczppLHNlc3Npb25Qcm9wZXJ0aWVzOm4scmVsYXlzOm99PWU7aWYoRChzKXx8YXdhaXQgdGhpcy5pc1ZhbGlkUGFpcmluZ1RvcGljKHMpLCF4ZShvLCEwKSl7Y29uc3R7bWVzc2FnZTphfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGNvbm5lY3QoKSByZWxheXM6ICR7b31gKTt0aHJvdyBuZXcgRXJyb3IoYSl9IUQodCkmJnoodCkhPT0wJiZ0aGlzLnZhbGlkYXRlTmFtZXNwYWNlcyh0LFwicmVxdWlyZWROYW1lc3BhY2VzXCIpLCFEKGkpJiZ6KGkpIT09MCYmdGhpcy52YWxpZGF0ZU5hbWVzcGFjZXMoaSxcIm9wdGlvbmFsTmFtZXNwYWNlc1wiKSxEKG4pfHx0aGlzLnZhbGlkYXRlU2Vzc2lvblByb3BzKG4sXCJzZXNzaW9uUHJvcGVydGllc1wiKX0sdGhpcy52YWxpZGF0ZU5hbWVzcGFjZXM9KGUscyk9Pntjb25zdCB0PURlKGUsXCJjb25uZWN0KClcIixzKTtpZih0KXRocm93IG5ldyBFcnJvcih0Lm1lc3NhZ2UpfSx0aGlzLmlzVmFsaWRBcHByb3ZlPWFzeW5jIGU9PntpZighRShlKSl0aHJvdyBuZXcgRXJyb3IobChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBhcHByb3ZlKCkgcGFyYW1zOiAke2V9YCkubWVzc2FnZSk7Y29uc3R7aWQ6cyxuYW1lc3BhY2VzOnQscmVsYXlQcm90b2NvbDppLHNlc3Npb25Qcm9wZXJ0aWVzOm59PWU7YXdhaXQgdGhpcy5pc1ZhbGlkUHJvcG9zYWxJZChzKTtjb25zdCBvPXRoaXMuY2xpZW50LnByb3Bvc2FsLmdldChzKSxhPWoodCxcImFwcHJvdmUoKVwiKTtpZihhKXRocm93IG5ldyBFcnJvcihhLm1lc3NhZ2UpO2NvbnN0IGM9ZWUoby5yZXF1aXJlZE5hbWVzcGFjZXMsdCxcImFwcHJvdmUoKVwiKTtpZihjKXRocm93IG5ldyBFcnJvcihjLm1lc3NhZ2UpO2lmKCFDKGksITApKXtjb25zdHttZXNzYWdlOnB9PWwoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgYXBwcm92ZSgpIHJlbGF5UHJvdG9jb2w6ICR7aX1gKTt0aHJvdyBuZXcgRXJyb3IocCl9RChuKXx8dGhpcy52YWxpZGF0ZVNlc3Npb25Qcm9wcyhuLFwic2Vzc2lvblByb3BlcnRpZXNcIil9LHRoaXMuaXNWYWxpZFJlamVjdD1hc3luYyBlPT57aWYoIUUoZSkpe2NvbnN0e21lc3NhZ2U6aX09bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZWplY3QoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IoaSl9Y29uc3R7aWQ6cyxyZWFzb246dH09ZTtpZihhd2FpdCB0aGlzLmlzVmFsaWRQcm9wb3NhbElkKHMpLCFDZSh0KSl7Y29uc3R7bWVzc2FnZTppfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlamVjdCgpIHJlYXNvbjogJHtKU09OLnN0cmluZ2lmeSh0KX1gKTt0aHJvdyBuZXcgRXJyb3IoaSl9fSx0aGlzLmlzVmFsaWRTZXNzaW9uU2V0dGxlUmVxdWVzdD1lPT57aWYoIUUoZSkpe2NvbnN0e21lc3NhZ2U6Y309bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBvblNlc3Npb25TZXR0bGVSZXF1ZXN0KCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKGMpfWNvbnN0e3JlbGF5OnMsY29udHJvbGxlcjp0LG5hbWVzcGFjZXM6aSxleHBpcnk6bn09ZTtpZighQWUocykpe2NvbnN0e21lc3NhZ2U6Y309bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLFwib25TZXNzaW9uU2V0dGxlUmVxdWVzdCgpIHJlbGF5IHByb3RvY29sIHNob3VsZCBiZSBhIHN0cmluZ1wiKTt0aHJvdyBuZXcgRXJyb3IoYyl9Y29uc3Qgbz1iZSh0LFwib25TZXNzaW9uU2V0dGxlUmVxdWVzdCgpXCIpO2lmKG8pdGhyb3cgbmV3IEVycm9yKG8ubWVzc2FnZSk7Y29uc3QgYT1qKGksXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KClcIik7aWYoYSl0aHJvdyBuZXcgRXJyb3IoYS5tZXNzYWdlKTtpZihQKG4pKXtjb25zdHttZXNzYWdlOmN9PWwoXCJFWFBJUkVEXCIsXCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0KClcIik7dGhyb3cgbmV3IEVycm9yKGMpfX0sdGhpcy5pc1ZhbGlkVXBkYXRlPWFzeW5jIGU9PntpZighRShlKSl7Y29uc3R7bWVzc2FnZTphfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHVwZGF0ZSgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcihhKX1jb25zdHt0b3BpYzpzLG5hbWVzcGFjZXM6dH09ZTthd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWMocyk7Y29uc3QgaT10aGlzLmNsaWVudC5zZXNzaW9uLmdldChzKSxuPWoodCxcInVwZGF0ZSgpXCIpO2lmKG4pdGhyb3cgbmV3IEVycm9yKG4ubWVzc2FnZSk7Y29uc3Qgbz1lZShpLnJlcXVpcmVkTmFtZXNwYWNlcyx0LFwidXBkYXRlKClcIik7aWYobyl0aHJvdyBuZXcgRXJyb3Ioby5tZXNzYWdlKX0sdGhpcy5pc1ZhbGlkRXh0ZW5kPWFzeW5jIGU9PntpZighRShlKSl7Y29uc3R7bWVzc2FnZTp0fT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGV4dGVuZCgpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcih0KX1jb25zdHt0b3BpYzpzfT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25Ub3BpYyhzKX0sdGhpcy5pc1ZhbGlkUmVxdWVzdD1hc3luYyBlPT57aWYoIUUoZSkpe2NvbnN0e21lc3NhZ2U6YX09bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXF1ZXN0KCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKGEpfWNvbnN0e3RvcGljOnMscmVxdWVzdDp0LGNoYWluSWQ6aSxleHBpcnk6bn09ZTthd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWMocyk7Y29uc3R7bmFtZXNwYWNlczpvfT10aGlzLmNsaWVudC5zZXNzaW9uLmdldChzKTtpZighc2UobyxpKSl7Y29uc3R7bWVzc2FnZTphfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlcXVlc3QoKSBjaGFpbklkOiAke2l9YCk7dGhyb3cgbmV3IEVycm9yKGEpfWlmKCFMZSh0KSl7Y29uc3R7bWVzc2FnZTphfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlcXVlc3QoKSAke0pTT04uc3RyaW5naWZ5KHQpfWApO3Rocm93IG5ldyBFcnJvcihhKX1pZighJGUobyxpLHQubWV0aG9kKSl7Y29uc3R7bWVzc2FnZTphfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHJlcXVlc3QoKSBtZXRob2Q6ICR7dC5tZXRob2R9YCk7dGhyb3cgbmV3IEVycm9yKGEpfWlmKG4mJiFHZShuLFUpKXtjb25zdHttZXNzYWdlOmF9PWwoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcmVxdWVzdCgpIGV4cGlyeTogJHtufS4gRXhwaXJ5IG11c3QgYmUgYSBudW1iZXIgKGluIHNlY29uZHMpIGJldHdlZW4gJHtVLm1pbn0gYW5kICR7VS5tYXh9YCk7dGhyb3cgbmV3IEVycm9yKGEpfX0sdGhpcy5pc1ZhbGlkUmVzcG9uZD1hc3luYyBlPT57aWYoIUUoZSkpe2NvbnN0e21lc3NhZ2U6aX09bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGByZXNwb25kKCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKGkpfWNvbnN0e3RvcGljOnMscmVzcG9uc2U6dH09ZTtpZihhd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uVG9waWMocyksIU1lKHQpKXtjb25zdHttZXNzYWdlOml9PWwoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcmVzcG9uZCgpIHJlc3BvbnNlOiAke0pTT04uc3RyaW5naWZ5KHQpfWApO3Rocm93IG5ldyBFcnJvcihpKX19LHRoaXMuaXNWYWxpZFBpbmc9YXN5bmMgZT0+e2lmKCFFKGUpKXtjb25zdHttZXNzYWdlOnR9PWwoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgcGluZygpIHBhcmFtczogJHtlfWApO3Rocm93IG5ldyBFcnJvcih0KX1jb25zdHt0b3BpYzpzfT1lO2F3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyhzKX0sdGhpcy5pc1ZhbGlkRW1pdD1hc3luYyBlPT57aWYoIUUoZSkpe2NvbnN0e21lc3NhZ2U6b309bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBlbWl0KCkgcGFyYW1zOiAke2V9YCk7dGhyb3cgbmV3IEVycm9yKG8pfWNvbnN0e3RvcGljOnMsZXZlbnQ6dCxjaGFpbklkOml9PWU7YXdhaXQgdGhpcy5pc1ZhbGlkU2Vzc2lvblRvcGljKHMpO2NvbnN0e25hbWVzcGFjZXM6bn09dGhpcy5jbGllbnQuc2Vzc2lvbi5nZXQocyk7aWYoIXNlKG4saSkpe2NvbnN0e21lc3NhZ2U6b309bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBlbWl0KCkgY2hhaW5JZDogJHtpfWApO3Rocm93IG5ldyBFcnJvcihvKX1pZighVWUodCkpe2NvbnN0e21lc3NhZ2U6b309bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBlbWl0KCkgZXZlbnQ6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCk7dGhyb3cgbmV3IEVycm9yKG8pfWlmKCFRZShuLGksdC5uYW1lKSl7Y29uc3R7bWVzc2FnZTpvfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGVtaXQoKSBldmVudDogJHtKU09OLnN0cmluZ2lmeSh0KX1gKTt0aHJvdyBuZXcgRXJyb3Iobyl9fSx0aGlzLmlzVmFsaWREaXNjb25uZWN0PWFzeW5jIGU9PntpZighRShlKSl7Y29uc3R7bWVzc2FnZTp0fT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYGRpc2Nvbm5lY3QoKSBwYXJhbXM6ICR7ZX1gKTt0aHJvdyBuZXcgRXJyb3IodCl9Y29uc3R7dG9waWM6c309ZTthd2FpdCB0aGlzLmlzVmFsaWRTZXNzaW9uT3JQYWlyaW5nVG9waWMocyl9LHRoaXMuZ2V0VmVyaWZ5Q29udGV4dD1hc3luYyhlLHMpPT57Y29uc3QgdD17dmVyaWZpZWQ6e3ZlcmlmeVVybDpzLnZlcmlmeVVybHx8bWUsdmFsaWRhdGlvbjpcIlVOS05PV05cIixvcmlnaW46cy51cmx8fFwiXCJ9fTt0cnl7Y29uc3QgaT1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLnZlcmlmeS5yZXNvbHZlKHthdHRlc3RhdGlvbklkOmUsdmVyaWZ5VXJsOnMudmVyaWZ5VXJsfSk7aSYmKHQudmVyaWZpZWQub3JpZ2luPWkub3JpZ2luLHQudmVyaWZpZWQuaXNTY2FtPWkuaXNTY2FtLHQudmVyaWZpZWQudmFsaWRhdGlvbj1pLm9yaWdpbj09PW5ldyBVUkwocy51cmwpLm9yaWdpbj9cIlZBTElEXCI6XCJJTlZBTElEXCIpfWNhdGNoKGkpe3RoaXMuY2xpZW50LmxvZ2dlci5pbmZvKGkpfXJldHVybiB0aGlzLmNsaWVudC5sb2dnZXIuaW5mbyhgVmVyaWZ5IGNvbnRleHQ6ICR7SlNPTi5zdHJpbmdpZnkodCl9YCksdH0sdGhpcy52YWxpZGF0ZVNlc3Npb25Qcm9wcz0oZSxzKT0+e09iamVjdC52YWx1ZXMoZSkuZm9yRWFjaCh0PT57aWYoIUModCwhMSkpe2NvbnN0e21lc3NhZ2U6aX09bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGAke3N9IG11c3QgYmUgaW4gUmVjb3JkPHN0cmluZywgc3RyaW5nPiBmb3JtYXQuIFJlY2VpdmVkOiAke0pTT04uc3RyaW5naWZ5KHQpfWApO3Rocm93IG5ldyBFcnJvcihpKX19KX19YXN5bmMgaXNJbml0aWFsaXplZCgpe2lmKCF0aGlzLmluaXRpYWxpemVkKXtjb25zdHttZXNzYWdlOnJ9PWwoXCJOT1RfSU5JVElBTElaRURcIix0aGlzLm5hbWUpO3Rocm93IG5ldyBFcnJvcihyKX1hd2FpdCB0aGlzLmNsaWVudC5jb3JlLnJlbGF5ZXIuY29uZmlybU9ubGluZVN0YXRlT3JUaHJvdygpfXJlZ2lzdGVyUmVsYXllckV2ZW50cygpe3RoaXMuY2xpZW50LmNvcmUucmVsYXllci5vbihaLm1lc3NhZ2UsYXN5bmMgcj0+e2NvbnN0e3RvcGljOmUsbWVzc2FnZTpzfT1yO2lmKHRoaXMuaWdub3JlZFBheWxvYWRUeXBlcy5pbmNsdWRlcyh0aGlzLmNsaWVudC5jb3JlLmNyeXB0by5nZXRQYXlsb2FkVHlwZShzKSkpcmV0dXJuO2NvbnN0IHQ9YXdhaXQgdGhpcy5jbGllbnQuY29yZS5jcnlwdG8uZGVjb2RlKGUscyk7dHJ5e0JlKHQpPyh0aGlzLmNsaWVudC5jb3JlLmhpc3Rvcnkuc2V0KGUsdCksdGhpcy5vblJlbGF5RXZlbnRSZXF1ZXN0KHt0b3BpYzplLHBheWxvYWQ6dH0pKTpaZSh0KT8oYXdhaXQgdGhpcy5jbGllbnQuY29yZS5oaXN0b3J5LnJlc29sdmUodCksYXdhaXQgdGhpcy5vblJlbGF5RXZlbnRSZXNwb25zZSh7dG9waWM6ZSxwYXlsb2FkOnR9KSx0aGlzLmNsaWVudC5jb3JlLmhpc3RvcnkuZGVsZXRlKGUsdC5pZCkpOnRoaXMub25SZWxheUV2ZW50VW5rbm93blBheWxvYWQoe3RvcGljOmUscGF5bG9hZDp0fSl9Y2F0Y2goaSl7dGhpcy5jbGllbnQubG9nZ2VyLmVycm9yKGkpfX0pfXJlZ2lzdGVyRXhwaXJlckV2ZW50cygpe3RoaXMuY2xpZW50LmNvcmUuZXhwaXJlci5vbih3ZS5leHBpcmVkLGFzeW5jIHI9Pntjb25zdHt0b3BpYzplLGlkOnN9PUtlKHIudGFyZ2V0KTtpZihzJiZ0aGlzLmNsaWVudC5wZW5kaW5nUmVxdWVzdC5rZXlzLmluY2x1ZGVzKHMpKXJldHVybiBhd2FpdCB0aGlzLmRlbGV0ZVBlbmRpbmdTZXNzaW9uUmVxdWVzdChzLGwoXCJFWFBJUkVEXCIpLCEwKTtlP3RoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhlKSYmKGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbihlLCEwKSx0aGlzLmNsaWVudC5ldmVudHMuZW1pdChcInNlc3Npb25fZXhwaXJlXCIse3RvcGljOmV9KSk6cyYmKGF3YWl0IHRoaXMuZGVsZXRlUHJvcG9zYWwocywhMCksdGhpcy5jbGllbnQuZXZlbnRzLmVtaXQoXCJwcm9wb3NhbF9leHBpcmVcIix7aWQ6c30pKX0pfXJlZ2lzdGVyUGFpcmluZ0V2ZW50cygpe3RoaXMuY2xpZW50LmNvcmUucGFpcmluZy5ldmVudHMub24oeWUuY3JlYXRlLHI9PnRoaXMub25QYWlyaW5nQ3JlYXRlZChyKSl9aXNWYWxpZFBhaXJpbmdUb3BpYyhyKXtpZighQyhyLCExKSl7Y29uc3R7bWVzc2FnZTplfT1sKFwiTUlTU0lOR19PUl9JTlZBTElEXCIsYHBhaXJpbmcgdG9waWMgc2hvdWxkIGJlIGEgc3RyaW5nOiAke3J9YCk7dGhyb3cgbmV3IEVycm9yKGUpfWlmKCF0aGlzLmNsaWVudC5jb3JlLnBhaXJpbmcucGFpcmluZ3Mua2V5cy5pbmNsdWRlcyhyKSl7Y29uc3R7bWVzc2FnZTplfT1sKFwiTk9fTUFUQ0hJTkdfS0VZXCIsYHBhaXJpbmcgdG9waWMgZG9lc24ndCBleGlzdDogJHtyfWApO3Rocm93IG5ldyBFcnJvcihlKX1pZihQKHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5nZXQocikuZXhwaXJ5KSl7Y29uc3R7bWVzc2FnZTplfT1sKFwiRVhQSVJFRFwiLGBwYWlyaW5nIHRvcGljOiAke3J9YCk7dGhyb3cgbmV3IEVycm9yKGUpfX1hc3luYyBpc1ZhbGlkU2Vzc2lvblRvcGljKHIpe2lmKCFDKHIsITEpKXtjb25zdHttZXNzYWdlOmV9PWwoXCJNSVNTSU5HX09SX0lOVkFMSURcIixgc2Vzc2lvbiB0b3BpYyBzaG91bGQgYmUgYSBzdHJpbmc6ICR7cn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9aWYoIXRoaXMuY2xpZW50LnNlc3Npb24ua2V5cy5pbmNsdWRlcyhyKSl7Y29uc3R7bWVzc2FnZTplfT1sKFwiTk9fTUFUQ0hJTkdfS0VZXCIsYHNlc3Npb24gdG9waWMgZG9lc24ndCBleGlzdDogJHtyfWApO3Rocm93IG5ldyBFcnJvcihlKX1pZihQKHRoaXMuY2xpZW50LnNlc3Npb24uZ2V0KHIpLmV4cGlyeSkpe2F3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbihyKTtjb25zdHttZXNzYWdlOmV9PWwoXCJFWFBJUkVEXCIsYHNlc3Npb24gdG9waWM6ICR7cn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9fWFzeW5jIGlzVmFsaWRTZXNzaW9uT3JQYWlyaW5nVG9waWMocil7aWYodGhpcy5jbGllbnQuc2Vzc2lvbi5rZXlzLmluY2x1ZGVzKHIpKWF3YWl0IHRoaXMuaXNWYWxpZFNlc3Npb25Ub3BpYyhyKTtlbHNlIGlmKHRoaXMuY2xpZW50LmNvcmUucGFpcmluZy5wYWlyaW5ncy5rZXlzLmluY2x1ZGVzKHIpKXRoaXMuaXNWYWxpZFBhaXJpbmdUb3BpYyhyKTtlbHNlIGlmKEMociwhMSkpe2NvbnN0e21lc3NhZ2U6ZX09bChcIk5PX01BVENISU5HX0tFWVwiLGBzZXNzaW9uIG9yIHBhaXJpbmcgdG9waWMgZG9lc24ndCBleGlzdDogJHtyfWApO3Rocm93IG5ldyBFcnJvcihlKX1lbHNle2NvbnN0e21lc3NhZ2U6ZX09bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBzZXNzaW9uIG9yIHBhaXJpbmcgdG9waWMgc2hvdWxkIGJlIGEgc3RyaW5nOiAke3J9YCk7dGhyb3cgbmV3IEVycm9yKGUpfX1hc3luYyBpc1ZhbGlkUHJvcG9zYWxJZChyKXtpZigha2Uocikpe2NvbnN0e21lc3NhZ2U6ZX09bChcIk1JU1NJTkdfT1JfSU5WQUxJRFwiLGBwcm9wb3NhbCBpZCBzaG91bGQgYmUgYSBudW1iZXI6ICR7cn1gKTt0aHJvdyBuZXcgRXJyb3IoZSl9aWYoIXRoaXMuY2xpZW50LnByb3Bvc2FsLmtleXMuaW5jbHVkZXMocikpe2NvbnN0e21lc3NhZ2U6ZX09bChcIk5PX01BVENISU5HX0tFWVwiLGBwcm9wb3NhbCBpZCBkb2Vzbid0IGV4aXN0OiAke3J9YCk7dGhyb3cgbmV3IEVycm9yKGUpfWlmKFAodGhpcy5jbGllbnQucHJvcG9zYWwuZ2V0KHIpLmV4cGlyeSkpe2F3YWl0IHRoaXMuZGVsZXRlUHJvcG9zYWwocik7Y29uc3R7bWVzc2FnZTplfT1sKFwiRVhQSVJFRFwiLGBwcm9wb3NhbCBpZDogJHtyfWApO3Rocm93IG5ldyBFcnJvcihlKX19fWNsYXNzIGRzIGV4dGVuZHMga3tjb25zdHJ1Y3RvcihyLGUpe3N1cGVyKHIsZSxuZSxHKSx0aGlzLmNvcmU9cix0aGlzLmxvZ2dlcj1lfX1jbGFzcyB1cyBleHRlbmRzIGt7Y29uc3RydWN0b3IocixlKXtzdXBlcihyLGUsYWUsRyksdGhpcy5jb3JlPXIsdGhpcy5sb2dnZXI9ZX19Y2xhc3MgZ3MgZXh0ZW5kcyBre2NvbnN0cnVjdG9yKHIsZSl7c3VwZXIocixlLGxlLEcscz0+cy5pZCksdGhpcy5jb3JlPXIsdGhpcy5sb2dnZXI9ZX19Y2xhc3MgUSBleHRlbmRzIHFle2NvbnN0cnVjdG9yKHIpe3N1cGVyKHIpLHRoaXMucHJvdG9jb2w9WCx0aGlzLnZlcnNpb249Rix0aGlzLm5hbWU9TS5uYW1lLHRoaXMuZXZlbnRzPW5ldyBqZSx0aGlzLm9uPShzLHQpPT50aGlzLmV2ZW50cy5vbihzLHQpLHRoaXMub25jZT0ocyx0KT0+dGhpcy5ldmVudHMub25jZShzLHQpLHRoaXMub2ZmPShzLHQpPT50aGlzLmV2ZW50cy5vZmYocyx0KSx0aGlzLnJlbW92ZUxpc3RlbmVyPShzLHQpPT50aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihzLHQpLHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzPXM9PnRoaXMuZXZlbnRzLnJlbW92ZUFsbExpc3RlbmVycyhzKSx0aGlzLmNvbm5lY3Q9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUuY29ubmVjdChzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLnBhaXI9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUucGFpcihzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLmFwcHJvdmU9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUuYXBwcm92ZShzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLnJlamVjdD1hc3luYyBzPT57dHJ5e3JldHVybiBhd2FpdCB0aGlzLmVuZ2luZS5yZWplY3Qocyl9Y2F0Y2godCl7dGhyb3cgdGhpcy5sb2dnZXIuZXJyb3IodC5tZXNzYWdlKSx0fX0sdGhpcy51cGRhdGU9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUudXBkYXRlKHMpfWNhdGNoKHQpe3Rocm93IHRoaXMubG9nZ2VyLmVycm9yKHQubWVzc2FnZSksdH19LHRoaXMuZXh0ZW5kPWFzeW5jIHM9Pnt0cnl7cmV0dXJuIGF3YWl0IHRoaXMuZW5naW5lLmV4dGVuZChzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLnJlcXVlc3Q9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUucmVxdWVzdChzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLnJlc3BvbmQ9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUucmVzcG9uZChzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLnBpbmc9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUucGluZyhzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLmVtaXQ9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUuZW1pdChzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLmRpc2Nvbm5lY3Q9YXN5bmMgcz0+e3RyeXtyZXR1cm4gYXdhaXQgdGhpcy5lbmdpbmUuZGlzY29ubmVjdChzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLmZpbmQ9cz0+e3RyeXtyZXR1cm4gdGhpcy5lbmdpbmUuZmluZChzKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcih0Lm1lc3NhZ2UpLHR9fSx0aGlzLmdldFBlbmRpbmdTZXNzaW9uUmVxdWVzdHM9KCk9Pnt0cnl7cmV0dXJuIHRoaXMuZW5naW5lLmdldFBlbmRpbmdTZXNzaW9uUmVxdWVzdHMoKX1jYXRjaChzKXt0aHJvdyB0aGlzLmxvZ2dlci5lcnJvcihzLm1lc3NhZ2UpLHN9fSx0aGlzLm5hbWU9cj8ubmFtZXx8TS5uYW1lLHRoaXMubWV0YWRhdGE9cj8ubWV0YWRhdGF8fHplKCk7Y29uc3QgZT10eXBlb2Ygcj8ubG9nZ2VyPFwidVwiJiZ0eXBlb2Ygcj8ubG9nZ2VyIT1cInN0cmluZ1wiP3IubG9nZ2VyOkVlKFJlKHtsZXZlbDpyPy5sb2dnZXJ8fE0ubG9nZ2VyfSkpO3RoaXMuY29yZT1yPy5jb3JlfHxuZXcgU2UociksdGhpcy5sb2dnZXI9SWUoZSx0aGlzLm5hbWUpLHRoaXMuc2Vzc2lvbj1uZXcgdXModGhpcy5jb3JlLHRoaXMubG9nZ2VyKSx0aGlzLnByb3Bvc2FsPW5ldyBkcyh0aGlzLmNvcmUsdGhpcy5sb2dnZXIpLHRoaXMucGVuZGluZ1JlcXVlc3Q9bmV3IGdzKHRoaXMuY29yZSx0aGlzLmxvZ2dlciksdGhpcy5lbmdpbmU9bmV3IGhzKHRoaXMpfXN0YXRpYyBhc3luYyBpbml0KHIpe2NvbnN0IGU9bmV3IFEocik7cmV0dXJuIGF3YWl0IGUuaW5pdGlhbGl6ZSgpLGV9Z2V0IGNvbnRleHQoKXtyZXR1cm4gX2UodGhpcy5sb2dnZXIpfWdldCBwYWlyaW5nKCl7cmV0dXJuIHRoaXMuY29yZS5wYWlyaW5nLnBhaXJpbmdzfWFzeW5jIGluaXRpYWxpemUoKXt0aGlzLmxvZ2dlci50cmFjZShcIkluaXRpYWxpemVkXCIpO3RyeXthd2FpdCB0aGlzLmNvcmUuc3RhcnQoKSxhd2FpdCB0aGlzLnNlc3Npb24uaW5pdCgpLGF3YWl0IHRoaXMucHJvcG9zYWwuaW5pdCgpLGF3YWl0IHRoaXMucGVuZGluZ1JlcXVlc3QuaW5pdCgpLGF3YWl0IHRoaXMuZW5naW5lLmluaXQoKSx0aGlzLmNvcmUudmVyaWZ5LmluaXQoe3ZlcmlmeVVybDp0aGlzLm1ldGFkYXRhLnZlcmlmeVVybH0pLHRoaXMubG9nZ2VyLmluZm8oXCJTaWduQ2xpZW50IEluaXRpYWxpemF0aW9uIFN1Y2Nlc3NcIil9Y2F0Y2gocil7dGhyb3cgdGhpcy5sb2dnZXIuaW5mbyhcIlNpZ25DbGllbnQgSW5pdGlhbGl6YXRpb24gRmFpbHVyZVwiKSx0aGlzLmxvZ2dlci5lcnJvcihyLm1lc3NhZ2UpLHJ9fX1jb25zdCBtcz1RO2V4cG9ydHtjZSBhcyBFTkdJTkVfQ09OVEVYVCxJIGFzIEVOR0lORV9RVUVVRV9TVEFURVMsViBhcyBFTkdJTkVfUlBDX09QVFMsaXMgYXMgSElTVE9SWV9DT05URVhULHRzIGFzIEhJU1RPUllfRVZFTlRTLHJzIGFzIEhJU1RPUllfU1RPUkFHRV9WRVJTSU9OLHBlIGFzIE1FVEhPRFNfVE9fVkVSSUZZLG5lIGFzIFBST1BPU0FMX0NPTlRFWFQsbnMgYXMgUFJPUE9TQUxfRVhQSVJZLG9lIGFzIFBST1BPU0FMX0VYUElSWV9NRVNTQUdFLGxlIGFzIFJFUVVFU1RfQ09OVEVYVCxhZSBhcyBTRVNTSU9OX0NPTlRFWFQsQSBhcyBTRVNTSU9OX0VYUElSWSxVIGFzIFNFU1NJT05fUkVRVUVTVF9FWFBJUllfQk9VTkRBUklFUyxIIGFzIFNJR05fQ0xJRU5UX0NPTlRFWFQsTSBhcyBTSUdOX0NMSUVOVF9ERUZBVUxULGVzIGFzIFNJR05fQ0xJRU5UX0VWRU5UUyxYIGFzIFNJR05fQ0xJRU5UX1BST1RPQ09MLHNzIGFzIFNJR05fQ0xJRU5UX1NUT1JBR0VfT1BUSU9OUyxHIGFzIFNJR05fQ0xJRU5UX1NUT1JBR0VfUFJFRklYLEYgYXMgU0lHTl9DTElFTlRfVkVSU0lPTixtcyBhcyBTaWduQ2xpZW50LFcgYXMgV0FMTEVUQ09OTkVDVF9ERUVQTElOS19DSE9JQ0UsUSBhcyBkZWZhdWx0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlJFTEFZRVJfREVGQVVMVF9QUk9UT0NPTCIsImdlIiwiUkVMQVlFUl9FVkVOVFMiLCJaIiwiVkVSSUZZX1NFUlZFUiIsIm1lIiwiRVhQSVJFUl9FVkVOVFMiLCJ3ZSIsIlBBSVJJTkdfRVZFTlRTIiwieWUiLCJTdG9yZSIsImsiLCJDb3JlIiwiU2UiLCJwaW5vIiwiRWUiLCJnZXREZWZhdWx0TG9nZ2VyT3B0aW9ucyIsIlJlIiwiZ2VuZXJhdGVDaGlsZExvZ2dlciIsIkllIiwiZ2V0TG9nZ2VyQ29udGV4dCIsIl9lIiwiSUVuZ2luZSIsIk5lIiwiSVNpZ25DbGllbnQiLCJxZSIsIlRZUEVfMSIsImZlIiwiY3JlYXRlRGVsYXllZFByb21pc2UiLCJ4IiwiZW5naW5lRXZlbnQiLCJ1IiwiZ2V0SW50ZXJuYWxFcnJvciIsImwiLCJjYWxjRXhwaXJ5IiwiXyIsImlzVmFsaWRPYmplY3QiLCJ6IiwiZ2V0UmVxdWlyZWROYW1lc3BhY2VzRnJvbU5hbWVzcGFjZXMiLCJ2ZSIsImdldFNka0Vycm9yIiwiTiIsImdldERlZXBMaW5rIiwiUGUiLCJoYW5kbGVEZWVwbGlua1JlZGlyZWN0IiwiT2UiLCJpc1Nlc3Npb25Db21wYXRpYmxlIiwiVmUiLCJpc0Jyb3dzZXIiLCJUZSIsImhhc2hNZXNzYWdlIiwiWSIsImlzRXhwaXJlZCIsIlAiLCJNZW1vcnlTdG9yZSIsIiQiLCJpc1ZhbGlkUGFyYW1zIiwiRSIsImlzVW5kZWZpbmVkIiwiRCIsImlzVmFsaWRSZWxheXMiLCJ4ZSIsImlzVmFsaWRSZXF1aXJlZE5hbWVzcGFjZXMiLCJEZSIsImlzVmFsaWROYW1lc3BhY2VzIiwiaiIsImlzQ29uZm9ybWluZ05hbWVzcGFjZXMiLCJlZSIsImlzVmFsaWRTdHJpbmciLCJDIiwiaXNWYWxpZEVycm9yUmVhc29uIiwiQ2UiLCJpc1ZhbGlkUmVsYXkiLCJBZSIsImlzVmFsaWRDb250cm9sbGVyIiwiYmUiLCJpc1ZhbGlkTmFtZXNwYWNlc0NoYWluSWQiLCJzZSIsImlzVmFsaWRSZXF1ZXN0IiwiTGUiLCJpc1ZhbGlkTmFtZXNwYWNlc1JlcXVlc3QiLCIkZSIsImlzVmFsaWRSZXF1ZXN0RXhwaXJ5IiwiR2UiLCJpc1ZhbGlkUmVzcG9uc2UiLCJNZSIsImlzVmFsaWRFdmVudCIsIlVlIiwiaXNWYWxpZE5hbWVzcGFjZXNFdmVudCIsIlFlIiwicGFyc2VFeHBpcmVyVGFyZ2V0IiwiS2UiLCJpc1ZhbGlkSWQiLCJrZSIsImdldEFwcE1ldGFkYXRhIiwiemUiLCJZZSIsIkV2ZW50RW1pdHRlciIsImplIiwiVEhJUlRZX0RBWVMiLCJKZSIsIlNFVkVOX0RBWVMiLCJ0ZSIsIkZJVkVfTUlOVVRFUyIsInkiLCJPTkVfREFZIiwiTyIsIlRISVJUWV9TRUNPTkRTIiwiaWUiLCJPTkVfU0VDT05EIiwiWGUiLCJ0b01pbGlzZWNvbmRzIiwicmUiLCJwYXlsb2FkSWQiLCJGZSIsImlzSnNvblJwY1Jlc3VsdCIsInEiLCJpc0pzb25ScGNFcnJvciIsImYiLCJmb3JtYXRKc29uUnBjUmVxdWVzdCIsIkoiLCJmb3JtYXRKc29uUnBjUmVzdWx0IiwiSGUiLCJmb3JtYXRKc29uUnBjRXJyb3IiLCJXZSIsImlzSnNvblJwY1JlcXVlc3QiLCJCZSIsImlzSnNvblJwY1Jlc3BvbnNlIiwiWmUiLCJYIiwiRiIsIkgiLCJHIiwiTSIsIm5hbWUiLCJsb2dnZXIiLCJjb250cm9sbGVyIiwicmVsYXlVcmwiLCJlcyIsInNlc3Npb25fcHJvcG9zYWwiLCJzZXNzaW9uX3VwZGF0ZSIsInNlc3Npb25fZXh0ZW5kIiwic2Vzc2lvbl9waW5nIiwic2Vzc2lvbl9kZWxldGUiLCJzZXNzaW9uX2V4cGlyZSIsInNlc3Npb25fcmVxdWVzdCIsInNlc3Npb25fcmVxdWVzdF9zZW50Iiwic2Vzc2lvbl9ldmVudCIsInByb3Bvc2FsX2V4cGlyZSIsInNzIiwiZGF0YWJhc2UiLCJXIiwidHMiLCJjcmVhdGVkIiwidXBkYXRlZCIsImRlbGV0ZWQiLCJzeW5jIiwiaXMiLCJycyIsIm5lIiwibnMiLCJvZSIsImFlIiwiQSIsImNlIiwiViIsIndjX3Nlc3Npb25Qcm9wb3NlIiwicmVxIiwidHRsIiwicHJvbXB0IiwidGFnIiwicmVzIiwid2Nfc2Vzc2lvblNldHRsZSIsIndjX3Nlc3Npb25VcGRhdGUiLCJ3Y19zZXNzaW9uRXh0ZW5kIiwid2Nfc2Vzc2lvblJlcXVlc3QiLCJ3Y19zZXNzaW9uRXZlbnQiLCJ3Y19zZXNzaW9uRGVsZXRlIiwid2Nfc2Vzc2lvblBpbmciLCJVIiwibWluIiwibWF4IiwiSSIsImlkbGUiLCJhY3RpdmUiLCJsZSIsInBlIiwib3MiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImFzIiwiZGVmaW5lUHJvcGVydGllcyIsImNzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImhlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibHMiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInBzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJkZSIsIm0iLCJyIiwiZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiZyIsImNhbGwiLCJiIiwiaHMiLCJpc0luaXRpYWxpemVkIiwiaW5pdGlhbGl6ZWQiLCJtZXNzYWdlIiwiRXJyb3IiLCJjbGllbnQiLCJjb3JlIiwicmVsYXllciIsImNvbmZpcm1PbmxpbmVTdGF0ZU9yVGhyb3ciLCJyZWdpc3RlclJlbGF5ZXJFdmVudHMiLCJvbiIsInRvcGljIiwicyIsImlnbm9yZWRQYXlsb2FkVHlwZXMiLCJpbmNsdWRlcyIsImNyeXB0byIsImdldFBheWxvYWRUeXBlIiwidCIsImRlY29kZSIsImhpc3RvcnkiLCJzZXQiLCJvblJlbGF5RXZlbnRSZXF1ZXN0IiwicGF5bG9hZCIsInJlc29sdmUiLCJvblJlbGF5RXZlbnRSZXNwb25zZSIsImRlbGV0ZSIsImlkIiwib25SZWxheUV2ZW50VW5rbm93blBheWxvYWQiLCJpIiwiZXJyb3IiLCJyZWdpc3RlckV4cGlyZXJFdmVudHMiLCJleHBpcmVyIiwiZXhwaXJlZCIsInRhcmdldCIsInBlbmRpbmdSZXF1ZXN0Iiwia2V5cyIsImRlbGV0ZVBlbmRpbmdTZXNzaW9uUmVxdWVzdCIsInNlc3Npb24iLCJkZWxldGVTZXNzaW9uIiwiZXZlbnRzIiwiZW1pdCIsImRlbGV0ZVByb3Bvc2FsIiwicmVnaXN0ZXJQYWlyaW5nRXZlbnRzIiwicGFpcmluZyIsImNyZWF0ZSIsIm9uUGFpcmluZ0NyZWF0ZWQiLCJpc1ZhbGlkUGFpcmluZ1RvcGljIiwicGFpcmluZ3MiLCJnZXQiLCJleHBpcnkiLCJpc1ZhbGlkU2Vzc2lvblRvcGljIiwiaXNWYWxpZFNlc3Npb25PclBhaXJpbmdUb3BpYyIsImlzVmFsaWRQcm9wb3NhbElkIiwicHJvcG9zYWwiLCJjb25zdHJ1Y3RvciIsInJlcXVlc3RRdWV1ZSIsInN0YXRlIiwicXVldWUiLCJzZXNzaW9uUmVxdWVzdFF1ZXVlIiwicmVxdWVzdFF1ZXVlRGVsYXkiLCJpbml0IiwiY2xlYW51cCIsInJlZ2lzdGVyIiwibWV0aG9kcyIsInNldFRpbWVvdXQiLCJnZXRQZW5kaW5nU2Vzc2lvblJlcXVlc3RzIiwicHJvY2Vzc1Nlc3Npb25SZXF1ZXN0UXVldWUiLCJjb25uZWN0IiwicmVxdWlyZWROYW1lc3BhY2VzIiwib3B0aW9uYWxOYW1lc3BhY2VzIiwiaXNWYWxpZENvbm5lY3QiLCJwYWlyaW5nVG9waWMiLCJuIiwic2Vzc2lvblByb3BlcnRpZXMiLCJvIiwicmVsYXlzIiwiYSIsImMiLCJwIiwiZCIsInYiLCJ1cmkiLCJTIiwiaCIsImdlbmVyYXRlS2V5UGFpciIsIlIiLCJwcm90b2NvbCIsInByb3Bvc2VyIiwicHVibGljS2V5IiwibWV0YWRhdGEiLCJyZWplY3QiLCJ3IiwiVCIsImRvbmUiLCJLIiwib25jZSIsInNlbGYiLCJCIiwic2V0RXhwaXJ5IiwidXBkYXRlTWV0YWRhdGEiLCJwZWVyIiwiTCIsInNlbmRSZXF1ZXN0IiwibWV0aG9kIiwicGFyYW1zIiwidWUiLCJzZXRQcm9wb3NhbCIsImFwcHJvdmFsIiwicGFpciIsImFwcHJvdmUiLCJpc1ZhbGlkQXBwcm92ZSIsInJlbGF5UHJvdG9jb2wiLCJuYW1lc3BhY2VzIiwiZ2VuZXJhdGVTaGFyZWRLZXkiLCJzZW5kUmVzdWx0IiwicmVzdWx0IiwicmVsYXkiLCJyZXNwb25kZXJQdWJsaWNLZXkiLCJhY3RpdmF0ZSIsInN1YnNjcmliZSIsInRocm93T25GYWlsZWRQdWJsaXNoIiwiYWNrbm93bGVkZ2VkIiwiUHJvbWlzZSIsImlzVmFsaWRSZWplY3QiLCJyZWFzb24iLCJzZW5kRXJyb3IiLCJ1cGRhdGUiLCJpc1ZhbGlkVXBkYXRlIiwiZXh0ZW5kIiwiaXNWYWxpZEV4dGVuZCIsInJlcXVlc3QiLCJjaGFpbklkIiwiYWxsIiwiY2xpZW50UnBjSWQiLCJjYXRjaCIsInN0b3JhZ2UiLCJ3Y0RlZXBMaW5rIiwidGhlbiIsInJlc3BvbmQiLCJpc1ZhbGlkUmVzcG9uZCIsInJlc3BvbnNlIiwiY2xlYW51cEFmdGVyUmVzcG9uc2UiLCJwaW5nIiwiaXNWYWxpZFBpbmciLCJpc1ZhbGlkRW1pdCIsImV2ZW50IiwiZGlzY29ubmVjdCIsImlzVmFsaWREaXNjb25uZWN0IiwiZmluZCIsImdldEFsbCIsImZpbHRlciIsImNsZWFudXBEdXBsaWNhdGVQYWlyaW5ncyIsInBlZXJNZXRhZGF0YSIsInVybCIsImxlbmd0aCIsImluZm8iLCJtYXAiLCJ1bnN1YnNjcmliZSIsImtleWNoYWluIiwiaGFzIiwiZGVsZXRlS2V5UGFpciIsImRlbGV0ZVN5bUtleSIsImRlbCIsInJlbW92ZUl0ZW0iLCJ3YXJuIiwic2V0UGVuZGluZ1Nlc3Npb25SZXF1ZXN0IiwidmVyaWZ5Q29udGV4dCIsInJlbGF5UnBjSWQiLCJKU09OIiwic3RyaW5naWZ5IiwidmVyaWZ5IiwiYXR0ZXN0YXRpb25JZCIsImVuY29kZSIsImludGVybmFsIiwicHVibGlzaCIsImZvckVhY2giLCJwdXNoIiwicHJvY2Vzc1JlcXVlc3RzUXVldWUiLCJzaGlmdCIsInByb2Nlc3NSZXF1ZXN0Iiwib25TZXNzaW9uUHJvcG9zZVJlcXVlc3QiLCJvblNlc3Npb25TZXR0bGVSZXF1ZXN0Iiwib25TZXNzaW9uVXBkYXRlUmVxdWVzdCIsIm9uU2Vzc2lvbkV4dGVuZFJlcXVlc3QiLCJvblNlc3Npb25QaW5nUmVxdWVzdCIsIm9uU2Vzc2lvbkRlbGV0ZVJlcXVlc3QiLCJvblNlc3Npb25SZXF1ZXN0Iiwib25TZXNzaW9uRXZlbnRSZXF1ZXN0Iiwib25TZXNzaW9uUHJvcG9zZVJlc3BvbnNlIiwib25TZXNzaW9uU2V0dGxlUmVzcG9uc2UiLCJvblNlc3Npb25VcGRhdGVSZXNwb25zZSIsIm9uU2Vzc2lvbkV4dGVuZFJlc3BvbnNlIiwib25TZXNzaW9uUGluZ1Jlc3BvbnNlIiwib25TZXNzaW9uUmVxdWVzdFJlc3BvbnNlIiwiZ2V0VmVyaWZ5Q29udGV4dCIsInRyYWNlIiwidHlwZSIsInNlbGZQdWJsaWNLZXkiLCJwZWVyUHVibGljS2V5Iiwic2Vzc2lvblRvcGljIiwic3Vic2NyaXB0aW9uSWQiLCJpc1ZhbGlkU2Vzc2lvblNldHRsZVJlcXVlc3QiLCJpc1JlcXVlc3RPdXRPZlN5bmMiLCJwYXJzZUludCIsInRvU3RyaW5nIiwic2xpY2UiLCJhZGRTZXNzaW9uUmVxdWVzdFRvU2Vzc2lvblJlcXVlc3RRdWV1ZSIsImNvZGUiLCJ2YWxpZGF0ZU5hbWVzcGFjZXMiLCJ2YWxpZGF0ZVNlc3Npb25Qcm9wcyIsInZlcmlmaWVkIiwidmVyaWZ5VXJsIiwidmFsaWRhdGlvbiIsIm9yaWdpbiIsImlzU2NhbSIsIlVSTCIsInZhbHVlcyIsImRzIiwidXMiLCJncyIsIlEiLCJpbml0aWFsaXplIiwiY29udGV4dCIsInN0YXJ0IiwiZW5naW5lIiwidmVyc2lvbiIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwibGV2ZWwiLCJtcyIsIkVOR0lORV9DT05URVhUIiwiRU5HSU5FX1FVRVVFX1NUQVRFUyIsIkVOR0lORV9SUENfT1BUUyIsIkhJU1RPUllfQ09OVEVYVCIsIkhJU1RPUllfRVZFTlRTIiwiSElTVE9SWV9TVE9SQUdFX1ZFUlNJT04iLCJNRVRIT0RTX1RPX1ZFUklGWSIsIlBST1BPU0FMX0NPTlRFWFQiLCJQUk9QT1NBTF9FWFBJUlkiLCJQUk9QT1NBTF9FWFBJUllfTUVTU0FHRSIsIlJFUVVFU1RfQ09OVEVYVCIsIlNFU1NJT05fQ09OVEVYVCIsIlNFU1NJT05fRVhQSVJZIiwiU0VTU0lPTl9SRVFVRVNUX0VYUElSWV9CT1VOREFSSUVTIiwiU0lHTl9DTElFTlRfQ09OVEVYVCIsIlNJR05fQ0xJRU5UX0RFRkFVTFQiLCJTSUdOX0NMSUVOVF9FVkVOVFMiLCJTSUdOX0NMSUVOVF9QUk9UT0NPTCIsIlNJR05fQ0xJRU5UX1NUT1JBR0VfT1BUSU9OUyIsIlNJR05fQ0xJRU5UX1NUT1JBR0VfUFJFRklYIiwiU0lHTl9DTElFTlRfVkVSU0lPTiIsIlNpZ25DbGllbnQiLCJXQUxMRVRDT05ORUNUX0RFRVBMSU5LX0NIT0lDRSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/sign-client/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/types/dist/index.es.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICore: function() { return /* binding */ n; },\n/* harmony export */   ICrypto: function() { return /* binding */ l; },\n/* harmony export */   IEngine: function() { return /* binding */ S; },\n/* harmony export */   IEngineEvents: function() { return /* binding */ C; },\n/* harmony export */   IExpirer: function() { return /* binding */ E; },\n/* harmony export */   IJsonRpcHistory: function() { return /* binding */ h; },\n/* harmony export */   IKeyChain: function() { return /* binding */ x; },\n/* harmony export */   IMessageTracker: function() { return /* binding */ a; },\n/* harmony export */   IPairing: function() { return /* binding */ m; },\n/* harmony export */   IPublisher: function() { return /* binding */ u; },\n/* harmony export */   IRelayer: function() { return /* binding */ g; },\n/* harmony export */   ISignClient: function() { return /* binding */ b; },\n/* harmony export */   ISignClientEvents: function() { return /* binding */ v; },\n/* harmony export */   IStore: function() { return /* binding */ p; },\n/* harmony export */   ISubscriber: function() { return /* binding */ d; },\n/* harmony export */   ISubscriberTopicMap: function() { return /* binding */ I; },\n/* harmony export */   IVerify: function() { return /* binding */ y; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super(), this.opts = s, this.protocol = \"wc\", this.version = 2;\n    }\n}\nclass l {\n    constructor(s, t, o){\n        this.core = s, this.logger = t;\n    }\n}\nclass h extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.core = s, this.logger = t, this.records = new Map;\n    }\n}\nclass a {\n    constructor(s, t){\n        this.logger = s, this.core = t;\n    }\n}\nclass u extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.relayer = s, this.logger = t;\n    }\n}\nclass g extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super();\n    }\n}\nclass p {\n    constructor(s, t, o, w){\n        this.core = s, this.logger = t, this.name = o;\n    }\n}\nclass I {\n    constructor(){\n        this.map = new Map;\n    }\n}\nclass d extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.relayer = s, this.logger = t;\n    }\n}\nclass x {\n    constructor(s, t){\n        this.core = s, this.logger = t;\n    }\n}\nclass E extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.core = s, this.logger = t;\n    }\n}\nclass m {\n    constructor(s, t){\n        this.logger = s, this.core = t;\n    }\n}\nclass y {\n    constructor(s, t){\n        this.projectId = s, this.logger = t;\n    }\n}\nclass v extends (events__WEBPACK_IMPORTED_MODULE_1___default()) {\n    constructor(){\n        super();\n    }\n}\nclass b {\n    constructor(s){\n        this.opts = s, this.protocol = \"wc\", this.version = 2;\n    }\n}\nclass C extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super();\n    }\n}\nclass S {\n    constructor(s){\n        this.client = s;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90eXBlcy9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQXlDO0FBQUEsTUFBTUssVUFBVUosMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssSUFBRyxJQUFJLENBQUNDLElBQUksR0FBQ0QsR0FBRSxJQUFJLENBQUNFLFFBQVEsR0FBQyxNQUFLLElBQUksQ0FBQ0MsT0FBTyxHQUFDO0lBQUM7QUFBQztBQUFDLE1BQU1DO0lBQUVMLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDQyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUNDLElBQUksR0FBQ1AsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0g7SUFBQztBQUFDO0FBQUMsTUFBTUksVUFBVWYsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ0UsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSCxHQUFFLElBQUksQ0FBQ0ssT0FBTyxHQUFDLElBQUlDO0lBQUc7QUFBQztBQUFDLE1BQU1DO0lBQUViLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDRyxNQUFNLEdBQUNSLEdBQUUsSUFBSSxDQUFDTyxJQUFJLEdBQUNGO0lBQUM7QUFBQztBQUFDLE1BQU1RLFVBQVVuQiwwREFBQ0E7SUFBQ0ssWUFBWUMsQ0FBQyxFQUFDSyxDQUFDLENBQUM7UUFBQyxLQUFLLElBQUcsSUFBSSxDQUFDUyxPQUFPLEdBQUNkLEdBQUUsSUFBSSxDQUFDUSxNQUFNLEdBQUNIO0lBQUM7QUFBQztBQUFDLE1BQU1VLFVBQVVyQiwwREFBQ0E7SUFBQ0ssWUFBWUMsQ0FBQyxDQUFDO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNZ0I7SUFBRWpCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxFQUFDQyxDQUFDLEVBQUNXLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ1YsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSCxHQUFFLElBQUksQ0FBQ2EsSUFBSSxHQUFDWjtJQUFDO0FBQUM7QUFBQyxNQUFNYTtJQUFFcEIsYUFBYTtRQUFDLElBQUksQ0FBQ3FCLEdBQUcsR0FBQyxJQUFJVDtJQUFHO0FBQUM7QUFBQyxNQUFNVSxVQUFVM0IsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ1MsT0FBTyxHQUFDZCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNaUI7SUFBRXZCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDRSxJQUFJLEdBQUNQLEdBQUUsSUFBSSxDQUFDUSxNQUFNLEdBQUNIO0lBQUM7QUFBQztBQUFDLE1BQU1rQixVQUFVN0IsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ0UsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNbUI7SUFBRXpCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDRyxNQUFNLEdBQUNSLEdBQUUsSUFBSSxDQUFDTyxJQUFJLEdBQUNGO0lBQUM7QUFBQztBQUFDLE1BQU1vQjtJQUFFMUIsWUFBWUMsQ0FBQyxFQUFDSyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUNxQixTQUFTLEdBQUMxQixHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNc0IsVUFBVWhDLCtDQUFDQTtJQUFDSSxhQUFhO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNNkI7SUFBRTdCLFlBQVlDLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ0MsSUFBSSxHQUFDRCxHQUFFLElBQUksQ0FBQ0UsUUFBUSxHQUFDLE1BQUssSUFBSSxDQUFDQyxPQUFPLEdBQUM7SUFBQztBQUFDO0FBQUMsTUFBTTBCLFVBQVVoQyxnREFBQ0E7SUFBQ0UsYUFBYTtRQUFDLEtBQUs7SUFBRTtBQUFDO0FBQUMsTUFBTStCO0lBQUUvQixZQUFZQyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUMrQixNQUFNLEdBQUMvQjtJQUFDO0FBQUM7QUFBK1IsQ0FDajJDLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdHlwZXMvZGlzdC9pbmRleC5lcy5qcz82MGE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtJRXZlbnRzIGFzIGV9ZnJvbVwiQHdhbGxldGNvbm5lY3QvZXZlbnRzXCI7aW1wb3J0IGMse0V2ZW50RW1pdHRlciBhcyBpfWZyb21cImV2ZW50c1wiO2NsYXNzIG4gZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMpe3N1cGVyKCksdGhpcy5vcHRzPXMsdGhpcy5wcm90b2NvbD1cIndjXCIsdGhpcy52ZXJzaW9uPTJ9fWNsYXNzIGx7Y29uc3RydWN0b3Iocyx0LG8pe3RoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIGggZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10LHRoaXMucmVjb3Jkcz1uZXcgTWFwfX1jbGFzcyBhe2NvbnN0cnVjdG9yKHMsdCl7dGhpcy5sb2dnZXI9cyx0aGlzLmNvcmU9dH19Y2xhc3MgdSBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyx0KXtzdXBlcigpLHRoaXMucmVsYXllcj1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIGcgZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMpe3N1cGVyKCl9fWNsYXNzIHB7Y29uc3RydWN0b3Iocyx0LG8sdyl7dGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dCx0aGlzLm5hbWU9b319Y2xhc3MgSXtjb25zdHJ1Y3Rvcigpe3RoaXMubWFwPW5ldyBNYXB9fWNsYXNzIGQgZXh0ZW5kcyBle2NvbnN0cnVjdG9yKHMsdCl7c3VwZXIoKSx0aGlzLnJlbGF5ZXI9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyB4e2NvbnN0cnVjdG9yKHMsdCl7dGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dH19Y2xhc3MgRSBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyx0KXtzdXBlcigpLHRoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIG17Y29uc3RydWN0b3Iocyx0KXt0aGlzLmxvZ2dlcj1zLHRoaXMuY29yZT10fX1jbGFzcyB5e2NvbnN0cnVjdG9yKHMsdCl7dGhpcy5wcm9qZWN0SWQ9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyB2IGV4dGVuZHMgY3tjb25zdHJ1Y3Rvcigpe3N1cGVyKCl9fWNsYXNzIGJ7Y29uc3RydWN0b3Iocyl7dGhpcy5vcHRzPXMsdGhpcy5wcm90b2NvbD1cIndjXCIsdGhpcy52ZXJzaW9uPTJ9fWNsYXNzIEMgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKCl7c3VwZXIoKX19Y2xhc3MgU3tjb25zdHJ1Y3RvcihzKXt0aGlzLmNsaWVudD1zfX1leHBvcnR7biBhcyBJQ29yZSxsIGFzIElDcnlwdG8sUyBhcyBJRW5naW5lLEMgYXMgSUVuZ2luZUV2ZW50cyxFIGFzIElFeHBpcmVyLGggYXMgSUpzb25ScGNIaXN0b3J5LHggYXMgSUtleUNoYWluLGEgYXMgSU1lc3NhZ2VUcmFja2VyLG0gYXMgSVBhaXJpbmcsdSBhcyBJUHVibGlzaGVyLGcgYXMgSVJlbGF5ZXIsYiBhcyBJU2lnbkNsaWVudCx2IGFzIElTaWduQ2xpZW50RXZlbnRzLHAgYXMgSVN0b3JlLGQgYXMgSVN1YnNjcmliZXIsSSBhcyBJU3Vic2NyaWJlclRvcGljTWFwLHkgYXMgSVZlcmlmeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJJRXZlbnRzIiwiZSIsImMiLCJFdmVudEVtaXR0ZXIiLCJpIiwibiIsImNvbnN0cnVjdG9yIiwicyIsIm9wdHMiLCJwcm90b2NvbCIsInZlcnNpb24iLCJsIiwidCIsIm8iLCJjb3JlIiwibG9nZ2VyIiwiaCIsInJlY29yZHMiLCJNYXAiLCJhIiwidSIsInJlbGF5ZXIiLCJnIiwicCIsInciLCJuYW1lIiwiSSIsIm1hcCIsImQiLCJ4IiwiRSIsIm0iLCJ5IiwicHJvamVjdElkIiwidiIsImIiLCJDIiwiUyIsImNsaWVudCIsIklDb3JlIiwiSUNyeXB0byIsIklFbmdpbmUiLCJJRW5naW5lRXZlbnRzIiwiSUV4cGlyZXIiLCJJSnNvblJwY0hpc3RvcnkiLCJJS2V5Q2hhaW4iLCJJTWVzc2FnZVRyYWNrZXIiLCJJUGFpcmluZyIsIklQdWJsaXNoZXIiLCJJUmVsYXllciIsIklTaWduQ2xpZW50IiwiSVNpZ25DbGllbnRFdmVudHMiLCJJU3RvcmUiLCJJU3Vic2NyaWJlciIsIklTdWJzY3JpYmVyVG9waWNNYXAiLCJJVmVyaWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/dist/index.es.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniversalProvider: function() { return /* binding */ cv; },\n/* harmony export */   \"default\": function() { return /* binding */ lr; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(app-pages-browser)/./node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\nconst Ia = \"error\", Ug = \"wss://relay.walletconnect.com\", Wg = \"wc\", Fg = \"universal_provider\", xa = \"\".concat(Wg, \"@2:\").concat(Fg, \":\"), Mg = \"https://rpc.walletconnect.com/v1/\", Vn = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n};\nvar ge = typeof globalThis < \"u\" ? globalThis :  true ? window : 0, Ui = {\n    exports: {}\n}; /**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ \n(function(C, u) {\n    (function() {\n        var i, d = \"4.17.21\", w = 200, T = \"Unsupported core-js use. Try https://npms.io/search?q=ponyfill.\", $ = \"Expected a function\", En = \"Invalid `variable` option passed into `_.template`\", zt = \"__lodash_hash_undefined__\", pr = 500, It = \"__lodash_placeholder__\", Ln = 1, Fn = 2, xt = 4, Et = 1, ve = 2, vn = 1, ct = 2, qi = 4, Dn = 8, yt = 16, Hn = 32, St = 64, Mn = 128, Kt = 256, dr = 512, La = 30, Da = \"...\", Ha = 800, Na = 16, Bi = 1, $a = 2, Ua = 3, ht = 1 / 0, kn = 9007199254740991, Wa = 17976931348623157e292, _e = 0 / 0, Nn = 4294967295, Fa = Nn - 1, Ma = Nn >>> 1, qa = [\n            [\n                \"ary\",\n                Mn\n            ],\n            [\n                \"bind\",\n                vn\n            ],\n            [\n                \"bindKey\",\n                ct\n            ],\n            [\n                \"curry\",\n                Dn\n            ],\n            [\n                \"curryRight\",\n                yt\n            ],\n            [\n                \"flip\",\n                dr\n            ],\n            [\n                \"partial\",\n                Hn\n            ],\n            [\n                \"partialRight\",\n                St\n            ],\n            [\n                \"rearg\",\n                Kt\n            ]\n        ], Ot = \"[object Arguments]\", me = \"[object Array]\", Ba = \"[object AsyncFunction]\", Yt = \"[object Boolean]\", Zt = \"[object Date]\", Ga = \"[object DOMException]\", we = \"[object Error]\", Pe = \"[object Function]\", Gi = \"[object GeneratorFunction]\", yn = \"[object Map]\", Jt = \"[object Number]\", za = \"[object Null]\", qn = \"[object Object]\", zi = \"[object Promise]\", Ka = \"[object Proxy]\", Xt = \"[object RegExp]\", Sn = \"[object Set]\", Qt = \"[object String]\", Ae = \"[object Symbol]\", Ya = \"[object Undefined]\", Vt = \"[object WeakMap]\", Za = \"[object WeakSet]\", kt = \"[object ArrayBuffer]\", Rt = \"[object DataView]\", gr = \"[object Float32Array]\", vr = \"[object Float64Array]\", _r = \"[object Int8Array]\", mr = \"[object Int16Array]\", wr = \"[object Int32Array]\", Pr = \"[object Uint8Array]\", Ar = \"[object Uint8ClampedArray]\", Cr = \"[object Uint16Array]\", Ir = \"[object Uint32Array]\", Ja = /\\b__p \\+= '';/g, Xa = /\\b(__p \\+=) '' \\+/g, Qa = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g, Ki = /&(?:amp|lt|gt|quot|#39);/g, Yi = /[&<>\"']/g, Va = RegExp(Ki.source), ka = RegExp(Yi.source), ja = /<%-([\\s\\S]+?)%>/g, no = /<%([\\s\\S]+?)%>/g, Zi = /<%=([\\s\\S]+?)%>/g, to = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, eo = /^\\w*$/, ro = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, xr = /[\\\\^$.*+?()[\\]{}|]/g, io = RegExp(xr.source), Er = /^\\s+/, so = /\\s/, uo = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/, ao = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/, oo = /,? & /, fo = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g, co = /[()=,{}\\[\\]\\/\\s]/, ho = /\\\\(\\\\)?/g, lo = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g, Ji = /\\w*$/, po = /^[-+]0x[0-9a-f]+$/i, go = /^0b[01]+$/i, vo = /^\\[object .+?Constructor\\]$/, _o = /^0o[0-7]+$/i, mo = /^(?:0|[1-9]\\d*)$/, wo = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g, Ce = /($^)/, Po = /['\\n\\r\\u2028\\u2029\\\\]/g, Ie = \"\\ud800-\\udfff\", Ao = \"\\\\u0300-\\\\u036f\", Co = \"\\\\ufe20-\\\\ufe2f\", Io = \"\\\\u20d0-\\\\u20ff\", Xi = Ao + Co + Io, Qi = \"\\\\u2700-\\\\u27bf\", Vi = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\", xo = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\", Eo = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\", yo = \"\\\\u2000-\\\\u206f\", So = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\", ki = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\", ji = \"\\\\ufe0e\\\\ufe0f\", ns = xo + Eo + yo + So, yr = \"['’]\", Oo = \"[\" + Ie + \"]\", ts = \"[\" + ns + \"]\", xe = \"[\" + Xi + \"]\", es = \"\\\\d+\", Ro = \"[\" + Qi + \"]\", rs = \"[\" + Vi + \"]\", is = \"[^\" + Ie + ns + es + Qi + Vi + ki + \"]\", Sr = \"\\ud83c[\\udffb-\\udfff]\", bo = \"(?:\" + xe + \"|\" + Sr + \")\", ss = \"[^\" + Ie + \"]\", Or = \"(?:\\ud83c[\\udde6-\\uddff]){2}\", Rr = \"[\\ud800-\\udbff][\\udc00-\\udfff]\", bt = \"[\" + ki + \"]\", us = \"\\\\u200d\", as = \"(?:\" + rs + \"|\" + is + \")\", To = \"(?:\" + bt + \"|\" + is + \")\", os = \"(?:\" + yr + \"(?:d|ll|m|re|s|t|ve))?\", fs = \"(?:\" + yr + \"(?:D|LL|M|RE|S|T|VE))?\", cs = bo + \"?\", hs = \"[\" + ji + \"]?\", Lo = \"(?:\" + us + \"(?:\" + [\n            ss,\n            Or,\n            Rr\n        ].join(\"|\") + \")\" + hs + cs + \")*\", Do = \"\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])\", Ho = \"\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])\", ls = hs + cs + Lo, No = \"(?:\" + [\n            Ro,\n            Or,\n            Rr\n        ].join(\"|\") + \")\" + ls, $o = \"(?:\" + [\n            ss + xe + \"?\",\n            xe,\n            Or,\n            Rr,\n            Oo\n        ].join(\"|\") + \")\", Uo = RegExp(yr, \"g\"), Wo = RegExp(xe, \"g\"), br = RegExp(Sr + \"(?=\" + Sr + \")|\" + $o + ls, \"g\"), Fo = RegExp([\n            bt + \"?\" + rs + \"+\" + os + \"(?=\" + [\n                ts,\n                bt,\n                \"$\"\n            ].join(\"|\") + \")\",\n            To + \"+\" + fs + \"(?=\" + [\n                ts,\n                bt + as,\n                \"$\"\n            ].join(\"|\") + \")\",\n            bt + \"?\" + as + \"+\" + os,\n            bt + \"+\" + fs,\n            Ho,\n            Do,\n            es,\n            No\n        ].join(\"|\"), \"g\"), Mo = RegExp(\"[\" + us + Ie + Xi + ji + \"]\"), qo = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Bo = [\n            \"Array\",\n            \"Buffer\",\n            \"DataView\",\n            \"Date\",\n            \"Error\",\n            \"Float32Array\",\n            \"Float64Array\",\n            \"Function\",\n            \"Int8Array\",\n            \"Int16Array\",\n            \"Int32Array\",\n            \"Map\",\n            \"Math\",\n            \"Object\",\n            \"Promise\",\n            \"RegExp\",\n            \"Set\",\n            \"String\",\n            \"Symbol\",\n            \"TypeError\",\n            \"Uint8Array\",\n            \"Uint8ClampedArray\",\n            \"Uint16Array\",\n            \"Uint32Array\",\n            \"WeakMap\",\n            \"_\",\n            \"clearTimeout\",\n            \"isFinite\",\n            \"parseInt\",\n            \"setTimeout\"\n        ], Go = -1, B = {};\n        B[gr] = B[vr] = B[_r] = B[mr] = B[wr] = B[Pr] = B[Ar] = B[Cr] = B[Ir] = !0, B[Ot] = B[me] = B[kt] = B[Yt] = B[Rt] = B[Zt] = B[we] = B[Pe] = B[yn] = B[Jt] = B[qn] = B[Xt] = B[Sn] = B[Qt] = B[Vt] = !1;\n        var q = {};\n        q[Ot] = q[me] = q[kt] = q[Rt] = q[Yt] = q[Zt] = q[gr] = q[vr] = q[_r] = q[mr] = q[wr] = q[yn] = q[Jt] = q[qn] = q[Xt] = q[Sn] = q[Qt] = q[Ae] = q[Pr] = q[Ar] = q[Cr] = q[Ir] = !0, q[we] = q[Pe] = q[Vt] = !1;\n        var zo = {\n            À: \"A\",\n            Á: \"A\",\n            Â: \"A\",\n            Ã: \"A\",\n            Ä: \"A\",\n            Å: \"A\",\n            à: \"a\",\n            á: \"a\",\n            â: \"a\",\n            ã: \"a\",\n            ä: \"a\",\n            å: \"a\",\n            Ç: \"C\",\n            ç: \"c\",\n            Ð: \"D\",\n            ð: \"d\",\n            È: \"E\",\n            É: \"E\",\n            Ê: \"E\",\n            Ë: \"E\",\n            è: \"e\",\n            é: \"e\",\n            ê: \"e\",\n            ë: \"e\",\n            Ì: \"I\",\n            Í: \"I\",\n            Î: \"I\",\n            Ï: \"I\",\n            ì: \"i\",\n            í: \"i\",\n            î: \"i\",\n            ï: \"i\",\n            Ñ: \"N\",\n            ñ: \"n\",\n            Ò: \"O\",\n            Ó: \"O\",\n            Ô: \"O\",\n            Õ: \"O\",\n            Ö: \"O\",\n            Ø: \"O\",\n            ò: \"o\",\n            ó: \"o\",\n            ô: \"o\",\n            õ: \"o\",\n            ö: \"o\",\n            ø: \"o\",\n            Ù: \"U\",\n            Ú: \"U\",\n            Û: \"U\",\n            Ü: \"U\",\n            ù: \"u\",\n            ú: \"u\",\n            û: \"u\",\n            ü: \"u\",\n            Ý: \"Y\",\n            ý: \"y\",\n            ÿ: \"y\",\n            Æ: \"Ae\",\n            æ: \"ae\",\n            Þ: \"Th\",\n            þ: \"th\",\n            ß: \"ss\",\n            Ā: \"A\",\n            Ă: \"A\",\n            Ą: \"A\",\n            ā: \"a\",\n            ă: \"a\",\n            ą: \"a\",\n            Ć: \"C\",\n            Ĉ: \"C\",\n            Ċ: \"C\",\n            Č: \"C\",\n            ć: \"c\",\n            ĉ: \"c\",\n            ċ: \"c\",\n            č: \"c\",\n            Ď: \"D\",\n            Đ: \"D\",\n            ď: \"d\",\n            đ: \"d\",\n            Ē: \"E\",\n            Ĕ: \"E\",\n            Ė: \"E\",\n            Ę: \"E\",\n            Ě: \"E\",\n            ē: \"e\",\n            ĕ: \"e\",\n            ė: \"e\",\n            ę: \"e\",\n            ě: \"e\",\n            Ĝ: \"G\",\n            Ğ: \"G\",\n            Ġ: \"G\",\n            Ģ: \"G\",\n            ĝ: \"g\",\n            ğ: \"g\",\n            ġ: \"g\",\n            ģ: \"g\",\n            Ĥ: \"H\",\n            Ħ: \"H\",\n            ĥ: \"h\",\n            ħ: \"h\",\n            Ĩ: \"I\",\n            Ī: \"I\",\n            Ĭ: \"I\",\n            Į: \"I\",\n            İ: \"I\",\n            ĩ: \"i\",\n            ī: \"i\",\n            ĭ: \"i\",\n            į: \"i\",\n            ı: \"i\",\n            Ĵ: \"J\",\n            ĵ: \"j\",\n            Ķ: \"K\",\n            ķ: \"k\",\n            ĸ: \"k\",\n            Ĺ: \"L\",\n            Ļ: \"L\",\n            Ľ: \"L\",\n            Ŀ: \"L\",\n            Ł: \"L\",\n            ĺ: \"l\",\n            ļ: \"l\",\n            ľ: \"l\",\n            ŀ: \"l\",\n            ł: \"l\",\n            Ń: \"N\",\n            Ņ: \"N\",\n            Ň: \"N\",\n            Ŋ: \"N\",\n            ń: \"n\",\n            ņ: \"n\",\n            ň: \"n\",\n            ŋ: \"n\",\n            Ō: \"O\",\n            Ŏ: \"O\",\n            Ő: \"O\",\n            ō: \"o\",\n            ŏ: \"o\",\n            ő: \"o\",\n            Ŕ: \"R\",\n            Ŗ: \"R\",\n            Ř: \"R\",\n            ŕ: \"r\",\n            ŗ: \"r\",\n            ř: \"r\",\n            Ś: \"S\",\n            Ŝ: \"S\",\n            Ş: \"S\",\n            Š: \"S\",\n            ś: \"s\",\n            ŝ: \"s\",\n            ş: \"s\",\n            š: \"s\",\n            Ţ: \"T\",\n            Ť: \"T\",\n            Ŧ: \"T\",\n            ţ: \"t\",\n            ť: \"t\",\n            ŧ: \"t\",\n            Ũ: \"U\",\n            Ū: \"U\",\n            Ŭ: \"U\",\n            Ů: \"U\",\n            Ű: \"U\",\n            Ų: \"U\",\n            ũ: \"u\",\n            ū: \"u\",\n            ŭ: \"u\",\n            ů: \"u\",\n            ű: \"u\",\n            ų: \"u\",\n            Ŵ: \"W\",\n            ŵ: \"w\",\n            Ŷ: \"Y\",\n            ŷ: \"y\",\n            Ÿ: \"Y\",\n            Ź: \"Z\",\n            Ż: \"Z\",\n            Ž: \"Z\",\n            ź: \"z\",\n            ż: \"z\",\n            ž: \"z\",\n            Ĳ: \"IJ\",\n            ĳ: \"ij\",\n            Œ: \"Oe\",\n            œ: \"oe\",\n            ŉ: \"'n\",\n            ſ: \"s\"\n        }, Ko = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\"\n        }, Yo = {\n            \"&amp;\": \"&\",\n            \"&lt;\": \"<\",\n            \"&gt;\": \">\",\n            \"&quot;\": '\"',\n            \"&#39;\": \"'\"\n        }, Zo = {\n            \"\\\\\": \"\\\\\",\n            \"'\": \"'\",\n            \"\\n\": \"n\",\n            \"\\r\": \"r\",\n            \"\\u2028\": \"u2028\",\n            \"\\u2029\": \"u2029\"\n        }, Jo = parseFloat, Xo = parseInt, ps = typeof ge == \"object\" && ge && ge.Object === Object && ge, Qo = typeof self == \"object\" && self && self.Object === Object && self, k = ps || Qo || Function(\"return this\")(), Tr = u && !u.nodeType && u, lt = Tr && !0 && C && !C.nodeType && C, ds = lt && lt.exports === Tr, Lr = ds && ps.process, _n = function() {\n            try {\n                var h = lt && lt.require && lt.require(\"util\").types;\n                return h || Lr && Lr.binding && Lr.binding(\"util\");\n            } catch (e) {}\n        }(), gs = _n && _n.isArrayBuffer, vs = _n && _n.isDate, _s = _n && _n.isMap, ms = _n && _n.isRegExp, ws = _n && _n.isSet, Ps = _n && _n.isTypedArray;\n        function cn(h, g, p) {\n            switch(p.length){\n                case 0:\n                    return h.call(g);\n                case 1:\n                    return h.call(g, p[0]);\n                case 2:\n                    return h.call(g, p[0], p[1]);\n                case 3:\n                    return h.call(g, p[0], p[1], p[2]);\n            }\n            return h.apply(g, p);\n        }\n        function Vo(h, g, p, A) {\n            for(var S = -1, U = h == null ? 0 : h.length; ++S < U;){\n                var X = h[S];\n                g(A, X, p(X), h);\n            }\n            return A;\n        }\n        function mn(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length; ++p < A && g(h[p], p, h) !== !1;);\n            return h;\n        }\n        function ko(h, g) {\n            for(var p = h == null ? 0 : h.length; p-- && g(h[p], p, h) !== !1;);\n            return h;\n        }\n        function As(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length; ++p < A;)if (!g(h[p], p, h)) return !1;\n            return !0;\n        }\n        function jn(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length, S = 0, U = []; ++p < A;){\n                var X = h[p];\n                g(X, p, h) && (U[S++] = X);\n            }\n            return U;\n        }\n        function Ee(h, g) {\n            var p = h == null ? 0 : h.length;\n            return !!p && Tt(h, g, 0) > -1;\n        }\n        function Dr(h, g, p) {\n            for(var A = -1, S = h == null ? 0 : h.length; ++A < S;)if (p(g, h[A])) return !0;\n            return !1;\n        }\n        function G(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length, S = Array(A); ++p < A;)S[p] = g(h[p], p, h);\n            return S;\n        }\n        function nt(h, g) {\n            for(var p = -1, A = g.length, S = h.length; ++p < A;)h[S + p] = g[p];\n            return h;\n        }\n        function Hr(h, g, p, A) {\n            var S = -1, U = h == null ? 0 : h.length;\n            for(A && U && (p = h[++S]); ++S < U;)p = g(p, h[S], S, h);\n            return p;\n        }\n        function jo(h, g, p, A) {\n            var S = h == null ? 0 : h.length;\n            for(A && S && (p = h[--S]); S--;)p = g(p, h[S], S, h);\n            return p;\n        }\n        function Nr(h, g) {\n            for(var p = -1, A = h == null ? 0 : h.length; ++p < A;)if (g(h[p], p, h)) return !0;\n            return !1;\n        }\n        var nf = $r(\"length\");\n        function tf(h) {\n            return h.split(\"\");\n        }\n        function ef(h) {\n            return h.match(fo) || [];\n        }\n        function Cs(h, g, p) {\n            var A;\n            return p(h, function(S, U, X) {\n                if (g(S, U, X)) return A = U, !1;\n            }), A;\n        }\n        function ye(h, g, p, A) {\n            for(var S = h.length, U = p + (A ? 1 : -1); A ? U-- : ++U < S;)if (g(h[U], U, h)) return U;\n            return -1;\n        }\n        function Tt(h, g, p) {\n            return g === g ? gf(h, g, p) : ye(h, Is, p);\n        }\n        function rf(h, g, p, A) {\n            for(var S = p - 1, U = h.length; ++S < U;)if (A(h[S], g)) return S;\n            return -1;\n        }\n        function Is(h) {\n            return h !== h;\n        }\n        function xs(h, g) {\n            var p = h == null ? 0 : h.length;\n            return p ? Wr(h, g) / p : _e;\n        }\n        function $r(h) {\n            return function(g) {\n                return g == null ? i : g[h];\n            };\n        }\n        function Ur(h) {\n            return function(g) {\n                return h == null ? i : h[g];\n            };\n        }\n        function Es(h, g, p, A, S) {\n            return S(h, function(U, X, M) {\n                p = A ? (A = !1, U) : g(p, U, X, M);\n            }), p;\n        }\n        function sf(h, g) {\n            var p = h.length;\n            for(h.sort(g); p--;)h[p] = h[p].value;\n            return h;\n        }\n        function Wr(h, g) {\n            for(var p, A = -1, S = h.length; ++A < S;){\n                var U = g(h[A]);\n                U !== i && (p = p === i ? U : p + U);\n            }\n            return p;\n        }\n        function Fr(h, g) {\n            for(var p = -1, A = Array(h); ++p < h;)A[p] = g(p);\n            return A;\n        }\n        function uf(h, g) {\n            return G(g, function(p) {\n                return [\n                    p,\n                    h[p]\n                ];\n            });\n        }\n        function ys(h) {\n            return h && h.slice(0, bs(h) + 1).replace(Er, \"\");\n        }\n        function hn(h) {\n            return function(g) {\n                return h(g);\n            };\n        }\n        function Mr(h, g) {\n            return G(g, function(p) {\n                return h[p];\n            });\n        }\n        function jt(h, g) {\n            return h.has(g);\n        }\n        function Ss(h, g) {\n            for(var p = -1, A = h.length; ++p < A && Tt(g, h[p], 0) > -1;);\n            return p;\n        }\n        function Os(h, g) {\n            for(var p = h.length; p-- && Tt(g, h[p], 0) > -1;);\n            return p;\n        }\n        function af(h, g) {\n            for(var p = h.length, A = 0; p--;)h[p] === g && ++A;\n            return A;\n        }\n        var of = Ur(zo), ff = Ur(Ko);\n        function cf(h) {\n            return \"\\\\\" + Zo[h];\n        }\n        function hf(h, g) {\n            return h == null ? i : h[g];\n        }\n        function Lt(h) {\n            return Mo.test(h);\n        }\n        function lf(h) {\n            return qo.test(h);\n        }\n        function pf(h) {\n            for(var g, p = []; !(g = h.next()).done;)p.push(g.value);\n            return p;\n        }\n        function qr(h) {\n            var g = -1, p = Array(h.size);\n            return h.forEach(function(A, S) {\n                p[++g] = [\n                    S,\n                    A\n                ];\n            }), p;\n        }\n        function Rs(h, g) {\n            return function(p) {\n                return h(g(p));\n            };\n        }\n        function tt(h, g) {\n            for(var p = -1, A = h.length, S = 0, U = []; ++p < A;){\n                var X = h[p];\n                (X === g || X === It) && (h[p] = It, U[S++] = p);\n            }\n            return U;\n        }\n        function Se(h) {\n            var g = -1, p = Array(h.size);\n            return h.forEach(function(A) {\n                p[++g] = A;\n            }), p;\n        }\n        function df(h) {\n            var g = -1, p = Array(h.size);\n            return h.forEach(function(A) {\n                p[++g] = [\n                    A,\n                    A\n                ];\n            }), p;\n        }\n        function gf(h, g, p) {\n            for(var A = p - 1, S = h.length; ++A < S;)if (h[A] === g) return A;\n            return -1;\n        }\n        function vf(h, g, p) {\n            for(var A = p + 1; A--;)if (h[A] === g) return A;\n            return A;\n        }\n        function Dt(h) {\n            return Lt(h) ? mf(h) : nf(h);\n        }\n        function On(h) {\n            return Lt(h) ? wf(h) : tf(h);\n        }\n        function bs(h) {\n            for(var g = h.length; g-- && so.test(h.charAt(g)););\n            return g;\n        }\n        var _f = Ur(Yo);\n        function mf(h) {\n            for(var g = br.lastIndex = 0; br.test(h);)++g;\n            return g;\n        }\n        function wf(h) {\n            return h.match(br) || [];\n        }\n        function Pf(h) {\n            return h.match(Fo) || [];\n        }\n        var Af = function h(g) {\n            g = g == null ? k : Ht.defaults(k.Object(), g, Ht.pick(k, Bo));\n            var p = g.Array, A = g.Date, S = g.Error, U = g.Function, X = g.Math, M = g.Object, Br = g.RegExp, Cf = g.String, wn = g.TypeError, Oe = p.prototype, If = U.prototype, Nt = M.prototype, Re = g[\"__core-js_shared__\"], be = If.toString, F = Nt.hasOwnProperty, xf = 0, Ts = function() {\n                var n = /[^.]+$/.exec(Re && Re.keys && Re.keys.IE_PROTO || \"\");\n                return n ? \"Symbol(src)_1.\" + n : \"\";\n            }(), Te = Nt.toString, Ef = be.call(M), yf = k._, Sf = Br(\"^\" + be.call(F).replace(xr, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"), Le = ds ? g.Buffer : i, et = g.Symbol, De = g.Uint8Array, Ls = Le ? Le.allocUnsafe : i, He = Rs(M.getPrototypeOf, M), Ds = M.create, Hs = Nt.propertyIsEnumerable, Ne = Oe.splice, Ns = et ? et.isConcatSpreadable : i, ne = et ? et.iterator : i, pt = et ? et.toStringTag : i, $e = function() {\n                try {\n                    var n = mt(M, \"defineProperty\");\n                    return n({}, \"\", {}), n;\n                } catch (e) {}\n            }(), Of = g.clearTimeout !== k.clearTimeout && g.clearTimeout, Rf = A && A.now !== k.Date.now && A.now, bf = g.setTimeout !== k.setTimeout && g.setTimeout, Ue = X.ceil, We = X.floor, Gr = M.getOwnPropertySymbols, Tf = Le ? Le.isBuffer : i, $s = g.isFinite, Lf = Oe.join, Df = Rs(M.keys, M), Q = X.max, nn = X.min, Hf = A.now, Nf = g.parseInt, Us = X.random, $f = Oe.reverse, zr = mt(g, \"DataView\"), te = mt(g, \"Map\"), Kr = mt(g, \"Promise\"), $t = mt(g, \"Set\"), ee = mt(g, \"WeakMap\"), re = mt(M, \"create\"), Fe = ee && new ee, Ut = {}, Uf = wt(zr), Wf = wt(te), Ff = wt(Kr), Mf = wt($t), qf = wt(ee), Me = et ? et.prototype : i, ie = Me ? Me.valueOf : i, Ws = Me ? Me.toString : i;\n            function a(n) {\n                if (Y(n) && !O(n) && !(n instanceof H)) {\n                    if (n instanceof Pn) return n;\n                    if (F.call(n, \"__wrapped__\")) return Fu(n);\n                }\n                return new Pn(n);\n            }\n            var Wt = function() {\n                function n() {}\n                return function(t) {\n                    if (!K(t)) return {};\n                    if (Ds) return Ds(t);\n                    n.prototype = t;\n                    var e = new n;\n                    return n.prototype = i, e;\n                };\n            }();\n            function qe() {}\n            function Pn(n, t) {\n                this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = i;\n            }\n            a.templateSettings = {\n                escape: ja,\n                evaluate: no,\n                interpolate: Zi,\n                variable: \"\",\n                imports: {\n                    _: a\n                }\n            }, a.prototype = qe.prototype, a.prototype.constructor = a, Pn.prototype = Wt(qe.prototype), Pn.prototype.constructor = Pn;\n            function H(n) {\n                this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Nn, this.__views__ = [];\n            }\n            function Bf() {\n                var n = new H(this.__wrapped__);\n                return n.__actions__ = un(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = un(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = un(this.__views__), n;\n            }\n            function Gf() {\n                if (this.__filtered__) {\n                    var n = new H(this);\n                    n.__dir__ = -1, n.__filtered__ = !0;\n                } else n = this.clone(), n.__dir__ *= -1;\n                return n;\n            }\n            function zf() {\n                var n = this.__wrapped__.value(), t = this.__dir__, e = O(n), r = t < 0, s = e ? n.length : 0, o = eh(0, s, this.__views__), f = o.start, c = o.end, l = c - f, v = r ? c : f - 1, _ = this.__iteratees__, m = _.length, P = 0, I = nn(l, this.__takeCount__);\n                if (!e || !r && s == l && I == l) return ou(n, this.__actions__);\n                var E = [];\n                n: for(; l-- && P < I;){\n                    v += t;\n                    for(var b = -1, y = n[v]; ++b < m;){\n                        var D = _[b], N = D.iteratee, dn = D.type, sn = N(y);\n                        if (dn == $a) y = sn;\n                        else if (!sn) {\n                            if (dn == Bi) continue n;\n                            break n;\n                        }\n                    }\n                    E[P++] = y;\n                }\n                return E;\n            }\n            H.prototype = Wt(qe.prototype), H.prototype.constructor = H;\n            function dt(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function Kf() {\n                this.__data__ = re ? re(null) : {}, this.size = 0;\n            }\n            function Yf(n) {\n                var t = this.has(n) && delete this.__data__[n];\n                return this.size -= t ? 1 : 0, t;\n            }\n            function Zf(n) {\n                var t = this.__data__;\n                if (re) {\n                    var e = t[n];\n                    return e === zt ? i : e;\n                }\n                return F.call(t, n) ? t[n] : i;\n            }\n            function Jf(n) {\n                var t = this.__data__;\n                return re ? t[n] !== i : F.call(t, n);\n            }\n            function Xf(n, t) {\n                var e = this.__data__;\n                return this.size += this.has(n) ? 0 : 1, e[n] = re && t === i ? zt : t, this;\n            }\n            dt.prototype.clear = Kf, dt.prototype.delete = Yf, dt.prototype.get = Zf, dt.prototype.has = Jf, dt.prototype.set = Xf;\n            function Bn(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function Qf() {\n                this.__data__ = [], this.size = 0;\n            }\n            function Vf(n) {\n                var t = this.__data__, e = Be(t, n);\n                if (e < 0) return !1;\n                var r = t.length - 1;\n                return e == r ? t.pop() : Ne.call(t, e, 1), --this.size, !0;\n            }\n            function kf(n) {\n                var t = this.__data__, e = Be(t, n);\n                return e < 0 ? i : t[e][1];\n            }\n            function jf(n) {\n                return Be(this.__data__, n) > -1;\n            }\n            function nc(n, t) {\n                var e = this.__data__, r = Be(e, n);\n                return r < 0 ? (++this.size, e.push([\n                    n,\n                    t\n                ])) : e[r][1] = t, this;\n            }\n            Bn.prototype.clear = Qf, Bn.prototype.delete = Vf, Bn.prototype.get = kf, Bn.prototype.has = jf, Bn.prototype.set = nc;\n            function Gn(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function tc() {\n                this.size = 0, this.__data__ = {\n                    hash: new dt,\n                    map: new (te || Bn),\n                    string: new dt\n                };\n            }\n            function ec(n) {\n                var t = nr(this, n).delete(n);\n                return this.size -= t ? 1 : 0, t;\n            }\n            function rc(n) {\n                return nr(this, n).get(n);\n            }\n            function ic(n) {\n                return nr(this, n).has(n);\n            }\n            function sc(n, t) {\n                var e = nr(this, n), r = e.size;\n                return e.set(n, t), this.size += e.size == r ? 0 : 1, this;\n            }\n            Gn.prototype.clear = tc, Gn.prototype.delete = ec, Gn.prototype.get = rc, Gn.prototype.has = ic, Gn.prototype.set = sc;\n            function gt(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.__data__ = new Gn; ++t < e;)this.add(n[t]);\n            }\n            function uc(n) {\n                return this.__data__.set(n, zt), this;\n            }\n            function ac(n) {\n                return this.__data__.has(n);\n            }\n            gt.prototype.add = gt.prototype.push = uc, gt.prototype.has = ac;\n            function Rn(n) {\n                var t = this.__data__ = new Bn(n);\n                this.size = t.size;\n            }\n            function oc() {\n                this.__data__ = new Bn, this.size = 0;\n            }\n            function fc(n) {\n                var t = this.__data__, e = t.delete(n);\n                return this.size = t.size, e;\n            }\n            function cc(n) {\n                return this.__data__.get(n);\n            }\n            function hc(n) {\n                return this.__data__.has(n);\n            }\n            function lc(n, t) {\n                var e = this.__data__;\n                if (e instanceof Bn) {\n                    var r = e.__data__;\n                    if (!te || r.length < w - 1) return r.push([\n                        n,\n                        t\n                    ]), this.size = ++e.size, this;\n                    e = this.__data__ = new Gn(r);\n                }\n                return e.set(n, t), this.size = e.size, this;\n            }\n            Rn.prototype.clear = oc, Rn.prototype.delete = fc, Rn.prototype.get = cc, Rn.prototype.has = hc, Rn.prototype.set = lc;\n            function Fs(n, t) {\n                var e = O(n), r = !e && Pt(n), s = !e && !r && at(n), o = !e && !r && !s && Bt(n), f = e || r || s || o, c = f ? Fr(n.length, Cf) : [], l = c.length;\n                for(var v in n)(t || F.call(n, v)) && !(f && (v == \"length\" || s && (v == \"offset\" || v == \"parent\") || o && (v == \"buffer\" || v == \"byteLength\" || v == \"byteOffset\") || Zn(v, l))) && c.push(v);\n                return c;\n            }\n            function Ms(n) {\n                var t = n.length;\n                return t ? n[ei(0, t - 1)] : i;\n            }\n            function pc(n, t) {\n                return tr(un(n), vt(t, 0, n.length));\n            }\n            function dc(n) {\n                return tr(un(n));\n            }\n            function Yr(n, t, e) {\n                (e !== i && !bn(n[t], e) || e === i && !(t in n)) && zn(n, t, e);\n            }\n            function se(n, t, e) {\n                var r = n[t];\n                (!(F.call(n, t) && bn(r, e)) || e === i && !(t in n)) && zn(n, t, e);\n            }\n            function Be(n, t) {\n                for(var e = n.length; e--;)if (bn(n[e][0], t)) return e;\n                return -1;\n            }\n            function gc(n, t, e, r) {\n                return rt(n, function(s, o, f) {\n                    t(r, s, e(s), f);\n                }), r;\n            }\n            function qs(n, t) {\n                return n && Un(t, V(t), n);\n            }\n            function vc(n, t) {\n                return n && Un(t, on(t), n);\n            }\n            function zn(n, t, e) {\n                t == \"__proto__\" && $e ? $e(n, t, {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: e,\n                    writable: !0\n                }) : n[t] = e;\n            }\n            function Zr(n, t) {\n                for(var e = -1, r = t.length, s = p(r), o = n == null; ++e < r;)s[e] = o ? i : Si(n, t[e]);\n                return s;\n            }\n            function vt(n, t, e) {\n                return n === n && (e !== i && (n = n <= e ? n : e), t !== i && (n = n >= t ? n : t)), n;\n            }\n            function An(n, t, e, r, s, o) {\n                var f, c = t & Ln, l = t & Fn, v = t & xt;\n                if (e && (f = s ? e(n, r, s, o) : e(n)), f !== i) return f;\n                if (!K(n)) return n;\n                var _ = O(n);\n                if (_) {\n                    if (f = ih(n), !c) return un(n, f);\n                } else {\n                    var m = tn(n), P = m == Pe || m == Gi;\n                    if (at(n)) return hu(n, c);\n                    if (m == qn || m == Ot || P && !s) {\n                        if (f = l || P ? {} : bu(n), !c) return l ? Zc(n, vc(f, n)) : Yc(n, qs(f, n));\n                    } else {\n                        if (!q[m]) return s ? n : {};\n                        f = sh(n, m, c);\n                    }\n                }\n                o || (o = new Rn);\n                var I = o.get(n);\n                if (I) return I;\n                o.set(n, f), sa(n) ? n.forEach(function(y) {\n                    f.add(An(y, t, e, y, n, o));\n                }) : ra(n) && n.forEach(function(y, D) {\n                    f.set(D, An(y, t, e, D, n, o));\n                });\n                var E = v ? l ? pi : li : l ? on : V, b = _ ? i : E(n);\n                return mn(b || n, function(y, D) {\n                    b && (D = y, y = n[D]), se(f, D, An(y, t, e, D, n, o));\n                }), f;\n            }\n            function _c(n) {\n                var t = V(n);\n                return function(e) {\n                    return Bs(e, n, t);\n                };\n            }\n            function Bs(n, t, e) {\n                var r = e.length;\n                if (n == null) return !r;\n                for(n = M(n); r--;){\n                    var s = e[r], o = t[s], f = n[s];\n                    if (f === i && !(s in n) || !o(f)) return !1;\n                }\n                return !0;\n            }\n            function Gs(n, t, e) {\n                if (typeof n != \"function\") throw new wn($);\n                return le(function() {\n                    n.apply(i, e);\n                }, t);\n            }\n            function ue(n, t, e, r) {\n                var s = -1, o = Ee, f = !0, c = n.length, l = [], v = t.length;\n                if (!c) return l;\n                e && (t = G(t, hn(e))), r ? (o = Dr, f = !1) : t.length >= w && (o = jt, f = !1, t = new gt(t));\n                n: for(; ++s < c;){\n                    var _ = n[s], m = e == null ? _ : e(_);\n                    if (_ = r || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var P = v; P--;)if (t[P] === m) continue n;\n                        l.push(_);\n                    } else o(t, m, r) || l.push(_);\n                }\n                return l;\n            }\n            var rt = vu($n), zs = vu(Xr, !0);\n            function mc(n, t) {\n                var e = !0;\n                return rt(n, function(r, s, o) {\n                    return e = !!t(r, s, o), e;\n                }), e;\n            }\n            function Ge(n, t, e) {\n                for(var r = -1, s = n.length; ++r < s;){\n                    var o = n[r], f = t(o);\n                    if (f != null && (c === i ? f === f && !pn(f) : e(f, c))) var c = f, l = o;\n                }\n                return l;\n            }\n            function wc(n, t, e, r) {\n                var s = n.length;\n                for(e = R(e), e < 0 && (e = -e > s ? 0 : s + e), r = r === i || r > s ? s : R(r), r < 0 && (r += s), r = e > r ? 0 : aa(r); e < r;)n[e++] = t;\n                return n;\n            }\n            function Ks(n, t) {\n                var e = [];\n                return rt(n, function(r, s, o) {\n                    t(r, s, o) && e.push(r);\n                }), e;\n            }\n            function j(n, t, e, r, s) {\n                var o = -1, f = n.length;\n                for(e || (e = ah), s || (s = []); ++o < f;){\n                    var c = n[o];\n                    t > 0 && e(c) ? t > 1 ? j(c, t - 1, e, r, s) : nt(s, c) : r || (s[s.length] = c);\n                }\n                return s;\n            }\n            var Jr = _u(), Ys = _u(!0);\n            function $n(n, t) {\n                return n && Jr(n, t, V);\n            }\n            function Xr(n, t) {\n                return n && Ys(n, t, V);\n            }\n            function ze(n, t) {\n                return jn(t, function(e) {\n                    return Jn(n[e]);\n                });\n            }\n            function _t(n, t) {\n                t = st(t, n);\n                for(var e = 0, r = t.length; n != null && e < r;)n = n[Wn(t[e++])];\n                return e && e == r ? n : i;\n            }\n            function Zs(n, t, e) {\n                var r = t(n);\n                return O(n) ? r : nt(r, e(n));\n            }\n            function en(n) {\n                return n == null ? n === i ? Ya : za : pt && pt in M(n) ? th(n) : dh(n);\n            }\n            function Qr(n, t) {\n                return n > t;\n            }\n            function Pc(n, t) {\n                return n != null && F.call(n, t);\n            }\n            function Ac(n, t) {\n                return n != null && t in M(n);\n            }\n            function Cc(n, t, e) {\n                return n >= nn(t, e) && n < Q(t, e);\n            }\n            function Vr(n, t, e) {\n                for(var r = e ? Dr : Ee, s = n[0].length, o = n.length, f = o, c = p(o), l = 1 / 0, v = []; f--;){\n                    var _ = n[f];\n                    f && t && (_ = G(_, hn(t))), l = nn(_.length, l), c[f] = !e && (t || s >= 120 && _.length >= 120) ? new gt(f && _) : i;\n                }\n                _ = n[0];\n                var m = -1, P = c[0];\n                n: for(; ++m < s && v.length < l;){\n                    var I = _[m], E = t ? t(I) : I;\n                    if (I = e || I !== 0 ? I : 0, !(P ? jt(P, E) : r(v, E, e))) {\n                        for(f = o; --f;){\n                            var b = c[f];\n                            if (!(b ? jt(b, E) : r(n[f], E, e))) continue n;\n                        }\n                        P && P.push(E), v.push(I);\n                    }\n                }\n                return v;\n            }\n            function Ic(n, t, e, r) {\n                return $n(n, function(s, o, f) {\n                    t(r, e(s), o, f);\n                }), r;\n            }\n            function ae(n, t, e) {\n                t = st(t, n), n = Hu(n, t);\n                var r = n == null ? n : n[Wn(In(t))];\n                return r == null ? i : cn(r, n, e);\n            }\n            function Js(n) {\n                return Y(n) && en(n) == Ot;\n            }\n            function xc(n) {\n                return Y(n) && en(n) == kt;\n            }\n            function Ec(n) {\n                return Y(n) && en(n) == Zt;\n            }\n            function oe(n, t, e, r, s) {\n                return n === t ? !0 : n == null || t == null || !Y(n) && !Y(t) ? n !== n && t !== t : yc(n, t, e, r, oe, s);\n            }\n            function yc(n, t, e, r, s, o) {\n                var f = O(n), c = O(t), l = f ? me : tn(n), v = c ? me : tn(t);\n                l = l == Ot ? qn : l, v = v == Ot ? qn : v;\n                var _ = l == qn, m = v == qn, P = l == v;\n                if (P && at(n)) {\n                    if (!at(t)) return !1;\n                    f = !0, _ = !1;\n                }\n                if (P && !_) return o || (o = new Rn), f || Bt(n) ? Su(n, t, e, r, s, o) : jc(n, t, l, e, r, s, o);\n                if (!(e & Et)) {\n                    var I = _ && F.call(n, \"__wrapped__\"), E = m && F.call(t, \"__wrapped__\");\n                    if (I || E) {\n                        var b = I ? n.value() : n, y = E ? t.value() : t;\n                        return o || (o = new Rn), s(b, y, e, r, o);\n                    }\n                }\n                return P ? (o || (o = new Rn), nh(n, t, e, r, s, o)) : !1;\n            }\n            function Sc(n) {\n                return Y(n) && tn(n) == yn;\n            }\n            function kr(n, t, e, r) {\n                var s = e.length, o = s, f = !r;\n                if (n == null) return !o;\n                for(n = M(n); s--;){\n                    var c = e[s];\n                    if (f && c[2] ? c[1] !== n[c[0]] : !(c[0] in n)) return !1;\n                }\n                for(; ++s < o;){\n                    c = e[s];\n                    var l = c[0], v = n[l], _ = c[1];\n                    if (f && c[2]) {\n                        if (v === i && !(l in n)) return !1;\n                    } else {\n                        var m = new Rn;\n                        if (r) var P = r(v, _, l, n, t, m);\n                        if (!(P === i ? oe(_, v, Et | ve, r, m) : P)) return !1;\n                    }\n                }\n                return !0;\n            }\n            function Xs(n) {\n                if (!K(n) || fh(n)) return !1;\n                var t = Jn(n) ? Sf : vo;\n                return t.test(wt(n));\n            }\n            function Oc(n) {\n                return Y(n) && en(n) == Xt;\n            }\n            function Rc(n) {\n                return Y(n) && tn(n) == Sn;\n            }\n            function bc(n) {\n                return Y(n) && ar(n.length) && !!B[en(n)];\n            }\n            function Qs(n) {\n                return typeof n == \"function\" ? n : n == null ? fn : typeof n == \"object\" ? O(n) ? js(n[0], n[1]) : ks(n) : ma(n);\n            }\n            function jr(n) {\n                if (!he(n)) return Df(n);\n                var t = [];\n                for(var e in M(n))F.call(n, e) && e != \"constructor\" && t.push(e);\n                return t;\n            }\n            function Tc(n) {\n                if (!K(n)) return ph(n);\n                var t = he(n), e = [];\n                for(var r in n)r == \"constructor\" && (t || !F.call(n, r)) || e.push(r);\n                return e;\n            }\n            function ni(n, t) {\n                return n < t;\n            }\n            function Vs(n, t) {\n                var e = -1, r = an(n) ? p(n.length) : [];\n                return rt(n, function(s, o, f) {\n                    r[++e] = t(s, o, f);\n                }), r;\n            }\n            function ks(n) {\n                var t = gi(n);\n                return t.length == 1 && t[0][2] ? Lu(t[0][0], t[0][1]) : function(e) {\n                    return e === n || kr(e, n, t);\n                };\n            }\n            function js(n, t) {\n                return _i(n) && Tu(t) ? Lu(Wn(n), t) : function(e) {\n                    var r = Si(e, n);\n                    return r === i && r === t ? Oi(e, n) : oe(t, r, Et | ve);\n                };\n            }\n            function Ke(n, t, e, r, s) {\n                n !== t && Jr(t, function(o, f) {\n                    if (s || (s = new Rn), K(o)) Lc(n, t, f, e, Ke, r, s);\n                    else {\n                        var c = r ? r(wi(n, f), o, f + \"\", n, t, s) : i;\n                        c === i && (c = o), Yr(n, f, c);\n                    }\n                }, on);\n            }\n            function Lc(n, t, e, r, s, o, f) {\n                var c = wi(n, e), l = wi(t, e), v = f.get(l);\n                if (v) {\n                    Yr(n, e, v);\n                    return;\n                }\n                var _ = o ? o(c, l, e + \"\", n, t, f) : i, m = _ === i;\n                if (m) {\n                    var P = O(l), I = !P && at(l), E = !P && !I && Bt(l);\n                    _ = l, P || I || E ? O(c) ? _ = c : Z(c) ? _ = un(c) : I ? (m = !1, _ = hu(l, !0)) : E ? (m = !1, _ = lu(l, !0)) : _ = [] : pe(l) || Pt(l) ? (_ = c, Pt(c) ? _ = oa(c) : (!K(c) || Jn(c)) && (_ = bu(l))) : m = !1;\n                }\n                m && (f.set(l, _), s(_, l, r, o, f), f.delete(l)), Yr(n, e, _);\n            }\n            function nu(n, t) {\n                var e = n.length;\n                if (e) return t += t < 0 ? e : 0, Zn(t, e) ? n[t] : i;\n            }\n            function tu(n, t, e) {\n                t.length ? t = G(t, function(o) {\n                    return O(o) ? function(f) {\n                        return _t(f, o.length === 1 ? o[0] : o);\n                    } : o;\n                }) : t = [\n                    fn\n                ];\n                var r = -1;\n                t = G(t, hn(x()));\n                var s = Vs(n, function(o, f, c) {\n                    var l = G(t, function(v) {\n                        return v(o);\n                    });\n                    return {\n                        criteria: l,\n                        index: ++r,\n                        value: o\n                    };\n                });\n                return sf(s, function(o, f) {\n                    return Kc(o, f, e);\n                });\n            }\n            function Dc(n, t) {\n                return eu(n, t, function(e, r) {\n                    return Oi(n, r);\n                });\n            }\n            function eu(n, t, e) {\n                for(var r = -1, s = t.length, o = {}; ++r < s;){\n                    var f = t[r], c = _t(n, f);\n                    e(c, f) && fe(o, st(f, n), c);\n                }\n                return o;\n            }\n            function Hc(n) {\n                return function(t) {\n                    return _t(t, n);\n                };\n            }\n            function ti(n, t, e, r) {\n                var s = r ? rf : Tt, o = -1, f = t.length, c = n;\n                for(n === t && (t = un(t)), e && (c = G(n, hn(e))); ++o < f;)for(var l = 0, v = t[o], _ = e ? e(v) : v; (l = s(c, _, l, r)) > -1;)c !== n && Ne.call(c, l, 1), Ne.call(n, l, 1);\n                return n;\n            }\n            function ru(n, t) {\n                for(var e = n ? t.length : 0, r = e - 1; e--;){\n                    var s = t[e];\n                    if (e == r || s !== o) {\n                        var o = s;\n                        Zn(s) ? Ne.call(n, s, 1) : si(n, s);\n                    }\n                }\n                return n;\n            }\n            function ei(n, t) {\n                return n + We(Us() * (t - n + 1));\n            }\n            function Nc(n, t, e, r) {\n                for(var s = -1, o = Q(Ue((t - n) / (e || 1)), 0), f = p(o); o--;)f[r ? o : ++s] = n, n += e;\n                return f;\n            }\n            function ri(n, t) {\n                var e = \"\";\n                if (!n || t < 1 || t > kn) return e;\n                do t % 2 && (e += n), t = We(t / 2), t && (n += n);\n                while (t);\n                return e;\n            }\n            function L(n, t) {\n                return Pi(Du(n, t, fn), n + \"\");\n            }\n            function $c(n) {\n                return Ms(Gt(n));\n            }\n            function Uc(n, t) {\n                var e = Gt(n);\n                return tr(e, vt(t, 0, e.length));\n            }\n            function fe(n, t, e, r) {\n                if (!K(n)) return n;\n                t = st(t, n);\n                for(var s = -1, o = t.length, f = o - 1, c = n; c != null && ++s < o;){\n                    var l = Wn(t[s]), v = e;\n                    if (l === \"__proto__\" || l === \"constructor\" || l === \"prototype\") return n;\n                    if (s != f) {\n                        var _ = c[l];\n                        v = r ? r(_, l, c) : i, v === i && (v = K(_) ? _ : Zn(t[s + 1]) ? [] : {});\n                    }\n                    se(c, l, v), c = c[l];\n                }\n                return n;\n            }\n            var iu = Fe ? function(n, t) {\n                return Fe.set(n, t), n;\n            } : fn, Wc = $e ? function(n, t) {\n                return $e(n, \"toString\", {\n                    configurable: !0,\n                    enumerable: !1,\n                    value: bi(t),\n                    writable: !0\n                });\n            } : fn;\n            function Fc(n) {\n                return tr(Gt(n));\n            }\n            function Cn(n, t, e) {\n                var r = -1, s = n.length;\n                t < 0 && (t = -t > s ? 0 : s + t), e = e > s ? s : e, e < 0 && (e += s), s = t > e ? 0 : e - t >>> 0, t >>>= 0;\n                for(var o = p(s); ++r < s;)o[r] = n[r + t];\n                return o;\n            }\n            function Mc(n, t) {\n                var e;\n                return rt(n, function(r, s, o) {\n                    return e = t(r, s, o), !e;\n                }), !!e;\n            }\n            function Ye(n, t, e) {\n                var r = 0, s = n == null ? r : n.length;\n                if (typeof t == \"number\" && t === t && s <= Ma) {\n                    for(; r < s;){\n                        var o = r + s >>> 1, f = n[o];\n                        f !== null && !pn(f) && (e ? f <= t : f < t) ? r = o + 1 : s = o;\n                    }\n                    return s;\n                }\n                return ii(n, t, fn, e);\n            }\n            function ii(n, t, e, r) {\n                var s = 0, o = n == null ? 0 : n.length;\n                if (o === 0) return 0;\n                t = e(t);\n                for(var f = t !== t, c = t === null, l = pn(t), v = t === i; s < o;){\n                    var _ = We((s + o) / 2), m = e(n[_]), P = m !== i, I = m === null, E = m === m, b = pn(m);\n                    if (f) var y = r || E;\n                    else v ? y = E && (r || P) : c ? y = E && P && (r || !I) : l ? y = E && P && !I && (r || !b) : I || b ? y = !1 : y = r ? m <= t : m < t;\n                    y ? s = _ + 1 : o = _;\n                }\n                return nn(o, Fa);\n            }\n            function su(n, t) {\n                for(var e = -1, r = n.length, s = 0, o = []; ++e < r;){\n                    var f = n[e], c = t ? t(f) : f;\n                    if (!e || !bn(c, l)) {\n                        var l = c;\n                        o[s++] = f === 0 ? 0 : f;\n                    }\n                }\n                return o;\n            }\n            function uu(n) {\n                return typeof n == \"number\" ? n : pn(n) ? _e : +n;\n            }\n            function ln(n) {\n                if (typeof n == \"string\") return n;\n                if (O(n)) return G(n, ln) + \"\";\n                if (pn(n)) return Ws ? Ws.call(n) : \"\";\n                var t = n + \"\";\n                return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n            }\n            function it(n, t, e) {\n                var r = -1, s = Ee, o = n.length, f = !0, c = [], l = c;\n                if (e) f = !1, s = Dr;\n                else if (o >= w) {\n                    var v = t ? null : Vc(n);\n                    if (v) return Se(v);\n                    f = !1, s = jt, l = new gt;\n                } else l = t ? [] : c;\n                n: for(; ++r < o;){\n                    var _ = n[r], m = t ? t(_) : _;\n                    if (_ = e || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var P = l.length; P--;)if (l[P] === m) continue n;\n                        t && l.push(m), c.push(_);\n                    } else s(l, m, e) || (l !== c && l.push(m), c.push(_));\n                }\n                return c;\n            }\n            function si(n, t) {\n                return t = st(t, n), n = Hu(n, t), n == null || delete n[Wn(In(t))];\n            }\n            function au(n, t, e, r) {\n                return fe(n, t, e(_t(n, t)), r);\n            }\n            function Ze(n, t, e, r) {\n                for(var s = n.length, o = r ? s : -1; (r ? o-- : ++o < s) && t(n[o], o, n););\n                return e ? Cn(n, r ? 0 : o, r ? o + 1 : s) : Cn(n, r ? o + 1 : 0, r ? s : o);\n            }\n            function ou(n, t) {\n                var e = n;\n                return e instanceof H && (e = e.value()), Hr(t, function(r, s) {\n                    return s.func.apply(s.thisArg, nt([\n                        r\n                    ], s.args));\n                }, e);\n            }\n            function ui(n, t, e) {\n                var r = n.length;\n                if (r < 2) return r ? it(n[0]) : [];\n                for(var s = -1, o = p(r); ++s < r;)for(var f = n[s], c = -1; ++c < r;)c != s && (o[s] = ue(o[s] || f, n[c], t, e));\n                return it(j(o, 1), t, e);\n            }\n            function fu(n, t, e) {\n                for(var r = -1, s = n.length, o = t.length, f = {}; ++r < s;){\n                    var c = r < o ? t[r] : i;\n                    e(f, n[r], c);\n                }\n                return f;\n            }\n            function ai(n) {\n                return Z(n) ? n : [];\n            }\n            function oi(n) {\n                return typeof n == \"function\" ? n : fn;\n            }\n            function st(n, t) {\n                return O(n) ? n : _i(n, t) ? [\n                    n\n                ] : Wu(W(n));\n            }\n            var qc = L;\n            function ut(n, t, e) {\n                var r = n.length;\n                return e = e === i ? r : e, !t && e >= r ? n : Cn(n, t, e);\n            }\n            var cu = Of || function(n) {\n                return k.clearTimeout(n);\n            };\n            function hu(n, t) {\n                if (t) return n.slice();\n                var e = n.length, r = Ls ? Ls(e) : new n.constructor(e);\n                return n.copy(r), r;\n            }\n            function fi(n) {\n                var t = new n.constructor(n.byteLength);\n                return new De(t).set(new De(n)), t;\n            }\n            function Bc(n, t) {\n                var e = t ? fi(n.buffer) : n.buffer;\n                return new n.constructor(e, n.byteOffset, n.byteLength);\n            }\n            function Gc(n) {\n                var t = new n.constructor(n.source, Ji.exec(n));\n                return t.lastIndex = n.lastIndex, t;\n            }\n            function zc(n) {\n                return ie ? M(ie.call(n)) : {};\n            }\n            function lu(n, t) {\n                var e = t ? fi(n.buffer) : n.buffer;\n                return new n.constructor(e, n.byteOffset, n.length);\n            }\n            function pu(n, t) {\n                if (n !== t) {\n                    var e = n !== i, r = n === null, s = n === n, o = pn(n), f = t !== i, c = t === null, l = t === t, v = pn(t);\n                    if (!c && !v && !o && n > t || o && f && l && !c && !v || r && f && l || !e && l || !s) return 1;\n                    if (!r && !o && !v && n < t || v && e && s && !r && !o || c && e && s || !f && s || !l) return -1;\n                }\n                return 0;\n            }\n            function Kc(n, t, e) {\n                for(var r = -1, s = n.criteria, o = t.criteria, f = s.length, c = e.length; ++r < f;){\n                    var l = pu(s[r], o[r]);\n                    if (l) {\n                        if (r >= c) return l;\n                        var v = e[r];\n                        return l * (v == \"desc\" ? -1 : 1);\n                    }\n                }\n                return n.index - t.index;\n            }\n            function du(n, t, e, r) {\n                for(var s = -1, o = n.length, f = e.length, c = -1, l = t.length, v = Q(o - f, 0), _ = p(l + v), m = !r; ++c < l;)_[c] = t[c];\n                for(; ++s < f;)(m || s < o) && (_[e[s]] = n[s]);\n                for(; v--;)_[c++] = n[s++];\n                return _;\n            }\n            function gu(n, t, e, r) {\n                for(var s = -1, o = n.length, f = -1, c = e.length, l = -1, v = t.length, _ = Q(o - c, 0), m = p(_ + v), P = !r; ++s < _;)m[s] = n[s];\n                for(var I = s; ++l < v;)m[I + l] = t[l];\n                for(; ++f < c;)(P || s < o) && (m[I + e[f]] = n[s++]);\n                return m;\n            }\n            function un(n, t) {\n                var e = -1, r = n.length;\n                for(t || (t = p(r)); ++e < r;)t[e] = n[e];\n                return t;\n            }\n            function Un(n, t, e, r) {\n                var s = !e;\n                e || (e = {});\n                for(var o = -1, f = t.length; ++o < f;){\n                    var c = t[o], l = r ? r(e[c], n[c], c, e, n) : i;\n                    l === i && (l = n[c]), s ? zn(e, c, l) : se(e, c, l);\n                }\n                return e;\n            }\n            function Yc(n, t) {\n                return Un(n, vi(n), t);\n            }\n            function Zc(n, t) {\n                return Un(n, Ou(n), t);\n            }\n            function Je(n, t) {\n                return function(e, r) {\n                    var s = O(e) ? Vo : gc, o = t ? t() : {};\n                    return s(e, n, x(r, 2), o);\n                };\n            }\n            function Ft(n) {\n                return L(function(t, e) {\n                    var r = -1, s = e.length, o = s > 1 ? e[s - 1] : i, f = s > 2 ? e[2] : i;\n                    for(o = n.length > 3 && typeof o == \"function\" ? (s--, o) : i, f && rn(e[0], e[1], f) && (o = s < 3 ? i : o, s = 1), t = M(t); ++r < s;){\n                        var c = e[r];\n                        c && n(t, c, r, o);\n                    }\n                    return t;\n                });\n            }\n            function vu(n, t) {\n                return function(e, r) {\n                    if (e == null) return e;\n                    if (!an(e)) return n(e, r);\n                    for(var s = e.length, o = t ? s : -1, f = M(e); (t ? o-- : ++o < s) && r(f[o], o, f) !== !1;);\n                    return e;\n                };\n            }\n            function _u(n) {\n                return function(t, e, r) {\n                    for(var s = -1, o = M(t), f = r(t), c = f.length; c--;){\n                        var l = f[n ? c : ++s];\n                        if (e(o[l], l, o) === !1) break;\n                    }\n                    return t;\n                };\n            }\n            function Jc(n, t, e) {\n                var r = t & vn, s = ce(n);\n                function o() {\n                    var f = this && this !== k && this instanceof o ? s : n;\n                    return f.apply(r ? e : this, arguments);\n                }\n                return o;\n            }\n            function mu(n) {\n                return function(t) {\n                    t = W(t);\n                    var e = Lt(t) ? On(t) : i, r = e ? e[0] : t.charAt(0), s = e ? ut(e, 1).join(\"\") : t.slice(1);\n                    return r[n]() + s;\n                };\n            }\n            function Mt(n) {\n                return function(t) {\n                    return Hr(va(ga(t).replace(Uo, \"\")), n, \"\");\n                };\n            }\n            function ce(n) {\n                return function() {\n                    var t = arguments;\n                    switch(t.length){\n                        case 0:\n                            return new n;\n                        case 1:\n                            return new n(t[0]);\n                        case 2:\n                            return new n(t[0], t[1]);\n                        case 3:\n                            return new n(t[0], t[1], t[2]);\n                        case 4:\n                            return new n(t[0], t[1], t[2], t[3]);\n                        case 5:\n                            return new n(t[0], t[1], t[2], t[3], t[4]);\n                        case 6:\n                            return new n(t[0], t[1], t[2], t[3], t[4], t[5]);\n                        case 7:\n                            return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);\n                    }\n                    var e = Wt(n.prototype), r = n.apply(e, t);\n                    return K(r) ? r : e;\n                };\n            }\n            function Xc(n, t, e) {\n                var r = ce(n);\n                function s() {\n                    for(var o = arguments.length, f = p(o), c = o, l = qt(s); c--;)f[c] = arguments[c];\n                    var v = o < 3 && f[0] !== l && f[o - 1] !== l ? [] : tt(f, l);\n                    if (o -= v.length, o < e) return Iu(n, t, Xe, s.placeholder, i, f, v, i, i, e - o);\n                    var _ = this && this !== k && this instanceof s ? r : n;\n                    return cn(_, this, f);\n                }\n                return s;\n            }\n            function wu(n) {\n                return function(t, e, r) {\n                    var s = M(t);\n                    if (!an(t)) {\n                        var o = x(e, 3);\n                        t = V(t), e = function(c) {\n                            return o(s[c], c, s);\n                        };\n                    }\n                    var f = n(t, e, r);\n                    return f > -1 ? s[o ? t[f] : f] : i;\n                };\n            }\n            function Pu(n) {\n                return Yn(function(t) {\n                    var e = t.length, r = e, s = Pn.prototype.thru;\n                    for(n && t.reverse(); r--;){\n                        var o = t[r];\n                        if (typeof o != \"function\") throw new wn($);\n                        if (s && !f && je(o) == \"wrapper\") var f = new Pn([], !0);\n                    }\n                    for(r = f ? r : e; ++r < e;){\n                        o = t[r];\n                        var c = je(o), l = c == \"wrapper\" ? di(o) : i;\n                        l && mi(l[0]) && l[1] == (Mn | Dn | Hn | Kt) && !l[4].length && l[9] == 1 ? f = f[je(l[0])].apply(f, l[3]) : f = o.length == 1 && mi(o) ? f[c]() : f.thru(o);\n                    }\n                    return function() {\n                        var v = arguments, _ = v[0];\n                        if (f && v.length == 1 && O(_)) return f.plant(_).value();\n                        for(var m = 0, P = e ? t[m].apply(this, v) : _; ++m < e;)P = t[m].call(this, P);\n                        return P;\n                    };\n                });\n            }\n            function Xe(n, t, e, r, s, o, f, c, l, v) {\n                var _ = t & Mn, m = t & vn, P = t & ct, I = t & (Dn | yt), E = t & dr, b = P ? i : ce(n);\n                function y() {\n                    for(var D = arguments.length, N = p(D), dn = D; dn--;)N[dn] = arguments[dn];\n                    if (I) var sn = qt(y), gn = af(N, sn);\n                    if (r && (N = du(N, r, s, I)), o && (N = gu(N, o, f, I)), D -= gn, I && D < v) {\n                        var J = tt(N, sn);\n                        return Iu(n, t, Xe, y.placeholder, e, N, J, c, l, v - D);\n                    }\n                    var Tn = m ? e : this, Qn = P ? Tn[n] : n;\n                    return D = N.length, c ? N = gh(N, c) : E && D > 1 && N.reverse(), _ && l < D && (N.length = l), this && this !== k && this instanceof y && (Qn = b || ce(Qn)), Qn.apply(Tn, N);\n                }\n                return y;\n            }\n            function Au(n, t) {\n                return function(e, r) {\n                    return Ic(e, n, t(r), {});\n                };\n            }\n            function Qe(n, t) {\n                return function(e, r) {\n                    var s;\n                    if (e === i && r === i) return t;\n                    if (e !== i && (s = e), r !== i) {\n                        if (s === i) return r;\n                        typeof e == \"string\" || typeof r == \"string\" ? (e = ln(e), r = ln(r)) : (e = uu(e), r = uu(r)), s = n(e, r);\n                    }\n                    return s;\n                };\n            }\n            function ci(n) {\n                return Yn(function(t) {\n                    return t = G(t, hn(x())), L(function(e) {\n                        var r = this;\n                        return n(t, function(s) {\n                            return cn(s, r, e);\n                        });\n                    });\n                });\n            }\n            function Ve(n, t) {\n                t = t === i ? \" \" : ln(t);\n                var e = t.length;\n                if (e < 2) return e ? ri(t, n) : t;\n                var r = ri(t, Ue(n / Dt(t)));\n                return Lt(t) ? ut(On(r), 0, n).join(\"\") : r.slice(0, n);\n            }\n            function Qc(n, t, e, r) {\n                var s = t & vn, o = ce(n);\n                function f() {\n                    for(var c = -1, l = arguments.length, v = -1, _ = r.length, m = p(_ + l), P = this && this !== k && this instanceof f ? o : n; ++v < _;)m[v] = r[v];\n                    for(; l--;)m[v++] = arguments[++c];\n                    return cn(P, s ? e : this, m);\n                }\n                return f;\n            }\n            function Cu(n) {\n                return function(t, e, r) {\n                    return r && typeof r != \"number\" && rn(t, e, r) && (e = r = i), t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), r = r === i ? t < e ? 1 : -1 : Xn(r), Nc(t, e, r, n);\n                };\n            }\n            function ke(n) {\n                return function(t, e) {\n                    return typeof t == \"string\" && typeof e == \"string\" || (t = xn(t), e = xn(e)), n(t, e);\n                };\n            }\n            function Iu(n, t, e, r, s, o, f, c, l, v) {\n                var _ = t & Dn, m = _ ? f : i, P = _ ? i : f, I = _ ? o : i, E = _ ? i : o;\n                t |= _ ? Hn : St, t &= ~(_ ? St : Hn), t & qi || (t &= ~(vn | ct));\n                var b = [\n                    n,\n                    t,\n                    s,\n                    I,\n                    m,\n                    E,\n                    P,\n                    c,\n                    l,\n                    v\n                ], y = e.apply(i, b);\n                return mi(n) && Nu(y, b), y.placeholder = r, $u(y, n, t);\n            }\n            function hi(n) {\n                var t = X[n];\n                return function(e, r) {\n                    if (e = xn(e), r = r == null ? 0 : nn(R(r), 292), r && $s(e)) {\n                        var s = (W(e) + \"e\").split(\"e\"), o = t(s[0] + \"e\" + (+s[1] + r));\n                        return s = (W(o) + \"e\").split(\"e\"), +(s[0] + \"e\" + (+s[1] - r));\n                    }\n                    return t(e);\n                };\n            }\n            var Vc = $t && 1 / Se(new $t([\n                ,\n                -0\n            ]))[1] == ht ? function(n) {\n                return new $t(n);\n            } : Di;\n            function xu(n) {\n                return function(t) {\n                    var e = tn(t);\n                    return e == yn ? qr(t) : e == Sn ? df(t) : uf(t, n(t));\n                };\n            }\n            function Kn(n, t, e, r, s, o, f, c) {\n                var l = t & ct;\n                if (!l && typeof n != \"function\") throw new wn($);\n                var v = r ? r.length : 0;\n                if (v || (t &= ~(Hn | St), r = s = i), f = f === i ? f : Q(R(f), 0), c = c === i ? c : R(c), v -= s ? s.length : 0, t & St) {\n                    var _ = r, m = s;\n                    r = s = i;\n                }\n                var P = l ? i : di(n), I = [\n                    n,\n                    t,\n                    e,\n                    r,\n                    s,\n                    _,\n                    m,\n                    o,\n                    f,\n                    c\n                ];\n                if (P && lh(I, P), n = I[0], t = I[1], e = I[2], r = I[3], s = I[4], c = I[9] = I[9] === i ? l ? 0 : n.length : Q(I[9] - v, 0), !c && t & (Dn | yt) && (t &= ~(Dn | yt)), !t || t == vn) var E = Jc(n, t, e);\n                else t == Dn || t == yt ? E = Xc(n, t, c) : (t == Hn || t == (vn | Hn)) && !s.length ? E = Qc(n, t, e, r) : E = Xe.apply(i, I);\n                var b = P ? iu : Nu;\n                return $u(b(E, I), n, t);\n            }\n            function Eu(n, t, e, r) {\n                return n === i || bn(n, Nt[e]) && !F.call(r, e) ? t : n;\n            }\n            function yu(n, t, e, r, s, o) {\n                return K(n) && K(t) && (o.set(t, n), Ke(n, t, i, yu, o), o.delete(t)), n;\n            }\n            function kc(n) {\n                return pe(n) ? i : n;\n            }\n            function Su(n, t, e, r, s, o) {\n                var f = e & Et, c = n.length, l = t.length;\n                if (c != l && !(f && l > c)) return !1;\n                var v = o.get(n), _ = o.get(t);\n                if (v && _) return v == t && _ == n;\n                var m = -1, P = !0, I = e & ve ? new gt : i;\n                for(o.set(n, t), o.set(t, n); ++m < c;){\n                    var E = n[m], b = t[m];\n                    if (r) var y = f ? r(b, E, m, t, n, o) : r(E, b, m, n, t, o);\n                    if (y !== i) {\n                        if (y) continue;\n                        P = !1;\n                        break;\n                    }\n                    if (I) {\n                        if (!Nr(t, function(D, N) {\n                            if (!jt(I, N) && (E === D || s(E, D, e, r, o))) return I.push(N);\n                        })) {\n                            P = !1;\n                            break;\n                        }\n                    } else if (!(E === b || s(E, b, e, r, o))) {\n                        P = !1;\n                        break;\n                    }\n                }\n                return o.delete(n), o.delete(t), P;\n            }\n            function jc(n, t, e, r, s, o, f) {\n                switch(e){\n                    case Rt:\n                        if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset) return !1;\n                        n = n.buffer, t = t.buffer;\n                    case kt:\n                        return !(n.byteLength != t.byteLength || !o(new De(n), new De(t)));\n                    case Yt:\n                    case Zt:\n                    case Jt:\n                        return bn(+n, +t);\n                    case we:\n                        return n.name == t.name && n.message == t.message;\n                    case Xt:\n                    case Qt:\n                        return n == t + \"\";\n                    case yn:\n                        var c = qr;\n                    case Sn:\n                        var l = r & Et;\n                        if (c || (c = Se), n.size != t.size && !l) return !1;\n                        var v = f.get(n);\n                        if (v) return v == t;\n                        r |= ve, f.set(n, t);\n                        var _ = Su(c(n), c(t), r, s, o, f);\n                        return f.delete(n), _;\n                    case Ae:\n                        if (ie) return ie.call(n) == ie.call(t);\n                }\n                return !1;\n            }\n            function nh(n, t, e, r, s, o) {\n                var f = e & Et, c = li(n), l = c.length, v = li(t), _ = v.length;\n                if (l != _ && !f) return !1;\n                for(var m = l; m--;){\n                    var P = c[m];\n                    if (!(f ? P in t : F.call(t, P))) return !1;\n                }\n                var I = o.get(n), E = o.get(t);\n                if (I && E) return I == t && E == n;\n                var b = !0;\n                o.set(n, t), o.set(t, n);\n                for(var y = f; ++m < l;){\n                    P = c[m];\n                    var D = n[P], N = t[P];\n                    if (r) var dn = f ? r(N, D, P, t, n, o) : r(D, N, P, n, t, o);\n                    if (!(dn === i ? D === N || s(D, N, e, r, o) : dn)) {\n                        b = !1;\n                        break;\n                    }\n                    y || (y = P == \"constructor\");\n                }\n                if (b && !y) {\n                    var sn = n.constructor, gn = t.constructor;\n                    sn != gn && \"constructor\" in n && \"constructor\" in t && !(typeof sn == \"function\" && sn instanceof sn && typeof gn == \"function\" && gn instanceof gn) && (b = !1);\n                }\n                return o.delete(n), o.delete(t), b;\n            }\n            function Yn(n) {\n                return Pi(Du(n, i, Bu), n + \"\");\n            }\n            function li(n) {\n                return Zs(n, V, vi);\n            }\n            function pi(n) {\n                return Zs(n, on, Ou);\n            }\n            var di = Fe ? function(n) {\n                return Fe.get(n);\n            } : Di;\n            function je(n) {\n                for(var t = n.name + \"\", e = Ut[t], r = F.call(Ut, t) ? e.length : 0; r--;){\n                    var s = e[r], o = s.func;\n                    if (o == null || o == n) return s.name;\n                }\n                return t;\n            }\n            function qt(n) {\n                var t = F.call(a, \"placeholder\") ? a : n;\n                return t.placeholder;\n            }\n            function x() {\n                var n = a.iteratee || Ti;\n                return n = n === Ti ? Qs : n, arguments.length ? n(arguments[0], arguments[1]) : n;\n            }\n            function nr(n, t) {\n                var e = n.__data__;\n                return oh(t) ? e[typeof t == \"string\" ? \"string\" : \"hash\"] : e.map;\n            }\n            function gi(n) {\n                for(var t = V(n), e = t.length; e--;){\n                    var r = t[e], s = n[r];\n                    t[e] = [\n                        r,\n                        s,\n                        Tu(s)\n                    ];\n                }\n                return t;\n            }\n            function mt(n, t) {\n                var e = hf(n, t);\n                return Xs(e) ? e : i;\n            }\n            function th(n) {\n                var t = F.call(n, pt), e = n[pt];\n                try {\n                    n[pt] = i;\n                    var r = !0;\n                } catch (e) {}\n                var s = Te.call(n);\n                return r && (t ? n[pt] = e : delete n[pt]), s;\n            }\n            var vi = Gr ? function(n) {\n                return n == null ? [] : (n = M(n), jn(Gr(n), function(t) {\n                    return Hs.call(n, t);\n                }));\n            } : Hi, Ou = Gr ? function(n) {\n                for(var t = []; n;)nt(t, vi(n)), n = He(n);\n                return t;\n            } : Hi, tn = en;\n            (zr && tn(new zr(new ArrayBuffer(1))) != Rt || te && tn(new te) != yn || Kr && tn(Kr.resolve()) != zi || $t && tn(new $t) != Sn || ee && tn(new ee) != Vt) && (tn = function(n) {\n                var t = en(n), e = t == qn ? n.constructor : i, r = e ? wt(e) : \"\";\n                if (r) switch(r){\n                    case Uf:\n                        return Rt;\n                    case Wf:\n                        return yn;\n                    case Ff:\n                        return zi;\n                    case Mf:\n                        return Sn;\n                    case qf:\n                        return Vt;\n                }\n                return t;\n            });\n            function eh(n, t, e) {\n                for(var r = -1, s = e.length; ++r < s;){\n                    var o = e[r], f = o.size;\n                    switch(o.type){\n                        case \"drop\":\n                            n += f;\n                            break;\n                        case \"dropRight\":\n                            t -= f;\n                            break;\n                        case \"take\":\n                            t = nn(t, n + f);\n                            break;\n                        case \"takeRight\":\n                            n = Q(n, t - f);\n                            break;\n                    }\n                }\n                return {\n                    start: n,\n                    end: t\n                };\n            }\n            function rh(n) {\n                var t = n.match(ao);\n                return t ? t[1].split(oo) : [];\n            }\n            function Ru(n, t, e) {\n                t = st(t, n);\n                for(var r = -1, s = t.length, o = !1; ++r < s;){\n                    var f = Wn(t[r]);\n                    if (!(o = n != null && e(n, f))) break;\n                    n = n[f];\n                }\n                return o || ++r != s ? o : (s = n == null ? 0 : n.length, !!s && ar(s) && Zn(f, s) && (O(n) || Pt(n)));\n            }\n            function ih(n) {\n                var t = n.length, e = new n.constructor(t);\n                return t && typeof n[0] == \"string\" && F.call(n, \"index\") && (e.index = n.index, e.input = n.input), e;\n            }\n            function bu(n) {\n                return typeof n.constructor == \"function\" && !he(n) ? Wt(He(n)) : {};\n            }\n            function sh(n, t, e) {\n                var r = n.constructor;\n                switch(t){\n                    case kt:\n                        return fi(n);\n                    case Yt:\n                    case Zt:\n                        return new r(+n);\n                    case Rt:\n                        return Bc(n, e);\n                    case gr:\n                    case vr:\n                    case _r:\n                    case mr:\n                    case wr:\n                    case Pr:\n                    case Ar:\n                    case Cr:\n                    case Ir:\n                        return lu(n, e);\n                    case yn:\n                        return new r;\n                    case Jt:\n                    case Qt:\n                        return new r(n);\n                    case Xt:\n                        return Gc(n);\n                    case Sn:\n                        return new r;\n                    case Ae:\n                        return zc(n);\n                }\n            }\n            function uh(n, t) {\n                var e = t.length;\n                if (!e) return n;\n                var r = e - 1;\n                return t[r] = (e > 1 ? \"& \" : \"\") + t[r], t = t.join(e > 2 ? \", \" : \" \"), n.replace(uo, \"{\\n/* [wrapped with \" + t + \"] */\\n\");\n            }\n            function ah(n) {\n                return O(n) || Pt(n) || !!(Ns && n && n[Ns]);\n            }\n            function Zn(n, t) {\n                var e = typeof n;\n                return t = t !== null && t !== void 0 ? t : kn, !!t && (e == \"number\" || e != \"symbol\" && mo.test(n)) && n > -1 && n % 1 == 0 && n < t;\n            }\n            function rn(n, t, e) {\n                if (!K(e)) return !1;\n                var r = typeof t;\n                return (r == \"number\" ? an(e) && Zn(t, e.length) : r == \"string\" && t in e) ? bn(e[t], n) : !1;\n            }\n            function _i(n, t) {\n                if (O(n)) return !1;\n                var e = typeof n;\n                return e == \"number\" || e == \"symbol\" || e == \"boolean\" || n == null || pn(n) ? !0 : eo.test(n) || !to.test(n) || t != null && n in M(t);\n            }\n            function oh(n) {\n                var t = typeof n;\n                return t == \"string\" || t == \"number\" || t == \"symbol\" || t == \"boolean\" ? n !== \"__proto__\" : n === null;\n            }\n            function mi(n) {\n                var t = je(n), e = a[t];\n                if (typeof e != \"function\" || !(t in H.prototype)) return !1;\n                if (n === e) return !0;\n                var r = di(e);\n                return !!r && n === r[0];\n            }\n            function fh(n) {\n                return !!Ts && Ts in n;\n            }\n            var ch = Re ? Jn : Ni;\n            function he(n) {\n                var t = n && n.constructor, e = typeof t == \"function\" && t.prototype || Nt;\n                return n === e;\n            }\n            function Tu(n) {\n                return n === n && !K(n);\n            }\n            function Lu(n, t) {\n                return function(e) {\n                    return e == null ? !1 : e[n] === t && (t !== i || n in M(e));\n                };\n            }\n            function hh(n) {\n                var t = sr(n, function(r) {\n                    return e.size === pr && e.clear(), r;\n                }), e = t.cache;\n                return t;\n            }\n            function lh(n, t) {\n                var e = n[1], r = t[1], s = e | r, o = s < (vn | ct | Mn), f = r == Mn && e == Dn || r == Mn && e == Kt && n[7].length <= t[8] || r == (Mn | Kt) && t[7].length <= t[8] && e == Dn;\n                if (!(o || f)) return n;\n                r & vn && (n[2] = t[2], s |= e & vn ? 0 : qi);\n                var c = t[3];\n                if (c) {\n                    var l = n[3];\n                    n[3] = l ? du(l, c, t[4]) : c, n[4] = l ? tt(n[3], It) : t[4];\n                }\n                return c = t[5], c && (l = n[5], n[5] = l ? gu(l, c, t[6]) : c, n[6] = l ? tt(n[5], It) : t[6]), c = t[7], c && (n[7] = c), r & Mn && (n[8] = n[8] == null ? t[8] : nn(n[8], t[8])), n[9] == null && (n[9] = t[9]), n[0] = t[0], n[1] = s, n;\n            }\n            function ph(n) {\n                var t = [];\n                if (n != null) for(var e in M(n))t.push(e);\n                return t;\n            }\n            function dh(n) {\n                return Te.call(n);\n            }\n            function Du(n, t, e) {\n                return t = Q(t === i ? n.length - 1 : t, 0), function() {\n                    for(var r = arguments, s = -1, o = Q(r.length - t, 0), f = p(o); ++s < o;)f[s] = r[t + s];\n                    s = -1;\n                    for(var c = p(t + 1); ++s < t;)c[s] = r[s];\n                    return c[t] = e(f), cn(n, this, c);\n                };\n            }\n            function Hu(n, t) {\n                return t.length < 2 ? n : _t(n, Cn(t, 0, -1));\n            }\n            function gh(n, t) {\n                for(var e = n.length, r = nn(t.length, e), s = un(n); r--;){\n                    var o = t[r];\n                    n[r] = Zn(o, e) ? s[o] : i;\n                }\n                return n;\n            }\n            function wi(n, t) {\n                if (!(t === \"constructor\" && typeof n[t] == \"function\") && t != \"__proto__\") return n[t];\n            }\n            var Nu = Uu(iu), le = bf || function(n, t) {\n                return k.setTimeout(n, t);\n            }, Pi = Uu(Wc);\n            function $u(n, t, e) {\n                var r = t + \"\";\n                return Pi(n, uh(r, vh(rh(r), e)));\n            }\n            function Uu(n) {\n                var t = 0, e = 0;\n                return function() {\n                    var r = Hf(), s = Na - (r - e);\n                    if (e = r, s > 0) {\n                        if (++t >= Ha) return arguments[0];\n                    } else t = 0;\n                    return n.apply(i, arguments);\n                };\n            }\n            function tr(n, t) {\n                var e = -1, r = n.length, s = r - 1;\n                for(t = t === i ? r : t; ++e < t;){\n                    var o = ei(e, s), f = n[o];\n                    n[o] = n[e], n[e] = f;\n                }\n                return n.length = t, n;\n            }\n            var Wu = hh(function(n) {\n                var t = [];\n                return n.charCodeAt(0) === 46 && t.push(\"\"), n.replace(ro, function(e, r, s, o) {\n                    t.push(s ? o.replace(ho, \"$1\") : r || e);\n                }), t;\n            });\n            function Wn(n) {\n                if (typeof n == \"string\" || pn(n)) return n;\n                var t = n + \"\";\n                return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n            }\n            function wt(n) {\n                if (n != null) {\n                    try {\n                        return be.call(n);\n                    } catch (e) {}\n                    try {\n                        return n + \"\";\n                    } catch (e) {}\n                }\n                return \"\";\n            }\n            function vh(n, t) {\n                return mn(qa, function(e) {\n                    var r = \"_.\" + e[0];\n                    t & e[1] && !Ee(n, r) && n.push(r);\n                }), n.sort();\n            }\n            function Fu(n) {\n                if (n instanceof H) return n.clone();\n                var t = new Pn(n.__wrapped__, n.__chain__);\n                return t.__actions__ = un(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;\n            }\n            function _h(n, t, e) {\n                (e ? rn(n, t, e) : t === i) ? t = 1 : t = Q(R(t), 0);\n                var r = n == null ? 0 : n.length;\n                if (!r || t < 1) return [];\n                for(var s = 0, o = 0, f = p(Ue(r / t)); s < r;)f[o++] = Cn(n, s, s += t);\n                return f;\n            }\n            function mh(n) {\n                for(var t = -1, e = n == null ? 0 : n.length, r = 0, s = []; ++t < e;){\n                    var o = n[t];\n                    o && (s[r++] = o);\n                }\n                return s;\n            }\n            function wh() {\n                var n = arguments.length;\n                if (!n) return [];\n                for(var t = p(n - 1), e = arguments[0], r = n; r--;)t[r - 1] = arguments[r];\n                return nt(O(e) ? un(e) : [\n                    e\n                ], j(t, 1));\n            }\n            var Ph = L(function(n, t) {\n                return Z(n) ? ue(n, j(t, 1, Z, !0)) : [];\n            }), Ah = L(function(n, t) {\n                var e = In(t);\n                return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), x(e, 2)) : [];\n            }), Ch = L(function(n, t) {\n                var e = In(t);\n                return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), i, e) : [];\n            });\n            function Ih(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : R(t), Cn(n, t < 0 ? 0 : t, r)) : [];\n            }\n            function xh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : R(t), t = r - t, Cn(n, 0, t < 0 ? 0 : t)) : [];\n            }\n            function Eh(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !0, !0) : [];\n            }\n            function yh(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !0) : [];\n            }\n            function Sh(n, t, e, r) {\n                var s = n == null ? 0 : n.length;\n                return s ? (e && typeof e != \"number\" && rn(n, t, e) && (e = 0, r = s), wc(n, t, e, r)) : [];\n            }\n            function Mu(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = e == null ? 0 : R(e);\n                return s < 0 && (s = Q(r + s, 0)), ye(n, x(t, 3), s);\n            }\n            function qu(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = r - 1;\n                return e !== i && (s = R(e), s = e < 0 ? Q(r + s, 0) : nn(s, r - 1)), ye(n, x(t, 3), s, !0);\n            }\n            function Bu(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? j(n, 1) : [];\n            }\n            function Oh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? j(n, ht) : [];\n            }\n            function Rh(n, t) {\n                var e = n == null ? 0 : n.length;\n                return e ? (t = t === i ? 1 : R(t), j(n, t)) : [];\n            }\n            function bh(n) {\n                for(var t = -1, e = n == null ? 0 : n.length, r = {}; ++t < e;){\n                    var s = n[t];\n                    r[s[0]] = s[1];\n                }\n                return r;\n            }\n            function Gu(n) {\n                return n && n.length ? n[0] : i;\n            }\n            function Th(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = e == null ? 0 : R(e);\n                return s < 0 && (s = Q(r + s, 0)), Tt(n, t, s);\n            }\n            function Lh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? Cn(n, 0, -1) : [];\n            }\n            var Dh = L(function(n) {\n                var t = G(n, ai);\n                return t.length && t[0] === n[0] ? Vr(t) : [];\n            }), Hh = L(function(n) {\n                var t = In(n), e = G(n, ai);\n                return t === In(e) ? t = i : e.pop(), e.length && e[0] === n[0] ? Vr(e, x(t, 2)) : [];\n            }), Nh = L(function(n) {\n                var t = In(n), e = G(n, ai);\n                return t = typeof t == \"function\" ? t : i, t && e.pop(), e.length && e[0] === n[0] ? Vr(e, i, t) : [];\n            });\n            function $h(n, t) {\n                return n == null ? \"\" : Lf.call(n, t);\n            }\n            function In(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? n[t - 1] : i;\n            }\n            function Uh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = r;\n                return e !== i && (s = R(e), s = s < 0 ? Q(r + s, 0) : nn(s, r - 1)), t === t ? vf(n, t, s) : ye(n, Is, s, !0);\n            }\n            function Wh(n, t) {\n                return n && n.length ? nu(n, R(t)) : i;\n            }\n            var Fh = L(zu);\n            function zu(n, t) {\n                return n && n.length && t && t.length ? ti(n, t) : n;\n            }\n            function Mh(n, t, e) {\n                return n && n.length && t && t.length ? ti(n, t, x(e, 2)) : n;\n            }\n            function qh(n, t, e) {\n                return n && n.length && t && t.length ? ti(n, t, i, e) : n;\n            }\n            var Bh = Yn(function(n, t) {\n                var e = n == null ? 0 : n.length, r = Zr(n, t);\n                return ru(n, G(t, function(s) {\n                    return Zn(s, e) ? +s : s;\n                }).sort(pu)), r;\n            });\n            function Gh(n, t) {\n                var e = [];\n                if (!(n && n.length)) return e;\n                var r = -1, s = [], o = n.length;\n                for(t = x(t, 3); ++r < o;){\n                    var f = n[r];\n                    t(f, r, n) && (e.push(f), s.push(r));\n                }\n                return ru(n, s), e;\n            }\n            function Ai(n) {\n                return n == null ? n : $f.call(n);\n            }\n            function zh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (e && typeof e != \"number\" && rn(n, t, e) ? (t = 0, e = r) : (t = t == null ? 0 : R(t), e = e === i ? r : R(e)), Cn(n, t, e)) : [];\n            }\n            function Kh(n, t) {\n                return Ye(n, t);\n            }\n            function Yh(n, t, e) {\n                return ii(n, t, x(e, 2));\n            }\n            function Zh(n, t) {\n                var e = n == null ? 0 : n.length;\n                if (e) {\n                    var r = Ye(n, t);\n                    if (r < e && bn(n[r], t)) return r;\n                }\n                return -1;\n            }\n            function Jh(n, t) {\n                return Ye(n, t, !0);\n            }\n            function Xh(n, t, e) {\n                return ii(n, t, x(e, 2), !0);\n            }\n            function Qh(n, t) {\n                var e = n == null ? 0 : n.length;\n                if (e) {\n                    var r = Ye(n, t, !0) - 1;\n                    if (bn(n[r], t)) return r;\n                }\n                return -1;\n            }\n            function Vh(n) {\n                return n && n.length ? su(n) : [];\n            }\n            function kh(n, t) {\n                return n && n.length ? su(n, x(t, 2)) : [];\n            }\n            function jh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? Cn(n, 1, t) : [];\n            }\n            function nl(n, t, e) {\n                return n && n.length ? (t = e || t === i ? 1 : R(t), Cn(n, 0, t < 0 ? 0 : t)) : [];\n            }\n            function tl(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : R(t), t = r - t, Cn(n, t < 0 ? 0 : t, r)) : [];\n            }\n            function el(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !1, !0) : [];\n            }\n            function rl(n, t) {\n                return n && n.length ? Ze(n, x(t, 3)) : [];\n            }\n            var il = L(function(n) {\n                return it(j(n, 1, Z, !0));\n            }), sl = L(function(n) {\n                var t = In(n);\n                return Z(t) && (t = i), it(j(n, 1, Z, !0), x(t, 2));\n            }), ul = L(function(n) {\n                var t = In(n);\n                return t = typeof t == \"function\" ? t : i, it(j(n, 1, Z, !0), i, t);\n            });\n            function al(n) {\n                return n && n.length ? it(n) : [];\n            }\n            function ol(n, t) {\n                return n && n.length ? it(n, x(t, 2)) : [];\n            }\n            function fl(n, t) {\n                return t = typeof t == \"function\" ? t : i, n && n.length ? it(n, i, t) : [];\n            }\n            function Ci(n) {\n                if (!(n && n.length)) return [];\n                var t = 0;\n                return n = jn(n, function(e) {\n                    if (Z(e)) return t = Q(e.length, t), !0;\n                }), Fr(t, function(e) {\n                    return G(n, $r(e));\n                });\n            }\n            function Ku(n, t) {\n                if (!(n && n.length)) return [];\n                var e = Ci(n);\n                return t == null ? e : G(e, function(r) {\n                    return cn(t, i, r);\n                });\n            }\n            var cl = L(function(n, t) {\n                return Z(n) ? ue(n, t) : [];\n            }), hl = L(function(n) {\n                return ui(jn(n, Z));\n            }), ll = L(function(n) {\n                var t = In(n);\n                return Z(t) && (t = i), ui(jn(n, Z), x(t, 2));\n            }), pl = L(function(n) {\n                var t = In(n);\n                return t = typeof t == \"function\" ? t : i, ui(jn(n, Z), i, t);\n            }), dl = L(Ci);\n            function gl(n, t) {\n                return fu(n || [], t || [], se);\n            }\n            function vl(n, t) {\n                return fu(n || [], t || [], fe);\n            }\n            var _l = L(function(n) {\n                var t = n.length, e = t > 1 ? n[t - 1] : i;\n                return e = typeof e == \"function\" ? (n.pop(), e) : i, Ku(n, e);\n            });\n            function Yu(n) {\n                var t = a(n);\n                return t.__chain__ = !0, t;\n            }\n            function ml(n, t) {\n                return t(n), n;\n            }\n            function er(n, t) {\n                return t(n);\n            }\n            var wl = Yn(function(n) {\n                var t = n.length, e = t ? n[0] : 0, r = this.__wrapped__, s = function(o) {\n                    return Zr(o, n);\n                };\n                return t > 1 || this.__actions__.length || !(r instanceof H) || !Zn(e) ? this.thru(s) : (r = r.slice(e, +e + (t ? 1 : 0)), r.__actions__.push({\n                    func: er,\n                    args: [\n                        s\n                    ],\n                    thisArg: i\n                }), new Pn(r, this.__chain__).thru(function(o) {\n                    return t && !o.length && o.push(i), o;\n                }));\n            });\n            function Pl() {\n                return Yu(this);\n            }\n            function Al() {\n                return new Pn(this.value(), this.__chain__);\n            }\n            function Cl() {\n                this.__values__ === i && (this.__values__ = ua(this.value()));\n                var n = this.__index__ >= this.__values__.length, t = n ? i : this.__values__[this.__index__++];\n                return {\n                    done: n,\n                    value: t\n                };\n            }\n            function Il() {\n                return this;\n            }\n            function xl(n) {\n                for(var t, e = this; e instanceof qe;){\n                    var r = Fu(e);\n                    r.__index__ = 0, r.__values__ = i, t ? s.__wrapped__ = r : t = r;\n                    var s = r;\n                    e = e.__wrapped__;\n                }\n                return s.__wrapped__ = n, t;\n            }\n            function El() {\n                var n = this.__wrapped__;\n                if (n instanceof H) {\n                    var t = n;\n                    return this.__actions__.length && (t = new H(this)), t = t.reverse(), t.__actions__.push({\n                        func: er,\n                        args: [\n                            Ai\n                        ],\n                        thisArg: i\n                    }), new Pn(t, this.__chain__);\n                }\n                return this.thru(Ai);\n            }\n            function yl() {\n                return ou(this.__wrapped__, this.__actions__);\n            }\n            var Sl = Je(function(n, t, e) {\n                F.call(n, e) ? ++n[e] : zn(n, e, 1);\n            });\n            function Ol(n, t, e) {\n                var r = O(n) ? As : mc;\n                return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n            }\n            function Rl(n, t) {\n                var e = O(n) ? jn : Ks;\n                return e(n, x(t, 3));\n            }\n            var bl = wu(Mu), Tl = wu(qu);\n            function Ll(n, t) {\n                return j(rr(n, t), 1);\n            }\n            function Dl(n, t) {\n                return j(rr(n, t), ht);\n            }\n            function Hl(n, t, e) {\n                return e = e === i ? 1 : R(e), j(rr(n, t), e);\n            }\n            function Zu(n, t) {\n                var e = O(n) ? mn : rt;\n                return e(n, x(t, 3));\n            }\n            function Ju(n, t) {\n                var e = O(n) ? ko : zs;\n                return e(n, x(t, 3));\n            }\n            var Nl = Je(function(n, t, e) {\n                F.call(n, e) ? n[e].push(t) : zn(n, e, [\n                    t\n                ]);\n            });\n            function $l(n, t, e, r) {\n                n = an(n) ? n : Gt(n), e = e && !r ? R(e) : 0;\n                var s = n.length;\n                return e < 0 && (e = Q(s + e, 0)), or(n) ? e <= s && n.indexOf(t, e) > -1 : !!s && Tt(n, t, e) > -1;\n            }\n            var Ul = L(function(n, t, e) {\n                var r = -1, s = typeof t == \"function\", o = an(n) ? p(n.length) : [];\n                return rt(n, function(f) {\n                    o[++r] = s ? cn(t, f, e) : ae(f, t, e);\n                }), o;\n            }), Wl = Je(function(n, t, e) {\n                zn(n, e, t);\n            });\n            function rr(n, t) {\n                var e = O(n) ? G : Vs;\n                return e(n, x(t, 3));\n            }\n            function Fl(n, t, e, r) {\n                return n == null ? [] : (O(t) || (t = t == null ? [] : [\n                    t\n                ]), e = r ? i : e, O(e) || (e = e == null ? [] : [\n                    e\n                ]), tu(n, t, e));\n            }\n            var Ml = Je(function(n, t, e) {\n                n[e ? 0 : 1].push(t);\n            }, function() {\n                return [\n                    [],\n                    []\n                ];\n            });\n            function ql(n, t, e) {\n                var r = O(n) ? Hr : Es, s = arguments.length < 3;\n                return r(n, x(t, 4), e, s, rt);\n            }\n            function Bl(n, t, e) {\n                var r = O(n) ? jo : Es, s = arguments.length < 3;\n                return r(n, x(t, 4), e, s, zs);\n            }\n            function Gl(n, t) {\n                var e = O(n) ? jn : Ks;\n                return e(n, ur(x(t, 3)));\n            }\n            function zl(n) {\n                var t = O(n) ? Ms : $c;\n                return t(n);\n            }\n            function Kl(n, t, e) {\n                (e ? rn(n, t, e) : t === i) ? t = 1 : t = R(t);\n                var r = O(n) ? pc : Uc;\n                return r(n, t);\n            }\n            function Yl(n) {\n                var t = O(n) ? dc : Fc;\n                return t(n);\n            }\n            function Zl(n) {\n                if (n == null) return 0;\n                if (an(n)) return or(n) ? Dt(n) : n.length;\n                var t = tn(n);\n                return t == yn || t == Sn ? n.size : jr(n).length;\n            }\n            function Jl(n, t, e) {\n                var r = O(n) ? Nr : Mc;\n                return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n            }\n            var Xl = L(function(n, t) {\n                if (n == null) return [];\n                var e = t.length;\n                return e > 1 && rn(n, t[0], t[1]) ? t = [] : e > 2 && rn(t[0], t[1], t[2]) && (t = [\n                    t[0]\n                ]), tu(n, j(t, 1), []);\n            }), ir = Rf || function() {\n                return k.Date.now();\n            };\n            function Ql(n, t) {\n                if (typeof t != \"function\") throw new wn($);\n                return n = R(n), function() {\n                    if (--n < 1) return t.apply(this, arguments);\n                };\n            }\n            function Xu(n, t, e) {\n                return t = e ? i : t, t = n && t == null ? n.length : t, Kn(n, Mn, i, i, i, i, t);\n            }\n            function Qu(n, t) {\n                var e;\n                if (typeof t != \"function\") throw new wn($);\n                return n = R(n), function() {\n                    return --n > 0 && (e = t.apply(this, arguments)), n <= 1 && (t = i), e;\n                };\n            }\n            var Ii = L(function(n, t, e) {\n                var r = vn;\n                if (e.length) {\n                    var s = tt(e, qt(Ii));\n                    r |= Hn;\n                }\n                return Kn(n, r, t, e, s);\n            }), Vu = L(function(n, t, e) {\n                var r = vn | ct;\n                if (e.length) {\n                    var s = tt(e, qt(Vu));\n                    r |= Hn;\n                }\n                return Kn(t, r, n, e, s);\n            });\n            function ku(n, t, e) {\n                t = e ? i : t;\n                var r = Kn(n, Dn, i, i, i, i, i, t);\n                return r.placeholder = ku.placeholder, r;\n            }\n            function ju(n, t, e) {\n                t = e ? i : t;\n                var r = Kn(n, yt, i, i, i, i, i, t);\n                return r.placeholder = ju.placeholder, r;\n            }\n            function na(n, t, e) {\n                var r, s, o, f, c, l, v = 0, _ = !1, m = !1, P = !0;\n                if (typeof n != \"function\") throw new wn($);\n                t = xn(t) || 0, K(e) && (_ = !!e.leading, m = \"maxWait\" in e, o = m ? Q(xn(e.maxWait) || 0, t) : o, P = \"trailing\" in e ? !!e.trailing : P);\n                function I(J) {\n                    var Tn = r, Qn = s;\n                    return r = s = i, v = J, f = n.apply(Qn, Tn), f;\n                }\n                function E(J) {\n                    return v = J, c = le(D, t), _ ? I(J) : f;\n                }\n                function b(J) {\n                    var Tn = J - l, Qn = J - v, wa = t - Tn;\n                    return m ? nn(wa, o - Qn) : wa;\n                }\n                function y(J) {\n                    var Tn = J - l, Qn = J - v;\n                    return l === i || Tn >= t || Tn < 0 || m && Qn >= o;\n                }\n                function D() {\n                    var J = ir();\n                    if (y(J)) return N(J);\n                    c = le(D, b(J));\n                }\n                function N(J) {\n                    return c = i, P && r ? I(J) : (r = s = i, f);\n                }\n                function dn() {\n                    c !== i && cu(c), v = 0, r = l = s = c = i;\n                }\n                function sn() {\n                    return c === i ? f : N(ir());\n                }\n                function gn() {\n                    var J = ir(), Tn = y(J);\n                    if (r = arguments, s = this, l = J, Tn) {\n                        if (c === i) return E(l);\n                        if (m) return cu(c), c = le(D, t), I(l);\n                    }\n                    return c === i && (c = le(D, t)), f;\n                }\n                return gn.cancel = dn, gn.flush = sn, gn;\n            }\n            var Vl = L(function(n, t) {\n                return Gs(n, 1, t);\n            }), kl = L(function(n, t, e) {\n                return Gs(n, xn(t) || 0, e);\n            });\n            function jl(n) {\n                return Kn(n, dr);\n            }\n            function sr(n, t) {\n                if (typeof n != \"function\" || t != null && typeof t != \"function\") throw new wn($);\n                var e = function() {\n                    var r = arguments, s = t ? t.apply(this, r) : r[0], o = e.cache;\n                    if (o.has(s)) return o.get(s);\n                    var f = n.apply(this, r);\n                    return e.cache = o.set(s, f) || o, f;\n                };\n                return e.cache = new (sr.Cache || Gn), e;\n            }\n            sr.Cache = Gn;\n            function ur(n) {\n                if (typeof n != \"function\") throw new wn($);\n                return function() {\n                    var t = arguments;\n                    switch(t.length){\n                        case 0:\n                            return !n.call(this);\n                        case 1:\n                            return !n.call(this, t[0]);\n                        case 2:\n                            return !n.call(this, t[0], t[1]);\n                        case 3:\n                            return !n.call(this, t[0], t[1], t[2]);\n                    }\n                    return !n.apply(this, t);\n                };\n            }\n            function np(n) {\n                return Qu(2, n);\n            }\n            var tp = qc(function(n, t) {\n                t = t.length == 1 && O(t[0]) ? G(t[0], hn(x())) : G(j(t, 1), hn(x()));\n                var e = t.length;\n                return L(function(r) {\n                    for(var s = -1, o = nn(r.length, e); ++s < o;)r[s] = t[s].call(this, r[s]);\n                    return cn(n, this, r);\n                });\n            }), xi = L(function(n, t) {\n                var e = tt(t, qt(xi));\n                return Kn(n, Hn, i, t, e);\n            }), ta = L(function(n, t) {\n                var e = tt(t, qt(ta));\n                return Kn(n, St, i, t, e);\n            }), ep = Yn(function(n, t) {\n                return Kn(n, Kt, i, i, i, t);\n            });\n            function rp(n, t) {\n                if (typeof n != \"function\") throw new wn($);\n                return t = t === i ? t : R(t), L(n, t);\n            }\n            function ip(n, t) {\n                if (typeof n != \"function\") throw new wn($);\n                return t = t == null ? 0 : Q(R(t), 0), L(function(e) {\n                    var r = e[t], s = ut(e, 0, t);\n                    return r && nt(s, r), cn(n, this, s);\n                });\n            }\n            function sp(n, t, e) {\n                var r = !0, s = !0;\n                if (typeof n != \"function\") throw new wn($);\n                return K(e) && (r = \"leading\" in e ? !!e.leading : r, s = \"trailing\" in e ? !!e.trailing : s), na(n, t, {\n                    leading: r,\n                    maxWait: t,\n                    trailing: s\n                });\n            }\n            function up(n) {\n                return Xu(n, 1);\n            }\n            function ap(n, t) {\n                return xi(oi(t), n);\n            }\n            function op() {\n                if (!arguments.length) return [];\n                var n = arguments[0];\n                return O(n) ? n : [\n                    n\n                ];\n            }\n            function fp(n) {\n                return An(n, xt);\n            }\n            function cp(n, t) {\n                return t = typeof t == \"function\" ? t : i, An(n, xt, t);\n            }\n            function hp(n) {\n                return An(n, Ln | xt);\n            }\n            function lp(n, t) {\n                return t = typeof t == \"function\" ? t : i, An(n, Ln | xt, t);\n            }\n            function pp(n, t) {\n                return t == null || Bs(n, t, V(t));\n            }\n            function bn(n, t) {\n                return n === t || n !== n && t !== t;\n            }\n            var dp = ke(Qr), gp = ke(function(n, t) {\n                return n >= t;\n            }), Pt = Js(function() {\n                return arguments;\n            }()) ? Js : function(n) {\n                return Y(n) && F.call(n, \"callee\") && !Hs.call(n, \"callee\");\n            }, O = p.isArray, vp = gs ? hn(gs) : xc;\n            function an(n) {\n                return n != null && ar(n.length) && !Jn(n);\n            }\n            function Z(n) {\n                return Y(n) && an(n);\n            }\n            function _p(n) {\n                return n === !0 || n === !1 || Y(n) && en(n) == Yt;\n            }\n            var at = Tf || Ni, mp = vs ? hn(vs) : Ec;\n            function wp(n) {\n                return Y(n) && n.nodeType === 1 && !pe(n);\n            }\n            function Pp(n) {\n                if (n == null) return !0;\n                if (an(n) && (O(n) || typeof n == \"string\" || typeof n.splice == \"function\" || at(n) || Bt(n) || Pt(n))) return !n.length;\n                var t = tn(n);\n                if (t == yn || t == Sn) return !n.size;\n                if (he(n)) return !jr(n).length;\n                for(var e in n)if (F.call(n, e)) return !1;\n                return !0;\n            }\n            function Ap(n, t) {\n                return oe(n, t);\n            }\n            function Cp(n, t, e) {\n                e = typeof e == \"function\" ? e : i;\n                var r = e ? e(n, t) : i;\n                return r === i ? oe(n, t, i, e) : !!r;\n            }\n            function Ei(n) {\n                if (!Y(n)) return !1;\n                var t = en(n);\n                return t == we || t == Ga || typeof n.message == \"string\" && typeof n.name == \"string\" && !pe(n);\n            }\n            function Ip(n) {\n                return typeof n == \"number\" && $s(n);\n            }\n            function Jn(n) {\n                if (!K(n)) return !1;\n                var t = en(n);\n                return t == Pe || t == Gi || t == Ba || t == Ka;\n            }\n            function ea(n) {\n                return typeof n == \"number\" && n == R(n);\n            }\n            function ar(n) {\n                return typeof n == \"number\" && n > -1 && n % 1 == 0 && n <= kn;\n            }\n            function K(n) {\n                var t = typeof n;\n                return n != null && (t == \"object\" || t == \"function\");\n            }\n            function Y(n) {\n                return n != null && typeof n == \"object\";\n            }\n            var ra = _s ? hn(_s) : Sc;\n            function xp(n, t) {\n                return n === t || kr(n, t, gi(t));\n            }\n            function Ep(n, t, e) {\n                return e = typeof e == \"function\" ? e : i, kr(n, t, gi(t), e);\n            }\n            function yp(n) {\n                return ia(n) && n != +n;\n            }\n            function Sp(n) {\n                if (ch(n)) throw new S(T);\n                return Xs(n);\n            }\n            function Op(n) {\n                return n === null;\n            }\n            function Rp(n) {\n                return n == null;\n            }\n            function ia(n) {\n                return typeof n == \"number\" || Y(n) && en(n) == Jt;\n            }\n            function pe(n) {\n                if (!Y(n) || en(n) != qn) return !1;\n                var t = He(n);\n                if (t === null) return !0;\n                var e = F.call(t, \"constructor\") && t.constructor;\n                return typeof e == \"function\" && e instanceof e && be.call(e) == Ef;\n            }\n            var yi = ms ? hn(ms) : Oc;\n            function bp(n) {\n                return ea(n) && n >= -kn && n <= kn;\n            }\n            var sa = ws ? hn(ws) : Rc;\n            function or(n) {\n                return typeof n == \"string\" || !O(n) && Y(n) && en(n) == Qt;\n            }\n            function pn(n) {\n                return typeof n == \"symbol\" || Y(n) && en(n) == Ae;\n            }\n            var Bt = Ps ? hn(Ps) : bc;\n            function Tp(n) {\n                return n === i;\n            }\n            function Lp(n) {\n                return Y(n) && tn(n) == Vt;\n            }\n            function Dp(n) {\n                return Y(n) && en(n) == Za;\n            }\n            var Hp = ke(ni), Np = ke(function(n, t) {\n                return n <= t;\n            });\n            function ua(n) {\n                if (!n) return [];\n                if (an(n)) return or(n) ? On(n) : un(n);\n                if (ne && n[ne]) return pf(n[ne]());\n                var t = tn(n), e = t == yn ? qr : t == Sn ? Se : Gt;\n                return e(n);\n            }\n            function Xn(n) {\n                if (!n) return n === 0 ? n : 0;\n                if (n = xn(n), n === ht || n === -ht) {\n                    var t = n < 0 ? -1 : 1;\n                    return t * Wa;\n                }\n                return n === n ? n : 0;\n            }\n            function R(n) {\n                var t = Xn(n), e = t % 1;\n                return t === t ? e ? t - e : t : 0;\n            }\n            function aa(n) {\n                return n ? vt(R(n), 0, Nn) : 0;\n            }\n            function xn(n) {\n                if (typeof n == \"number\") return n;\n                if (pn(n)) return _e;\n                if (K(n)) {\n                    var t = typeof n.valueOf == \"function\" ? n.valueOf() : n;\n                    n = K(t) ? t + \"\" : t;\n                }\n                if (typeof n != \"string\") return n === 0 ? n : +n;\n                n = ys(n);\n                var e = go.test(n);\n                return e || _o.test(n) ? Xo(n.slice(2), e ? 2 : 8) : po.test(n) ? _e : +n;\n            }\n            function oa(n) {\n                return Un(n, on(n));\n            }\n            function $p(n) {\n                return n ? vt(R(n), -kn, kn) : n === 0 ? n : 0;\n            }\n            function W(n) {\n                return n == null ? \"\" : ln(n);\n            }\n            var Up = Ft(function(n, t) {\n                if (he(t) || an(t)) {\n                    Un(t, V(t), n);\n                    return;\n                }\n                for(var e in t)F.call(t, e) && se(n, e, t[e]);\n            }), fa = Ft(function(n, t) {\n                Un(t, on(t), n);\n            }), fr = Ft(function(n, t, e, r) {\n                Un(t, on(t), n, r);\n            }), Wp = Ft(function(n, t, e, r) {\n                Un(t, V(t), n, r);\n            }), Fp = Yn(Zr);\n            function Mp(n, t) {\n                var e = Wt(n);\n                return t == null ? e : qs(e, t);\n            }\n            var qp = L(function(n, t) {\n                n = M(n);\n                var e = -1, r = t.length, s = r > 2 ? t[2] : i;\n                for(s && rn(t[0], t[1], s) && (r = 1); ++e < r;)for(var o = t[e], f = on(o), c = -1, l = f.length; ++c < l;){\n                    var v = f[c], _ = n[v];\n                    (_ === i || bn(_, Nt[v]) && !F.call(n, v)) && (n[v] = o[v]);\n                }\n                return n;\n            }), Bp = L(function(n) {\n                return n.push(i, yu), cn(ca, i, n);\n            });\n            function Gp(n, t) {\n                return Cs(n, x(t, 3), $n);\n            }\n            function zp(n, t) {\n                return Cs(n, x(t, 3), Xr);\n            }\n            function Kp(n, t) {\n                return n == null ? n : Jr(n, x(t, 3), on);\n            }\n            function Yp(n, t) {\n                return n == null ? n : Ys(n, x(t, 3), on);\n            }\n            function Zp(n, t) {\n                return n && $n(n, x(t, 3));\n            }\n            function Jp(n, t) {\n                return n && Xr(n, x(t, 3));\n            }\n            function Xp(n) {\n                return n == null ? [] : ze(n, V(n));\n            }\n            function Qp(n) {\n                return n == null ? [] : ze(n, on(n));\n            }\n            function Si(n, t, e) {\n                var r = n == null ? i : _t(n, t);\n                return r === i ? e : r;\n            }\n            function Vp(n, t) {\n                return n != null && Ru(n, t, Pc);\n            }\n            function Oi(n, t) {\n                return n != null && Ru(n, t, Ac);\n            }\n            var kp = Au(function(n, t, e) {\n                t != null && typeof t.toString != \"function\" && (t = Te.call(t)), n[t] = e;\n            }, bi(fn)), jp = Au(function(n, t, e) {\n                t != null && typeof t.toString != \"function\" && (t = Te.call(t)), F.call(n, t) ? n[t].push(e) : n[t] = [\n                    e\n                ];\n            }, x), nd = L(ae);\n            function V(n) {\n                return an(n) ? Fs(n) : jr(n);\n            }\n            function on(n) {\n                return an(n) ? Fs(n, !0) : Tc(n);\n            }\n            function td(n, t) {\n                var e = {};\n                return t = x(t, 3), $n(n, function(r, s, o) {\n                    zn(e, t(r, s, o), r);\n                }), e;\n            }\n            function ed(n, t) {\n                var e = {};\n                return t = x(t, 3), $n(n, function(r, s, o) {\n                    zn(e, s, t(r, s, o));\n                }), e;\n            }\n            var rd = Ft(function(n, t, e) {\n                Ke(n, t, e);\n            }), ca = Ft(function(n, t, e, r) {\n                Ke(n, t, e, r);\n            }), id = Yn(function(n, t) {\n                var e = {};\n                if (n == null) return e;\n                var r = !1;\n                t = G(t, function(o) {\n                    return o = st(o, n), r || (r = o.length > 1), o;\n                }), Un(n, pi(n), e), r && (e = An(e, Ln | Fn | xt, kc));\n                for(var s = t.length; s--;)si(e, t[s]);\n                return e;\n            });\n            function sd(n, t) {\n                return ha(n, ur(x(t)));\n            }\n            var ud = Yn(function(n, t) {\n                return n == null ? {} : Dc(n, t);\n            });\n            function ha(n, t) {\n                if (n == null) return {};\n                var e = G(pi(n), function(r) {\n                    return [\n                        r\n                    ];\n                });\n                return t = x(t), eu(n, e, function(r, s) {\n                    return t(r, s[0]);\n                });\n            }\n            function ad(n, t, e) {\n                t = st(t, n);\n                var r = -1, s = t.length;\n                for(s || (s = 1, n = i); ++r < s;){\n                    var o = n == null ? i : n[Wn(t[r])];\n                    o === i && (r = s, o = e), n = Jn(o) ? o.call(n) : o;\n                }\n                return n;\n            }\n            function od(n, t, e) {\n                return n == null ? n : fe(n, t, e);\n            }\n            function fd(n, t, e, r) {\n                return r = typeof r == \"function\" ? r : i, n == null ? n : fe(n, t, e, r);\n            }\n            var la = xu(V), pa = xu(on);\n            function cd(n, t, e) {\n                var r = O(n), s = r || at(n) || Bt(n);\n                if (t = x(t, 4), e == null) {\n                    var o = n && n.constructor;\n                    s ? e = r ? new o : [] : K(n) ? e = Jn(o) ? Wt(He(n)) : {} : e = {};\n                }\n                return (s ? mn : $n)(n, function(f, c, l) {\n                    return t(e, f, c, l);\n                }), e;\n            }\n            function hd(n, t) {\n                return n == null ? !0 : si(n, t);\n            }\n            function ld(n, t, e) {\n                return n == null ? n : au(n, t, oi(e));\n            }\n            function pd(n, t, e, r) {\n                return r = typeof r == \"function\" ? r : i, n == null ? n : au(n, t, oi(e), r);\n            }\n            function Gt(n) {\n                return n == null ? [] : Mr(n, V(n));\n            }\n            function dd(n) {\n                return n == null ? [] : Mr(n, on(n));\n            }\n            function gd(n, t, e) {\n                return e === i && (e = t, t = i), e !== i && (e = xn(e), e = e === e ? e : 0), t !== i && (t = xn(t), t = t === t ? t : 0), vt(xn(n), t, e);\n            }\n            function vd(n, t, e) {\n                return t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), n = xn(n), Cc(n, t, e);\n            }\n            function _d(n, t, e) {\n                if (e && typeof e != \"boolean\" && rn(n, t, e) && (t = e = i), e === i && (typeof t == \"boolean\" ? (e = t, t = i) : typeof n == \"boolean\" && (e = n, n = i)), n === i && t === i ? (n = 0, t = 1) : (n = Xn(n), t === i ? (t = n, n = 0) : t = Xn(t)), n > t) {\n                    var r = n;\n                    n = t, t = r;\n                }\n                if (e || n % 1 || t % 1) {\n                    var s = Us();\n                    return nn(n + s * (t - n + Jo(\"1e-\" + ((s + \"\").length - 1))), t);\n                }\n                return ei(n, t);\n            }\n            var md = Mt(function(n, t, e) {\n                return t = t.toLowerCase(), n + (e ? da(t) : t);\n            });\n            function da(n) {\n                return Ri(W(n).toLowerCase());\n            }\n            function ga(n) {\n                return n = W(n), n && n.replace(wo, of).replace(Wo, \"\");\n            }\n            function wd(n, t, e) {\n                n = W(n), t = ln(t);\n                var r = n.length;\n                e = e === i ? r : vt(R(e), 0, r);\n                var s = e;\n                return e -= t.length, e >= 0 && n.slice(e, s) == t;\n            }\n            function Pd(n) {\n                return n = W(n), n && ka.test(n) ? n.replace(Yi, ff) : n;\n            }\n            function Ad(n) {\n                return n = W(n), n && io.test(n) ? n.replace(xr, \"\\\\$&\") : n;\n            }\n            var Cd = Mt(function(n, t, e) {\n                return n + (e ? \"-\" : \"\") + t.toLowerCase();\n            }), Id = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + t.toLowerCase();\n            }), xd = mu(\"toLowerCase\");\n            function Ed(n, t, e) {\n                n = W(n), t = R(t);\n                var r = t ? Dt(n) : 0;\n                if (!t || r >= t) return n;\n                var s = (t - r) / 2;\n                return Ve(We(s), e) + n + Ve(Ue(s), e);\n            }\n            function yd(n, t, e) {\n                n = W(n), t = R(t);\n                var r = t ? Dt(n) : 0;\n                return t && r < t ? n + Ve(t - r, e) : n;\n            }\n            function Sd(n, t, e) {\n                n = W(n), t = R(t);\n                var r = t ? Dt(n) : 0;\n                return t && r < t ? Ve(t - r, e) + n : n;\n            }\n            function Od(n, t, e) {\n                return e || t == null ? t = 0 : t && (t = +t), Nf(W(n).replace(Er, \"\"), t || 0);\n            }\n            function Rd(n, t, e) {\n                return (e ? rn(n, t, e) : t === i) ? t = 1 : t = R(t), ri(W(n), t);\n            }\n            function bd() {\n                var n = arguments, t = W(n[0]);\n                return n.length < 3 ? t : t.replace(n[1], n[2]);\n            }\n            var Td = Mt(function(n, t, e) {\n                return n + (e ? \"_\" : \"\") + t.toLowerCase();\n            });\n            function Ld(n, t, e) {\n                return e && typeof e != \"number\" && rn(n, t, e) && (t = e = i), e = e === i ? Nn : e >>> 0, e ? (n = W(n), n && (typeof t == \"string\" || t != null && !yi(t)) && (t = ln(t), !t && Lt(n)) ? ut(On(n), 0, e) : n.split(t, e)) : [];\n            }\n            var Dd = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + Ri(t);\n            });\n            function Hd(n, t, e) {\n                return n = W(n), e = e == null ? 0 : vt(R(e), 0, n.length), t = ln(t), n.slice(e, e + t.length) == t;\n            }\n            function Nd(n, t, e) {\n                var r = a.templateSettings;\n                e && rn(n, t, e) && (t = i), n = W(n), t = fr({}, t, r, Eu);\n                var s = fr({}, t.imports, r.imports, Eu), o = V(s), f = Mr(s, o), c, l, v = 0, _ = t.interpolate || Ce, m = \"__p += '\", P = Br((t.escape || Ce).source + \"|\" + _.source + \"|\" + (_ === Zi ? lo : Ce).source + \"|\" + (t.evaluate || Ce).source + \"|$\", \"g\"), I = \"//# sourceURL=\" + (F.call(t, \"sourceURL\") ? (t.sourceURL + \"\").replace(/\\s/g, \" \") : \"lodash.templateSources[\" + ++Go + \"]\") + \"\\n\";\n                n.replace(P, function(y, D, N, dn, sn, gn) {\n                    return N || (N = dn), m += n.slice(v, gn).replace(Po, cf), D && (c = !0, m += \"' +\\n__e(\" + D + \") +\\n'\"), sn && (l = !0, m += \"';\\n\" + sn + \";\\n__p += '\"), N && (m += \"' +\\n((__t = (\" + N + \")) == null ? '' : __t) +\\n'\"), v = gn + y.length, y;\n                }), m += \"';\\n\";\n                var E = F.call(t, \"variable\") && t.variable;\n                if (!E) m = \"with (obj) {\\n\" + m + \"\\n}\\n\";\n                else if (co.test(E)) throw new S(En);\n                m = (l ? m.replace(Ja, \"\") : m).replace(Xa, \"$1\").replace(Qa, \"$1;\"), m = \"function(\" + (E || \"obj\") + \") {\\n\" + (E ? \"\" : \"obj || (obj = {});\\n\") + \"var __t, __p = ''\" + (c ? \", __e = _.escape\" : \"\") + (l ? \", __j = Array.prototype.join;\\nfunction print() { __p += __j.call(arguments, '') }\\n\" : \";\\n\") + m + \"return __p\\n}\";\n                var b = _a(function() {\n                    return U(o, I + \"return \" + m).apply(i, f);\n                });\n                if (b.source = m, Ei(b)) throw b;\n                return b;\n            }\n            function $d(n) {\n                return W(n).toLowerCase();\n            }\n            function Ud(n) {\n                return W(n).toUpperCase();\n            }\n            function Wd(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return ys(n);\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = On(t), o = Ss(r, s), f = Os(r, s) + 1;\n                return ut(r, o, f).join(\"\");\n            }\n            function Fd(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return n.slice(0, bs(n) + 1);\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = Os(r, On(t)) + 1;\n                return ut(r, 0, s).join(\"\");\n            }\n            function Md(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return n.replace(Er, \"\");\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = Ss(r, On(t));\n                return ut(r, s).join(\"\");\n            }\n            function qd(n, t) {\n                var e = La, r = Da;\n                if (K(t)) {\n                    var s = \"separator\" in t ? t.separator : s;\n                    e = \"length\" in t ? R(t.length) : e, r = \"omission\" in t ? ln(t.omission) : r;\n                }\n                n = W(n);\n                var o = n.length;\n                if (Lt(n)) {\n                    var f = On(n);\n                    o = f.length;\n                }\n                if (e >= o) return n;\n                var c = e - Dt(r);\n                if (c < 1) return r;\n                var l = f ? ut(f, 0, c).join(\"\") : n.slice(0, c);\n                if (s === i) return l + r;\n                if (f && (c += l.length - c), yi(s)) {\n                    if (n.slice(c).search(s)) {\n                        var v, _ = l;\n                        for(s.global || (s = Br(s.source, W(Ji.exec(s)) + \"g\")), s.lastIndex = 0; v = s.exec(_);)var m = v.index;\n                        l = l.slice(0, m === i ? c : m);\n                    }\n                } else if (n.indexOf(ln(s), c) != c) {\n                    var P = l.lastIndexOf(s);\n                    P > -1 && (l = l.slice(0, P));\n                }\n                return l + r;\n            }\n            function Bd(n) {\n                return n = W(n), n && Va.test(n) ? n.replace(Ki, _f) : n;\n            }\n            var Gd = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + t.toUpperCase();\n            }), Ri = mu(\"toUpperCase\");\n            function va(n, t, e) {\n                return n = W(n), t = e ? i : t, t === i ? lf(n) ? Pf(n) : ef(n) : n.match(t) || [];\n            }\n            var _a = L(function(n, t) {\n                try {\n                    return cn(n, i, t);\n                } catch (e) {\n                    return Ei(e) ? e : new S(e);\n                }\n            }), zd = Yn(function(n, t) {\n                return mn(t, function(e) {\n                    e = Wn(e), zn(n, e, Ii(n[e], n));\n                }), n;\n            });\n            function Kd(n) {\n                var t = n == null ? 0 : n.length, e = x();\n                return n = t ? G(n, function(r) {\n                    if (typeof r[1] != \"function\") throw new wn($);\n                    return [\n                        e(r[0]),\n                        r[1]\n                    ];\n                }) : [], L(function(r) {\n                    for(var s = -1; ++s < t;){\n                        var o = n[s];\n                        if (cn(o[0], this, r)) return cn(o[1], this, r);\n                    }\n                });\n            }\n            function Yd(n) {\n                return _c(An(n, Ln));\n            }\n            function bi(n) {\n                return function() {\n                    return n;\n                };\n            }\n            function Zd(n, t) {\n                return n == null || n !== n ? t : n;\n            }\n            var Jd = Pu(), Xd = Pu(!0);\n            function fn(n) {\n                return n;\n            }\n            function Ti(n) {\n                return Qs(typeof n == \"function\" ? n : An(n, Ln));\n            }\n            function Qd(n) {\n                return ks(An(n, Ln));\n            }\n            function Vd(n, t) {\n                return js(n, An(t, Ln));\n            }\n            var kd = L(function(n, t) {\n                return function(e) {\n                    return ae(e, n, t);\n                };\n            }), jd = L(function(n, t) {\n                return function(e) {\n                    return ae(n, e, t);\n                };\n            });\n            function Li(n, t, e) {\n                var r = V(t), s = ze(t, r);\n                e == null && !(K(t) && (s.length || !r.length)) && (e = t, t = n, n = this, s = ze(t, V(t)));\n                var o = !(K(e) && \"chain\" in e) || !!e.chain, f = Jn(n);\n                return mn(s, function(c) {\n                    var l = t[c];\n                    n[c] = l, f && (n.prototype[c] = function() {\n                        var v = this.__chain__;\n                        if (o || v) {\n                            var _ = n(this.__wrapped__), m = _.__actions__ = un(this.__actions__);\n                            return m.push({\n                                func: l,\n                                args: arguments,\n                                thisArg: n\n                            }), _.__chain__ = v, _;\n                        }\n                        return l.apply(n, nt([\n                            this.value()\n                        ], arguments));\n                    });\n                }), n;\n            }\n            function ng() {\n                return k._ === this && (k._ = yf), this;\n            }\n            function Di() {}\n            function tg(n) {\n                return n = R(n), L(function(t) {\n                    return nu(t, n);\n                });\n            }\n            var eg = ci(G), rg = ci(As), ig = ci(Nr);\n            function ma(n) {\n                return _i(n) ? $r(Wn(n)) : Hc(n);\n            }\n            function sg(n) {\n                return function(t) {\n                    return n == null ? i : _t(n, t);\n                };\n            }\n            var ug = Cu(), ag = Cu(!0);\n            function Hi() {\n                return [];\n            }\n            function Ni() {\n                return !1;\n            }\n            function og() {\n                return {};\n            }\n            function fg() {\n                return \"\";\n            }\n            function cg() {\n                return !0;\n            }\n            function hg(n, t) {\n                if (n = R(n), n < 1 || n > kn) return [];\n                var e = Nn, r = nn(n, Nn);\n                t = x(t), n -= Nn;\n                for(var s = Fr(r, t); ++e < n;)t(e);\n                return s;\n            }\n            function lg(n) {\n                return O(n) ? G(n, Wn) : pn(n) ? [\n                    n\n                ] : un(Wu(W(n)));\n            }\n            function pg(n) {\n                var t = ++xf;\n                return W(n) + t;\n            }\n            var dg = Qe(function(n, t) {\n                return n + t;\n            }, 0), gg = hi(\"ceil\"), vg = Qe(function(n, t) {\n                return n / t;\n            }, 1), _g = hi(\"floor\");\n            function mg(n) {\n                return n && n.length ? Ge(n, fn, Qr) : i;\n            }\n            function wg(n, t) {\n                return n && n.length ? Ge(n, x(t, 2), Qr) : i;\n            }\n            function Pg(n) {\n                return xs(n, fn);\n            }\n            function Ag(n, t) {\n                return xs(n, x(t, 2));\n            }\n            function Cg(n) {\n                return n && n.length ? Ge(n, fn, ni) : i;\n            }\n            function Ig(n, t) {\n                return n && n.length ? Ge(n, x(t, 2), ni) : i;\n            }\n            var xg = Qe(function(n, t) {\n                return n * t;\n            }, 1), Eg = hi(\"round\"), yg = Qe(function(n, t) {\n                return n - t;\n            }, 0);\n            function Sg(n) {\n                return n && n.length ? Wr(n, fn) : 0;\n            }\n            function Og(n, t) {\n                return n && n.length ? Wr(n, x(t, 2)) : 0;\n            }\n            return a.after = Ql, a.ary = Xu, a.assign = Up, a.assignIn = fa, a.assignInWith = fr, a.assignWith = Wp, a.at = Fp, a.before = Qu, a.bind = Ii, a.bindAll = zd, a.bindKey = Vu, a.castArray = op, a.chain = Yu, a.chunk = _h, a.compact = mh, a.concat = wh, a.cond = Kd, a.conforms = Yd, a.constant = bi, a.countBy = Sl, a.create = Mp, a.curry = ku, a.curryRight = ju, a.debounce = na, a.defaults = qp, a.defaultsDeep = Bp, a.defer = Vl, a.delay = kl, a.difference = Ph, a.differenceBy = Ah, a.differenceWith = Ch, a.drop = Ih, a.dropRight = xh, a.dropRightWhile = Eh, a.dropWhile = yh, a.fill = Sh, a.filter = Rl, a.flatMap = Ll, a.flatMapDeep = Dl, a.flatMapDepth = Hl, a.flatten = Bu, a.flattenDeep = Oh, a.flattenDepth = Rh, a.flip = jl, a.flow = Jd, a.flowRight = Xd, a.fromPairs = bh, a.functions = Xp, a.functionsIn = Qp, a.groupBy = Nl, a.initial = Lh, a.intersection = Dh, a.intersectionBy = Hh, a.intersectionWith = Nh, a.invert = kp, a.invertBy = jp, a.invokeMap = Ul, a.iteratee = Ti, a.keyBy = Wl, a.keys = V, a.keysIn = on, a.map = rr, a.mapKeys = td, a.mapValues = ed, a.matches = Qd, a.matchesProperty = Vd, a.memoize = sr, a.merge = rd, a.mergeWith = ca, a.method = kd, a.methodOf = jd, a.mixin = Li, a.negate = ur, a.nthArg = tg, a.omit = id, a.omitBy = sd, a.once = np, a.orderBy = Fl, a.over = eg, a.overArgs = tp, a.overEvery = rg, a.overSome = ig, a.partial = xi, a.partialRight = ta, a.partition = Ml, a.pick = ud, a.pickBy = ha, a.property = ma, a.propertyOf = sg, a.pull = Fh, a.pullAll = zu, a.pullAllBy = Mh, a.pullAllWith = qh, a.pullAt = Bh, a.range = ug, a.rangeRight = ag, a.rearg = ep, a.reject = Gl, a.remove = Gh, a.rest = rp, a.reverse = Ai, a.sampleSize = Kl, a.set = od, a.setWith = fd, a.shuffle = Yl, a.slice = zh, a.sortBy = Xl, a.sortedUniq = Vh, a.sortedUniqBy = kh, a.split = Ld, a.spread = ip, a.tail = jh, a.take = nl, a.takeRight = tl, a.takeRightWhile = el, a.takeWhile = rl, a.tap = ml, a.throttle = sp, a.thru = er, a.toArray = ua, a.toPairs = la, a.toPairsIn = pa, a.toPath = lg, a.toPlainObject = oa, a.transform = cd, a.unary = up, a.union = il, a.unionBy = sl, a.unionWith = ul, a.uniq = al, a.uniqBy = ol, a.uniqWith = fl, a.unset = hd, a.unzip = Ci, a.unzipWith = Ku, a.update = ld, a.updateWith = pd, a.values = Gt, a.valuesIn = dd, a.without = cl, a.words = va, a.wrap = ap, a.xor = hl, a.xorBy = ll, a.xorWith = pl, a.zip = dl, a.zipObject = gl, a.zipObjectDeep = vl, a.zipWith = _l, a.entries = la, a.entriesIn = pa, a.extend = fa, a.extendWith = fr, Li(a, a), a.add = dg, a.attempt = _a, a.camelCase = md, a.capitalize = da, a.ceil = gg, a.clamp = gd, a.clone = fp, a.cloneDeep = hp, a.cloneDeepWith = lp, a.cloneWith = cp, a.conformsTo = pp, a.deburr = ga, a.defaultTo = Zd, a.divide = vg, a.endsWith = wd, a.eq = bn, a.escape = Pd, a.escapeRegExp = Ad, a.every = Ol, a.find = bl, a.findIndex = Mu, a.findKey = Gp, a.findLast = Tl, a.findLastIndex = qu, a.findLastKey = zp, a.floor = _g, a.forEach = Zu, a.forEachRight = Ju, a.forIn = Kp, a.forInRight = Yp, a.forOwn = Zp, a.forOwnRight = Jp, a.get = Si, a.gt = dp, a.gte = gp, a.has = Vp, a.hasIn = Oi, a.head = Gu, a.identity = fn, a.includes = $l, a.indexOf = Th, a.inRange = vd, a.invoke = nd, a.isArguments = Pt, a.isArray = O, a.isArrayBuffer = vp, a.isArrayLike = an, a.isArrayLikeObject = Z, a.isBoolean = _p, a.isBuffer = at, a.isDate = mp, a.isElement = wp, a.isEmpty = Pp, a.isEqual = Ap, a.isEqualWith = Cp, a.isError = Ei, a.isFinite = Ip, a.isFunction = Jn, a.isInteger = ea, a.isLength = ar, a.isMap = ra, a.isMatch = xp, a.isMatchWith = Ep, a.isNaN = yp, a.isNative = Sp, a.isNil = Rp, a.isNull = Op, a.isNumber = ia, a.isObject = K, a.isObjectLike = Y, a.isPlainObject = pe, a.isRegExp = yi, a.isSafeInteger = bp, a.isSet = sa, a.isString = or, a.isSymbol = pn, a.isTypedArray = Bt, a.isUndefined = Tp, a.isWeakMap = Lp, a.isWeakSet = Dp, a.join = $h, a.kebabCase = Cd, a.last = In, a.lastIndexOf = Uh, a.lowerCase = Id, a.lowerFirst = xd, a.lt = Hp, a.lte = Np, a.max = mg, a.maxBy = wg, a.mean = Pg, a.meanBy = Ag, a.min = Cg, a.minBy = Ig, a.stubArray = Hi, a.stubFalse = Ni, a.stubObject = og, a.stubString = fg, a.stubTrue = cg, a.multiply = xg, a.nth = Wh, a.noConflict = ng, a.noop = Di, a.now = ir, a.pad = Ed, a.padEnd = yd, a.padStart = Sd, a.parseInt = Od, a.random = _d, a.reduce = ql, a.reduceRight = Bl, a.repeat = Rd, a.replace = bd, a.result = ad, a.round = Eg, a.runInContext = h, a.sample = zl, a.size = Zl, a.snakeCase = Td, a.some = Jl, a.sortedIndex = Kh, a.sortedIndexBy = Yh, a.sortedIndexOf = Zh, a.sortedLastIndex = Jh, a.sortedLastIndexBy = Xh, a.sortedLastIndexOf = Qh, a.startCase = Dd, a.startsWith = Hd, a.subtract = yg, a.sum = Sg, a.sumBy = Og, a.template = Nd, a.times = hg, a.toFinite = Xn, a.toInteger = R, a.toLength = aa, a.toLower = $d, a.toNumber = xn, a.toSafeInteger = $p, a.toString = W, a.toUpper = Ud, a.trim = Wd, a.trimEnd = Fd, a.trimStart = Md, a.truncate = qd, a.unescape = Bd, a.uniqueId = pg, a.upperCase = Gd, a.upperFirst = Ri, a.each = Zu, a.eachRight = Ju, a.first = Gu, Li(a, function() {\n                var n = {};\n                return $n(a, function(t, e) {\n                    F.call(a.prototype, e) || (n[e] = t);\n                }), n;\n            }(), {\n                chain: !1\n            }), a.VERSION = d, mn([\n                \"bind\",\n                \"bindKey\",\n                \"curry\",\n                \"curryRight\",\n                \"partial\",\n                \"partialRight\"\n            ], function(n) {\n                a[n].placeholder = a;\n            }), mn([\n                \"drop\",\n                \"take\"\n            ], function(n, t) {\n                H.prototype[n] = function(e) {\n                    e = e === i ? 1 : Q(R(e), 0);\n                    var r = this.__filtered__ && !t ? new H(this) : this.clone();\n                    return r.__filtered__ ? r.__takeCount__ = nn(e, r.__takeCount__) : r.__views__.push({\n                        size: nn(e, Nn),\n                        type: n + (r.__dir__ < 0 ? \"Right\" : \"\")\n                    }), r;\n                }, H.prototype[n + \"Right\"] = function(e) {\n                    return this.reverse()[n](e).reverse();\n                };\n            }), mn([\n                \"filter\",\n                \"map\",\n                \"takeWhile\"\n            ], function(n, t) {\n                var e = t + 1, r = e == Bi || e == Ua;\n                H.prototype[n] = function(s) {\n                    var o = this.clone();\n                    return o.__iteratees__.push({\n                        iteratee: x(s, 3),\n                        type: e\n                    }), o.__filtered__ = o.__filtered__ || r, o;\n                };\n            }), mn([\n                \"head\",\n                \"last\"\n            ], function(n, t) {\n                var e = \"take\" + (t ? \"Right\" : \"\");\n                H.prototype[n] = function() {\n                    return this[e](1).value()[0];\n                };\n            }), mn([\n                \"initial\",\n                \"tail\"\n            ], function(n, t) {\n                var e = \"drop\" + (t ? \"\" : \"Right\");\n                H.prototype[n] = function() {\n                    return this.__filtered__ ? new H(this) : this[e](1);\n                };\n            }), H.prototype.compact = function() {\n                return this.filter(fn);\n            }, H.prototype.find = function(n) {\n                return this.filter(n).head();\n            }, H.prototype.findLast = function(n) {\n                return this.reverse().find(n);\n            }, H.prototype.invokeMap = L(function(n, t) {\n                return typeof n == \"function\" ? new H(this) : this.map(function(e) {\n                    return ae(e, n, t);\n                });\n            }), H.prototype.reject = function(n) {\n                return this.filter(ur(x(n)));\n            }, H.prototype.slice = function(n, t) {\n                n = R(n);\n                var e = this;\n                return e.__filtered__ && (n > 0 || t < 0) ? new H(e) : (n < 0 ? e = e.takeRight(-n) : n && (e = e.drop(n)), t !== i && (t = R(t), e = t < 0 ? e.dropRight(-t) : e.take(t - n)), e);\n            }, H.prototype.takeRightWhile = function(n) {\n                return this.reverse().takeWhile(n).reverse();\n            }, H.prototype.toArray = function() {\n                return this.take(Nn);\n            }, $n(H.prototype, function(n, t) {\n                var e = /^(?:filter|find|map|reject)|While$/.test(t), r = /^(?:head|last)$/.test(t), s = a[r ? \"take\" + (t == \"last\" ? \"Right\" : \"\") : t], o = r || /^find/.test(t);\n                s && (a.prototype[t] = function() {\n                    var f = this.__wrapped__, c = r ? [\n                        1\n                    ] : arguments, l = f instanceof H, v = c[0], _ = l || O(f), m = function(D) {\n                        var N = s.apply(a, nt([\n                            D\n                        ], c));\n                        return r && P ? N[0] : N;\n                    };\n                    _ && e && typeof v == \"function\" && v.length != 1 && (l = _ = !1);\n                    var P = this.__chain__, I = !!this.__actions__.length, E = o && !P, b = l && !I;\n                    if (!o && _) {\n                        f = b ? f : new H(this);\n                        var y = n.apply(f, c);\n                        return y.__actions__.push({\n                            func: er,\n                            args: [\n                                m\n                            ],\n                            thisArg: i\n                        }), new Pn(y, P);\n                    }\n                    return E && b ? n.apply(this, c) : (y = this.thru(m), E ? r ? y.value()[0] : y.value() : y);\n                });\n            }), mn([\n                \"pop\",\n                \"push\",\n                \"shift\",\n                \"sort\",\n                \"splice\",\n                \"unshift\"\n            ], function(n) {\n                var t = Oe[n], e = /^(?:push|sort|unshift)$/.test(n) ? \"tap\" : \"thru\", r = /^(?:pop|shift)$/.test(n);\n                a.prototype[n] = function() {\n                    var s = arguments;\n                    if (r && !this.__chain__) {\n                        var o = this.value();\n                        return t.apply(O(o) ? o : [], s);\n                    }\n                    return this[e](function(f) {\n                        return t.apply(O(f) ? f : [], s);\n                    });\n                };\n            }), $n(H.prototype, function(n, t) {\n                var e = a[t];\n                if (e) {\n                    var r = e.name + \"\";\n                    F.call(Ut, r) || (Ut[r] = []), Ut[r].push({\n                        name: t,\n                        func: e\n                    });\n                }\n            }), Ut[Xe(i, ct).name] = [\n                {\n                    name: \"wrapper\",\n                    func: i\n                }\n            ], H.prototype.clone = Bf, H.prototype.reverse = Gf, H.prototype.value = zf, a.prototype.at = wl, a.prototype.chain = Pl, a.prototype.commit = Al, a.prototype.next = Cl, a.prototype.plant = xl, a.prototype.reverse = El, a.prototype.toJSON = a.prototype.valueOf = a.prototype.value = yl, a.prototype.first = a.prototype.head, ne && (a.prototype[ne] = Il), a;\n        }, Ht = Af();\n        lt ? ((lt.exports = Ht)._ = Ht, Tr._ = Ht) : k._ = Ht;\n    }).call(ge);\n})(Ui, Ui.exports);\nvar qg = Object.defineProperty, Bg = Object.defineProperties, Gg = Object.getOwnPropertyDescriptors, Ea = Object.getOwnPropertySymbols, zg = Object.prototype.hasOwnProperty, Kg = Object.prototype.propertyIsEnumerable, ya = (C, u, i)=>u in C ? qg(C, u, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : C[u] = i, cr = (C, u)=>{\n    for(var i in u || (u = {}))zg.call(u, i) && ya(C, i, u[i]);\n    if (Ea) for (var i of Ea(u))Kg.call(u, i) && ya(C, i, u[i]);\n    return C;\n}, Yg = (C, u)=>Bg(C, Gg(u));\nfunction ft(C, u, i) {\n    var d;\n    const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.parseChainId)(C);\n    return ((d = u.rpcMap) == null ? void 0 : d[w.reference]) || \"\".concat(Mg, \"?chainId=\").concat(w.namespace, \":\").concat(w.reference, \"&projectId=\").concat(i);\n}\nfunction Ct(C) {\n    return C.includes(\":\") ? C.split(\":\")[1] : C;\n}\n_c = Ct;\nfunction Sa(C) {\n    return C.map((u)=>\"\".concat(u.split(\":\")[0], \":\").concat(u.split(\":\")[1]));\n}\n_c1 = Sa;\nfunction Zg(C, u) {\n    const i = Object.keys(u.namespaces).filter((w)=>w.includes(C));\n    if (!i.length) return [];\n    const d = [];\n    return i.forEach((w)=>{\n        const T = u.namespaces[w].accounts;\n        d.push(...T);\n    }), d;\n}\n_c2 = Zg;\nfunction Jg() {\n    let C = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, u = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const i = Oa(C), d = Oa(u);\n    return Ui.exports.merge(i, d);\n}\n_c3 = Jg;\nfunction Oa(C) {\n    var u, i, d, w;\n    const T = {};\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.isValidObject)(C)) return T;\n    for (const [$, En] of Object.entries(C)){\n        const zt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.isCaipNamespace)($) ? [\n            $\n        ] : En.chains, pr = En.methods || [], It = En.events || [], Ln = En.rpcMap || {}, Fn = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.parseNamespaceKey)($);\n        T[Fn] = Yg(cr(cr({}, T[Fn]), En), {\n            chains: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.mergeArrays)(zt, (u = T[Fn]) == null ? void 0 : u.chains),\n            methods: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.mergeArrays)(pr, (i = T[Fn]) == null ? void 0 : i.methods),\n            events: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.mergeArrays)(It, (d = T[Fn]) == null ? void 0 : d.events),\n            rpcMap: cr(cr({}, Ln), (w = T[Fn]) == null ? void 0 : w.rpcMap)\n        });\n    }\n    return T;\n}\n_c4 = Oa;\nfunction Xg(C) {\n    return C.includes(\":\") ? C.split(\":\")[2] : C;\n}\n_c5 = Xg;\nfunction Qg(C) {\n    const u = {};\n    for (const [i, d] of Object.entries(C)){\n        const w = d.methods || [], T = d.events || [], $ = d.accounts || [], En = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.isCaipNamespace)(i) ? [\n            i\n        ] : d.chains ? d.chains : Sa(d.accounts);\n        u[i] = {\n            chains: En,\n            methods: w,\n            events: T,\n            accounts: $\n        };\n    }\n    return u;\n}\n_c6 = Qg;\nfunction Wi(C) {\n    return typeof C == \"number\" ? C : C.includes(\"0x\") ? parseInt(C, 16) : C.includes(\":\") ? Number(C.split(\":\")[1]) : Number(C);\n}\n_c7 = Wi;\nconst Ra = {}, z = (C)=>Ra[C], Fi = (C, u)=>{\n    Ra[C] = u;\n};\nclass Vg {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"polkadot\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass kg {\n    async request(u) {\n        switch(u.request.method){\n            case \"eth_requestAccounts\":\n                return this.getAccounts();\n            case \"eth_accounts\":\n                return this.getAccounts();\n            case \"wallet_switchEthereumChain\":\n                return await this.handleSwitchChain(u);\n            case \"eth_chainId\":\n                return parseInt(this.getDefaultChain());\n        }\n        return this.namespace.methods.includes(u.request.method) ? await this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(parseInt(u), i), this.chainId = parseInt(u), this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId.toString();\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(\"\".concat(this.name, \":\").concat(u), this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__.HttpConnection(d, z(\"disableProviderPing\")));\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const w = parseInt(Ct(i));\n            u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    getHttpProvider() {\n        const u = this.chainId, i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    async handleSwitchChain(u) {\n        var i, d;\n        let w = u.request.params ? (i = u.request.params[0]) == null ? void 0 : i.chainId : \"0x0\";\n        w = w.startsWith(\"0x\") ? w : \"0x\".concat(w);\n        const T = parseInt(w, 16);\n        if (this.isChainApproved(T)) this.setDefaultChain(\"\".concat(T));\n        else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n            topic: u.topic,\n            request: {\n                method: u.request.method,\n                params: [\n                    {\n                        chainId: w\n                    }\n                ]\n            },\n            chainId: (d = this.namespace.chains) == null ? void 0 : d[0]\n        }), this.setDefaultChain(\"\".concat(T));\n        else throw new Error(\"Failed to switch to chain 'eip155:\".concat(T, \"'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.\"));\n        return null;\n    }\n    isChainApproved(u) {\n        return this.namespace.chains.includes(\"\".concat(this.name, \":\").concat(u));\n    }\n    constructor(u){\n        this.name = \"eip155\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n    }\n}\nclass jg {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"solana\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass nv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"cosmos\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass tv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            const d = this.getCardanoRPCUrl(i), w = Ct(i);\n            u[w] = this.createHttpProvider(w, d);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    getCardanoRPCUrl(u) {\n        const i = this.namespace.rpcMap;\n        if (i) return i[u];\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || this.getCardanoRPCUrl(u);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"cip34\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass ev {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"elrond\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass rv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"multiversx\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass iv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        if (this.chainId = u, !this.httpProviders[u]) {\n            const d = i || ft(\"\".concat(this.name, \":\").concat(u), this.namespace);\n            if (!d) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n            this.setHttpProvider(u, d);\n        }\n        this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var d;\n            u[i] = this.createHttpProvider(i, (d = this.namespace.rpcMap) == null ? void 0 : d[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const d = this.createHttpProvider(u, i);\n        d && (this.httpProviders[u] = d);\n    }\n    createHttpProvider(u, i) {\n        const d = i || ft(u, this.namespace);\n        return typeof d > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](d, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"near\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar sv = Object.defineProperty, uv = Object.defineProperties, av = Object.getOwnPropertyDescriptors, ba = Object.getOwnPropertySymbols, ov = Object.prototype.hasOwnProperty, fv = Object.prototype.propertyIsEnumerable, Ta = (C, u, i)=>u in C ? sv(C, u, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : C[u] = i, hr = (C, u)=>{\n    for(var i in u || (u = {}))ov.call(u, i) && Ta(C, i, u[i]);\n    if (ba) for (var i of ba(u))fv.call(u, i) && Ta(C, i, u[i]);\n    return C;\n}, Mi = (C, u)=>uv(C, av(u));\nclass lr {\n    static async init(u) {\n        const i = new lr(u);\n        return await i.initialize(), i;\n    }\n    async request(u, i) {\n        const [d, w] = this.validateChain(i);\n        if (!this.session) throw new Error(\"Please call connect() before request()\");\n        return await this.getProvider(d).request({\n            request: hr({}, u),\n            chainId: \"\".concat(d, \":\").concat(w),\n            topic: this.session.topic\n        });\n    }\n    sendAsync(u, i, d) {\n        this.request(u, d).then((w)=>i(null, w)).catch((w)=>i(w, void 0));\n    }\n    async enable() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        return this.session || await this.connect({\n            namespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        }), await this.requestAccounts();\n    }\n    async disconnect() {\n        var u;\n        if (!this.session) throw new Error(\"Please call connect() before enable()\");\n        await this.client.disconnect({\n            topic: (u = this.session) == null ? void 0 : u.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.getSdkError)(\"USER_DISCONNECTED\")\n        }), await this.cleanup();\n    }\n    async connect(u) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (this.setNamespaces(u), await this.cleanupPendingPairings(), !u.skipPairing) return await this.pair(u.pairingTopic);\n    }\n    on(u, i) {\n        this.events.on(u, i);\n    }\n    once(u, i) {\n        this.events.once(u, i);\n    }\n    removeListener(u, i) {\n        this.events.removeListener(u, i);\n    }\n    off(u, i) {\n        this.events.off(u, i);\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    async pair(u) {\n        this.shouldAbortPairingAttempt = !1;\n        let i = 0;\n        do {\n            if (this.shouldAbortPairingAttempt) throw new Error(\"Pairing aborted\");\n            if (i >= this.maxPairingAttempts) throw new Error(\"Max auto pairing attempts reached\");\n            const { uri: d, approval: w } = await this.client.connect({\n                pairingTopic: u,\n                requiredNamespaces: this.namespaces,\n                optionalNamespaces: this.optionalNamespaces,\n                sessionProperties: this.sessionProperties\n            });\n            d && (this.uri = d, this.events.emit(\"display_uri\", d)), await w().then((T)=>{\n                this.session = T, this.namespaces || (this.namespaces = Qg(T.namespaces), this.persist(\"namespaces\", this.namespaces));\n            }).catch((T)=>{\n                if (T.message !== _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_5__.PROPOSAL_EXPIRY_MESSAGE) throw T;\n                i++;\n            });\n        }while (!this.session);\n        return this.onConnect(), this.session;\n    }\n    setDefaultChain(u, i) {\n        try {\n            if (!this.session) return;\n            const [d, w] = this.validateChain(u);\n            this.getProvider(d).setDefaultChain(w, i);\n        } catch (d) {\n            if (!/Please call connect/.test(d.message)) throw d;\n        }\n    }\n    async cleanupPendingPairings() {\n        let u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.logger.info(\"Cleaning up inactive pairings...\");\n        const i = this.client.pairing.getAll();\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.isValidArray)(i)) {\n            for (const d of i)u.deletePairings ? this.client.core.expirer.set(d.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(d.topic);\n            this.logger.info(\"Inactive pairings cleared: \".concat(i.length));\n        }\n    }\n    abortPairingAttempt() {\n        this.shouldAbortPairingAttempt = !0;\n    }\n    async checkStorage() {\n        if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = await this.getFromStore(\"optionalNamespaces\") || {}, this.client.session.length) {\n            const u = this.client.session.keys.length - 1;\n            this.session = this.client.session.get(this.client.session.keys[u]), this.createProviders();\n        }\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n    }\n    async createClient() {\n        this.client = this.providerOpts.client || await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_5__[\"default\"].init({\n            logger: this.providerOpts.logger || Ia,\n            relayUrl: this.providerOpts.relayUrl || Ug,\n            projectId: this.providerOpts.projectId,\n            metadata: this.providerOpts.metadata,\n            storageOptions: this.providerOpts.storageOptions,\n            storage: this.providerOpts.storage,\n            name: this.providerOpts.name\n        }), this.logger.trace(\"SignClient Initialized\");\n    }\n    createProviders() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n        const u = [\n            ...new Set(Object.keys(this.session.namespaces).map((i)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.parseNamespaceKey)(i)))\n        ];\n        Fi(\"client\", this.client), Fi(\"events\", this.events), Fi(\"disableProviderPing\", this.disableProviderPing), u.forEach((i)=>{\n            if (!this.session) return;\n            const d = Zg(i, this.session), w = Sa(d), T = Jg(this.namespaces, this.optionalNamespaces), $ = Mi(hr({}, T[i]), {\n                accounts: d,\n                chains: w\n            });\n            switch(i){\n                case \"eip155\":\n                    this.rpcProviders[i] = new kg({\n                        namespace: $\n                    });\n                    break;\n                case \"solana\":\n                    this.rpcProviders[i] = new jg({\n                        namespace: $\n                    });\n                    break;\n                case \"cosmos\":\n                    this.rpcProviders[i] = new nv({\n                        namespace: $\n                    });\n                    break;\n                case \"polkadot\":\n                    this.rpcProviders[i] = new Vg({\n                        namespace: $\n                    });\n                    break;\n                case \"cip34\":\n                    this.rpcProviders[i] = new tv({\n                        namespace: $\n                    });\n                    break;\n                case \"elrond\":\n                    this.rpcProviders[i] = new ev({\n                        namespace: $\n                    });\n                    break;\n                case \"multiversx\":\n                    this.rpcProviders[i] = new rv({\n                        namespace: $\n                    });\n                    break;\n                case \"near\":\n                    this.rpcProviders[i] = new iv({\n                        namespace: $\n                    });\n                    break;\n            }\n        });\n    }\n    registerEventListeners() {\n        if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n        this.client.on(\"session_ping\", (u)=>{\n            this.events.emit(\"session_ping\", u);\n        }), this.client.on(\"session_event\", (u)=>{\n            const { params: i } = u, { event: d } = i;\n            if (d.name === \"accountsChanged\") {\n                const w = d.data;\n                w && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.isValidArray)(w) && this.events.emit(\"accountsChanged\", w.map(Xg));\n            } else if (d.name === \"chainChanged\") {\n                const w = i.chainId, T = i.event.data, $ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.parseNamespaceKey)(w), En = Wi(w) !== Wi(T) ? \"\".concat($, \":\").concat(Wi(T)) : w;\n                this.onChainChanged(En);\n            } else this.events.emit(d.name, d.data);\n            this.events.emit(\"session_event\", u);\n        }), this.client.on(\"session_update\", (param)=>{\n            let { topic: u, params: i } = param;\n            var d;\n            const { namespaces: w } = i, T = (d = this.client) == null ? void 0 : d.session.get(u);\n            this.session = Mi(hr({}, T), {\n                namespaces: w\n            }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n                topic: u,\n                params: i\n            });\n        }), this.client.on(\"session_delete\", async (u)=>{\n            await this.cleanup(), this.events.emit(\"session_delete\", u), this.events.emit(\"disconnect\", Mi(hr({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: u.topic\n            }));\n        }), this.on(Vn.DEFAULT_CHAIN_CHANGED, (u)=>{\n            this.onChainChanged(u, !0);\n        });\n    }\n    getProvider(u) {\n        if (!this.rpcProviders[u]) throw new Error(\"Provider not found: \".concat(u));\n        return this.rpcProviders[u];\n    }\n    onSessionUpdate() {\n        Object.keys(this.rpcProviders).forEach((u)=>{\n            var i;\n            this.getProvider(u).updateNamespace((i = this.session) == null ? void 0 : i.namespaces[u]);\n        });\n    }\n    setNamespaces(u) {\n        const { namespaces: i, optionalNamespaces: d, sessionProperties: w } = u;\n        i && Object.keys(i).length && (this.namespaces = i), d && Object.keys(d).length && (this.optionalNamespaces = d), this.sessionProperties = w, this.persist(\"namespaces\", i), this.persist(\"optionalNamespaces\", d);\n    }\n    validateChain(u) {\n        const [i, d] = (u === null || u === void 0 ? void 0 : u.split(\":\")) || [\n            \"\",\n            \"\"\n        ];\n        if (!this.namespaces || !Object.keys(this.namespaces).length) return [\n            i,\n            d\n        ];\n        if (i && !Object.keys(this.namespaces || {}).map(($)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.parseNamespaceKey)($)).includes(i)) throw new Error(\"Namespace '\".concat(i, \"' is not configured. Please call connect() first with namespace config.\"));\n        if (i && d) return [\n            i,\n            d\n        ];\n        const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_4__.parseNamespaceKey)(Object.keys(this.namespaces)[0]), T = this.rpcProviders[w].getDefaultChain();\n        return [\n            w,\n            T\n        ];\n    }\n    async requestAccounts() {\n        const [u] = this.validateChain();\n        return await this.getProvider(u).requestAccounts();\n    }\n    onChainChanged(u) {\n        let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n        var d;\n        if (!this.namespaces) return;\n        const [w, T] = this.validateChain(u);\n        i || this.getProvider(w).setDefaultChain(T), ((d = this.namespaces[w]) != null ? d : this.namespaces[\"\".concat(w, \":\").concat(T)]).defaultChain = T, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", T);\n    }\n    onConnect() {\n        this.createProviders(), this.events.emit(\"connect\", {\n            session: this.session\n        });\n    }\n    async cleanup() {\n        this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n            deletePairings: !0\n        });\n    }\n    persist(u, i) {\n        this.client.core.storage.setItem(\"\".concat(xa, \"/\").concat(u), i);\n    }\n    async getFromStore(u) {\n        return await this.client.core.storage.getItem(\"\".concat(xa, \"/\").concat(u));\n    }\n    constructor(u){\n        this.events = new (events__WEBPACK_IMPORTED_MODULE_3___default()), this.rpcProviders = {}, this.shouldAbortPairingAttempt = !1, this.maxPairingAttempts = 10, this.disableProviderPing = !1, this.providerOpts = u, this.logger = typeof (u === null || u === void 0 ? void 0 : u.logger) < \"u\" && typeof (u === null || u === void 0 ? void 0 : u.logger) != \"string\" ? u.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: (u === null || u === void 0 ? void 0 : u.logger) || Ia\n        })), this.disableProviderPing = (u === null || u === void 0 ? void 0 : u.disableProviderPing) || !1;\n    }\n}\nconst cv = lr;\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Ct\");\n$RefreshReg$(_c1, \"Sa\");\n$RefreshReg$(_c2, \"Zg\");\n$RefreshReg$(_c3, \"Jg\");\n$RefreshReg$(_c4, \"Oa\");\n$RefreshReg$(_c5, \"Xg\");\n$RefreshReg$(_c6, \"Qg\");\n$RefreshReg$(_c7, \"Wi\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/dist/index.es.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: function() { return /* binding */ J; },\n/* harmony export */   BASE16: function() { return /* binding */ p; },\n/* harmony export */   BASE64: function() { return /* binding */ F; },\n/* harmony export */   COLON: function() { return /* binding */ zn; },\n/* harmony export */   DEFAULT_DEPTH: function() { return /* binding */ ne; },\n/* harmony export */   EMPTY_SPACE: function() { return /* binding */ q; },\n/* harmony export */   ENV_MAP: function() { return /* binding */ m; },\n/* harmony export */   INTERNAL_ERRORS: function() { return /* binding */ nn; },\n/* harmony export */   MemoryStore: function() { return /* binding */ tr; },\n/* harmony export */   ONE_THOUSAND: function() { return /* binding */ Yn; },\n/* harmony export */   REACT_NATIVE_PRODUCT: function() { return /* binding */ Ce; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ Fe; },\n/* harmony export */   SDK_ERRORS: function() { return /* binding */ en; },\n/* harmony export */   SDK_TYPE: function() { return /* binding */ $e; },\n/* harmony export */   SLASH: function() { return /* binding */ je; },\n/* harmony export */   TYPE_0: function() { return /* binding */ Q; },\n/* harmony export */   TYPE_1: function() { return /* binding */ _; },\n/* harmony export */   UTF8: function() { return /* binding */ H; },\n/* harmony export */   appendToQueryString: function() { return /* binding */ De; },\n/* harmony export */   assertType: function() { return /* binding */ nt; },\n/* harmony export */   buildApprovedNamespaces: function() { return /* binding */ $t; },\n/* harmony export */   calcExpiry: function() { return /* binding */ pt; },\n/* harmony export */   capitalize: function() { return /* binding */ ct; },\n/* harmony export */   capitalizeWord: function() { return /* binding */ xe; },\n/* harmony export */   createDelayedPromise: function() { return /* binding */ at; },\n/* harmony export */   createExpiringPromise: function() { return /* binding */ ut; },\n/* harmony export */   decodeTypeByte: function() { return /* binding */ $; },\n/* harmony export */   decrypt: function() { return /* binding */ Fn; },\n/* harmony export */   deriveSymKey: function() { return /* binding */ Mn; },\n/* harmony export */   deserialize: function() { return /* binding */ ee; },\n/* harmony export */   encodeTypeByte: function() { return /* binding */ Pe; },\n/* harmony export */   encrypt: function() { return /* binding */ xn; },\n/* harmony export */   engineEvent: function() { return /* binding */ yt; },\n/* harmony export */   enumify: function() { return /* binding */ it; },\n/* harmony export */   formatAccountId: function() { return /* binding */ Ee; },\n/* harmony export */   formatAccountWithChain: function() { return /* binding */ Tn; },\n/* harmony export */   formatChainId: function() { return /* binding */ ve; },\n/* harmony export */   formatExpirerTarget: function() { return /* binding */ re; },\n/* harmony export */   formatIdTarget: function() { return /* binding */ dt; },\n/* harmony export */   formatMessage: function() { return /* binding */ $n; },\n/* harmony export */   formatMessageContext: function() { return /* binding */ tt; },\n/* harmony export */   formatRelayParams: function() { return /* binding */ We; },\n/* harmony export */   formatRelayRpcUrl: function() { return /* binding */ Xn; },\n/* harmony export */   formatTopicTarget: function() { return /* binding */ lt; },\n/* harmony export */   formatUA: function() { return /* binding */ Me; },\n/* harmony export */   formatUri: function() { return /* binding */ It; },\n/* harmony export */   generateKeyPair: function() { return /* binding */ kn; },\n/* harmony export */   generateRandomBytes32: function() { return /* binding */ Vn; },\n/* harmony export */   getAccountsChains: function() { return /* binding */ A; },\n/* harmony export */   getAccountsFromNamespaces: function() { return /* binding */ Un; },\n/* harmony export */   getAddressFromAccount: function() { return /* binding */ be; },\n/* harmony export */   getAddressesFromAccounts: function() { return /* binding */ An; },\n/* harmony export */   getAppMetadata: function() { return /* binding */ Qn; },\n/* harmony export */   getBrowserOnlineStatus: function() { return /* binding */ pn; },\n/* harmony export */   getBundleId: function() { return /* binding */ Jn; },\n/* harmony export */   getChainFromAccount: function() { return /* binding */ Ne; },\n/* harmony export */   getChainsFromAccounts: function() { return /* binding */ Oe; },\n/* harmony export */   getChainsFromNamespace: function() { return /* binding */ L; },\n/* harmony export */   getChainsFromNamespaces: function() { return /* binding */ _n; },\n/* harmony export */   getChainsFromRequiredNamespaces: function() { return /* binding */ Cn; },\n/* harmony export */   getDeepLink: function() { return /* binding */ gt; },\n/* harmony export */   getDidAddress: function() { return /* binding */ we; },\n/* harmony export */   getDidAddressSegments: function() { return /* binding */ x; },\n/* harmony export */   getDidChainId: function() { return /* binding */ Se; },\n/* harmony export */   getEnvironment: function() { return /* binding */ T; },\n/* harmony export */   getHttpUrl: function() { return /* binding */ et; },\n/* harmony export */   getInternalError: function() { return /* binding */ N; },\n/* harmony export */   getJavascriptID: function() { return /* binding */ Ve; },\n/* harmony export */   getJavascriptOS: function() { return /* binding */ ke; },\n/* harmony export */   getLastItems: function() { return /* binding */ Le; },\n/* harmony export */   getNamespacedDidChainId: function() { return /* binding */ jn; },\n/* harmony export */   getNamespacesChains: function() { return /* binding */ Je; },\n/* harmony export */   getNamespacesEventsForChainId: function() { return /* binding */ Ze; },\n/* harmony export */   getNamespacesMethodsForChainId: function() { return /* binding */ Qe; },\n/* harmony export */   getNodeOnlineStatus: function() { return /* binding */ yn; },\n/* harmony export */   getReactNativeOnlineStatus: function() { return /* binding */ mn; },\n/* harmony export */   getRelayClientMetadata: function() { return /* binding */ Zn; },\n/* harmony export */   getRelayProtocolApi: function() { return /* binding */ Et; },\n/* harmony export */   getRelayProtocolName: function() { return /* binding */ vt; },\n/* harmony export */   getRequiredNamespacesFromNamespaces: function() { return /* binding */ jt; },\n/* harmony export */   getSdkError: function() { return /* binding */ U; },\n/* harmony export */   getUniqueValues: function() { return /* binding */ Y; },\n/* harmony export */   handleDeeplinkRedirect: function() { return /* binding */ ht; },\n/* harmony export */   hasOverlap: function() { return /* binding */ O; },\n/* harmony export */   hashKey: function() { return /* binding */ Kn; },\n/* harmony export */   hashMessage: function() { return /* binding */ Ln; },\n/* harmony export */   isBrowser: function() { return /* binding */ D; },\n/* harmony export */   isCaipNamespace: function() { return /* binding */ oe; },\n/* harmony export */   isConformingNamespaces: function() { return /* binding */ dn; },\n/* harmony export */   isExpired: function() { return /* binding */ mt; },\n/* harmony export */   isNode: function() { return /* binding */ te; },\n/* harmony export */   isOnline: function() { return /* binding */ er; },\n/* harmony export */   isProposalStruct: function() { return /* binding */ Vt; },\n/* harmony export */   isReactNative: function() { return /* binding */ C; },\n/* harmony export */   isSessionCompatible: function() { return /* binding */ Dt; },\n/* harmony export */   isSessionStruct: function() { return /* binding */ Mt; },\n/* harmony export */   isTypeOneEnvelope: function() { return /* binding */ qn; },\n/* harmony export */   isUndefined: function() { return /* binding */ w; },\n/* harmony export */   isValidAccountId: function() { return /* binding */ tn; },\n/* harmony export */   isValidAccounts: function() { return /* binding */ sn; },\n/* harmony export */   isValidActions: function() { return /* binding */ an; },\n/* harmony export */   isValidArray: function() { return /* binding */ k; },\n/* harmony export */   isValidChainId: function() { return /* binding */ V; },\n/* harmony export */   isValidChains: function() { return /* binding */ rn; },\n/* harmony export */   isValidController: function() { return /* binding */ Kt; },\n/* harmony export */   isValidErrorReason: function() { return /* binding */ qt; },\n/* harmony export */   isValidEvent: function() { return /* binding */ Wt; },\n/* harmony export */   isValidId: function() { return /* binding */ Ft; },\n/* harmony export */   isValidNamespaceAccounts: function() { return /* binding */ cn; },\n/* harmony export */   isValidNamespaceActions: function() { return /* binding */ ce; },\n/* harmony export */   isValidNamespaceChains: function() { return /* binding */ on; },\n/* harmony export */   isValidNamespaceMethodsOrEvents: function() { return /* binding */ ie; },\n/* harmony export */   isValidNamespaces: function() { return /* binding */ un; },\n/* harmony export */   isValidNamespacesChainId: function() { return /* binding */ zt; },\n/* harmony export */   isValidNamespacesEvent: function() { return /* binding */ Jt; },\n/* harmony export */   isValidNamespacesRequest: function() { return /* binding */ Yt; },\n/* harmony export */   isValidNumber: function() { return /* binding */ G; },\n/* harmony export */   isValidObject: function() { return /* binding */ B; },\n/* harmony export */   isValidParams: function() { return /* binding */ Ht; },\n/* harmony export */   isValidRelay: function() { return /* binding */ ln; },\n/* harmony export */   isValidRelays: function() { return /* binding */ xt; },\n/* harmony export */   isValidRequest: function() { return /* binding */ Bt; },\n/* harmony export */   isValidRequestExpiry: function() { return /* binding */ Xt; },\n/* harmony export */   isValidRequiredNamespaces: function() { return /* binding */ Lt; },\n/* harmony export */   isValidResponse: function() { return /* binding */ Gt; },\n/* harmony export */   isValidString: function() { return /* binding */ h; },\n/* harmony export */   isValidUrl: function() { return /* binding */ kt; },\n/* harmony export */   mapEntries: function() { return /* binding */ st; },\n/* harmony export */   mapToObj: function() { return /* binding */ rt; },\n/* harmony export */   mergeArrays: function() { return /* binding */ S; },\n/* harmony export */   normalizeNamespaces: function() { return /* binding */ se; },\n/* harmony export */   objToMap: function() { return /* binding */ ot; },\n/* harmony export */   parseAccountId: function() { return /* binding */ z; },\n/* harmony export */   parseChainId: function() { return /* binding */ ge; },\n/* harmony export */   parseContextNames: function() { return /* binding */ Ke; },\n/* harmony export */   parseExpirerTarget: function() { return /* binding */ ft; },\n/* harmony export */   parseNamespaceKey: function() { return /* binding */ Xe; },\n/* harmony export */   parseRelayParams: function() { return /* binding */ Be; },\n/* harmony export */   parseTopic: function() { return /* binding */ Ge; },\n/* harmony export */   parseUri: function() { return /* binding */ wt; },\n/* harmony export */   serialize: function() { return /* binding */ Re; },\n/* harmony export */   subscribeToBrowserNetworkChange: function() { return /* binding */ hn; },\n/* harmony export */   subscribeToNetworkChange: function() { return /* binding */ nr; },\n/* harmony export */   subscribeToReactNativeNetworkChange: function() { return /* binding */ gn; },\n/* harmony export */   validateDecoding: function() { return /* binding */ Hn; },\n/* harmony export */   validateEncoding: function() { return /* binding */ Te; }\n/* harmony export */ });\n/* harmony import */ var _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stablelib/chacha20poly1305 */ \"(app-pages-browser)/./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\");\n/* harmony import */ var _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/hkdf */ \"(app-pages-browser)/./node_modules/@stablelib/hkdf/lib/hkdf.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stablelib/random */ \"(app-pages-browser)/./node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stablelib/sha256 */ \"(app-pages-browser)/./node_modules/@stablelib/sha256/lib/sha256.js\");\n/* harmony import */ var _stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stablelib/x25519 */ \"(app-pages-browser)/./node_modules/@stablelib/x25519/lib/x25519.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! detect-browser */ \"(app-pages-browser)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(app-pages-browser)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! query-string */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/query-string/index.js\");\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/esm/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst K = \":\";\nfunction ge(e) {\n    const [n, t] = e.split(K);\n    return {\n        namespace: n,\n        reference: t\n    };\n}\nfunction ve(e) {\n    const { namespace: n, reference: t } = e;\n    return [\n        n,\n        t\n    ].join(K);\n}\nfunction z(e) {\n    const [n, t, r] = e.split(K);\n    return {\n        namespace: n,\n        reference: t,\n        address: r\n    };\n}\nfunction Ee(e) {\n    const { namespace: n, reference: t, address: r } = e;\n    return [\n        n,\n        t,\n        r\n    ].join(K);\n}\n_c = Ee;\nfunction Y(e, n) {\n    const t = [];\n    return e.forEach((r)=>{\n        const o = n(r);\n        t.includes(o) || t.push(o);\n    }), t;\n}\n_c1 = Y;\nfunction be(e) {\n    const { address: n } = z(e);\n    return n;\n}\nfunction Ne(e) {\n    const { namespace: n, reference: t } = z(e);\n    return ve({\n        namespace: n,\n        reference: t\n    });\n}\n_c2 = Ne;\nfunction Tn(e, n) {\n    const { namespace: t, reference: r } = ge(n);\n    return Ee({\n        namespace: t,\n        reference: r,\n        address: e\n    });\n}\n_c3 = Tn;\nfunction An(e) {\n    return Y(e, be);\n}\n_c4 = An;\nfunction Oe(e) {\n    return Y(e, Ne);\n}\n_c5 = Oe;\nfunction Un(e) {\n    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const t = [];\n    return Object.keys(e).forEach((r)=>{\n        if (n.length && !n.includes(r)) return;\n        const o = e[r];\n        t.push(...o.accounts);\n    }), t;\n}\n_c6 = Un;\nfunction _n(e) {\n    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const t = [];\n    return Object.keys(e).forEach((r)=>{\n        if (n.length && !n.includes(r)) return;\n        const o = e[r];\n        t.push(...Oe(o.accounts));\n    }), t;\n}\nfunction Cn(e) {\n    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const t = [];\n    return Object.keys(e).forEach((r)=>{\n        if (n.length && !n.includes(r)) return;\n        const o = e[r];\n        t.push(...L(r, o));\n    }), t;\n}\n_c7 = Cn;\nfunction L(e, n) {\n    return e.includes(\":\") ? [\n        e\n    ] : n.chains || [];\n}\n_c8 = L;\nconst x = (e)=>e === null || e === void 0 ? void 0 : e.split(\":\"), Se = (e)=>{\n    const n = e && x(e);\n    if (n) return n[3];\n}, jn = (e)=>{\n    const n = e && x(e);\n    if (n) return n[2] + \":\" + n[3];\n}, we = (e)=>{\n    const n = e && x(e);\n    if (n) return n.pop();\n}, $n = (e, n)=>{\n    const t = \"\".concat(e.domain, \" wants you to sign in with your Ethereum account:\"), r = we(n), o = e.statement, s = \"URI: \".concat(e.aud), i = \"Version: \".concat(e.version), d = \"Chain ID: \".concat(Se(n)), l = \"Nonce: \".concat(e.nonce), c = \"Issued At: \".concat(e.iat), u = e.resources && e.resources.length > 0 ? \"Resources:\\n\".concat(e.resources.map((a)=>\"- \".concat(a)).join(\"\\n\")) : void 0;\n    return [\n        t,\n        r,\n        \"\",\n        o,\n        \"\",\n        s,\n        i,\n        d,\n        l,\n        c,\n        u\n    ].filter((a)=>a != null).join(\"\\n\");\n}, J = \"base10\", p = \"base16\", F = \"base64pad\", H = \"utf8\", Q = 0, _ = 1, Dn = 0, Ie = 1, Z = 12, X = 32;\nfunction kn() {\n    const e = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__.generateKeyPair();\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e.secretKey, p),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e.publicKey, p)\n    };\n}\nfunction Vn() {\n    const e = (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(X);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e, p);\n}\n_c9 = Vn;\nfunction Mn(e, n) {\n    const t = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_4__.sharedKey((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, p), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(n, p), !0), r = new _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_1__.HKDF(_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.SHA256, t).expand(X);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(r, p);\n}\n_c10 = Mn;\nfunction Kn(e) {\n    const n = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, p));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n, p);\n}\n_c11 = Kn;\nfunction Ln(e) {\n    const n = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_3__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, H));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n, p);\n}\n_c12 = Ln;\nfunction Pe(e) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(\"\".concat(e), J);\n}\n_c13 = Pe;\nfunction $(e) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e, J));\n}\nfunction xn(e) {\n    const n = Pe(typeof e.type < \"u\" ? e.type : Q);\n    if ($(n) === _ && typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const t = typeof e.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.senderPublicKey, p) : void 0, r = typeof e.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.iv, p) : (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_2__.randomBytes)(Z), o = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.symKey, p)).seal(r, (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.message, H));\n    return Re({\n        type: n,\n        sealed: o,\n        iv: r,\n        senderPublicKey: t\n    });\n}\nfunction Fn(e) {\n    const n = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_0__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e.symKey, p)), { sealed: t, iv: r } = ee(e.encoded), o = n.open(r, t);\n    if (o === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(o, H);\n}\n_c14 = Fn;\nfunction Re(e) {\n    if ($(e.type) === _) {\n        if (typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n            e.type,\n            e.senderPublicKey,\n            e.iv,\n            e.sealed\n        ]), F);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n        e.type,\n        e.iv,\n        e.sealed\n    ]), F);\n}\n_c15 = Re;\nfunction ee(e) {\n    const n = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, F), t = n.slice(Dn, Ie), r = Ie;\n    if ($(t) === _) {\n        const d = r + X, l = d + Z, c = n.slice(r, d), u = n.slice(d, l), a = n.slice(l);\n        return {\n            type: t,\n            sealed: a,\n            iv: u,\n            senderPublicKey: c\n        };\n    }\n    const o = r + Z, s = n.slice(r, o), i = n.slice(o);\n    return {\n        type: t,\n        sealed: i,\n        iv: s\n    };\n}\nfunction Hn(e, n) {\n    const t = ee(e);\n    return Te({\n        type: $(t.type),\n        senderPublicKey: typeof t.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(t.senderPublicKey, p) : void 0,\n        receiverPublicKey: n === null || n === void 0 ? void 0 : n.receiverPublicKey\n    });\n}\n_c16 = Hn;\nfunction Te(e) {\n    const n = (e === null || e === void 0 ? void 0 : e.type) || Q;\n    if (n === _) {\n        if (typeof (e === null || e === void 0 ? void 0 : e.senderPublicKey) > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof (e === null || e === void 0 ? void 0 : e.receiverPublicKey) > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: n,\n        senderPublicKey: e === null || e === void 0 ? void 0 : e.senderPublicKey,\n        receiverPublicKey: e === null || e === void 0 ? void 0 : e.receiverPublicKey\n    };\n}\n_c17 = Te;\nfunction qn(e) {\n    return e.type === _ && typeof e.senderPublicKey == \"string\" && typeof e.receiverPublicKey == \"string\";\n}\nvar Bn = Object.defineProperty, Ae = Object.getOwnPropertySymbols, Gn = Object.prototype.hasOwnProperty, Wn = Object.prototype.propertyIsEnumerable, Ue = (e, n, t)=>n in e ? Bn(e, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : e[n] = t, _e = (e, n)=>{\n    for(var t in n || (n = {}))Gn.call(n, t) && Ue(e, t, n[t]);\n    if (Ae) for (var t of Ae(n))Wn.call(n, t) && Ue(e, t, n[t]);\n    return e;\n};\nconst Ce = \"ReactNative\", m = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, q = \" \", zn = \":\", je = \"/\", ne = 2, Yn = 1e3, $e = \"js\";\nfunction te() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction C() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getNavigator)() && navigator.product === Ce;\n}\n_c18 = C;\nfunction D() {\n    return !te() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getNavigator)();\n}\n_c19 = D;\nfunction T() {\n    return C() ? m.reactNative : te() ? m.node : D() ? m.browser : m.unknown;\n}\n_c20 = T;\nfunction Jn() {\n    var e;\n    try {\n        return C() && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Application) < \"u\" ? (e = __webpack_require__.g.Application) == null ? void 0 : e.applicationId : void 0;\n    } catch (e) {\n        return;\n    }\n}\n_c21 = Jn;\nfunction De(e, n) {\n    let t = query_string__WEBPACK_IMPORTED_MODULE_9__.parse(e);\n    return t = _e(_e({}, t), n), e = query_string__WEBPACK_IMPORTED_MODULE_9__.stringify(t), e;\n}\n_c22 = De;\nfunction Qn() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_8__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\n_c23 = Qn;\nfunction Zn(e, n) {\n    var t;\n    const r = T(), o = {\n        protocol: e,\n        version: n,\n        env: r\n    };\n    return r === \"browser\" && (o.host = ((t = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getLocation)()) == null ? void 0 : t.host) || \"unknown\"), o;\n}\n_c24 = Zn;\nfunction ke() {\n    if (T() === m.reactNative && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform) < \"u\") {\n        const { OS: t, Version: r } = __webpack_require__.g.Platform;\n        return [\n            t,\n            r\n        ].join(\"-\");\n    }\n    const e = (0,detect_browser__WEBPACK_IMPORTED_MODULE_11__.detect)();\n    if (e === null) return \"unknown\";\n    const n = e.os ? e.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return e.type === \"browser\" ? [\n        n,\n        e.name,\n        e.version\n    ].join(\"-\") : [\n        n,\n        e.version\n    ].join(\"-\");\n}\nfunction Ve() {\n    var e;\n    const n = T();\n    return n === m.browser ? [\n        n,\n        ((e = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_7__.getLocation)()) == null ? void 0 : e.host) || \"unknown\"\n    ].join(\":\") : n;\n}\n_c25 = Ve;\nfunction Me(e, n, t) {\n    const r = ke(), o = Ve();\n    return [\n        [\n            e,\n            n\n        ].join(\"-\"),\n        [\n            $e,\n            t\n        ].join(\"-\"),\n        r,\n        o\n    ].join(\"/\");\n}\n_c26 = Me;\nfunction Xn(param) {\n    let { protocol: e, version: n, relayUrl: t, sdkVersion: r, auth: o, projectId: s, useOnCloseEvent: i, bundleId: d } = param;\n    const l = t.split(\"?\"), c = Me(e, n, r), u = {\n        auth: o,\n        ua: c,\n        projectId: s,\n        useOnCloseEvent: i || void 0,\n        origin: d || void 0\n    }, a = De(l[1] || \"\", u);\n    return l[0] + \"?\" + a;\n}\n_c27 = Xn;\nfunction et(e) {\n    let n = (e.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const t = typeof n < \"u\" ? e.split(\"://\")[1] : e;\n    return n = n === \"wss\" ? \"https\" : \"http\", [\n        n,\n        t\n    ].join(\"://\");\n}\nfunction nt(e, n, t) {\n    if (!e[n] || typeof e[n] !== t) throw new Error('Missing or invalid \"'.concat(n, '\" param'));\n}\nfunction Ke(e) {\n    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ne;\n    return Le(e.split(je), n);\n}\n_c28 = Ke;\nfunction tt(e) {\n    return Ke(e).join(q);\n}\nfunction O(e, n) {\n    return e.filter((t)=>n.includes(t)).length === e.length;\n}\n_c29 = O;\nfunction Le(e) {\n    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ne;\n    return e.slice(Math.max(e.length - n, 0));\n}\n_c30 = Le;\nfunction rt(e) {\n    return Object.fromEntries(e.entries());\n}\nfunction ot(e) {\n    return new Map(Object.entries(e));\n}\nfunction st(e, n) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        t[r] = n(e[r]);\n    }), t;\n}\nconst it = (e)=>e;\nfunction xe(e) {\n    return e.trim().replace(/^\\w/, (n)=>n.toUpperCase());\n}\nfunction ct(e) {\n    return e.split(q).map((n)=>xe(n)).join(q);\n}\nfunction at() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.FIVE_MINUTES, n = arguments.length > 1 ? arguments[1] : void 0;\n    const t = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e || _walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.FIVE_MINUTES);\n    let r, o, s;\n    return {\n        resolve: (i)=>{\n            s && r && (clearTimeout(s), r(i));\n        },\n        reject: (i)=>{\n            s && o && (clearTimeout(s), o(i));\n        },\n        done: ()=>new Promise((i, d)=>{\n                s = setTimeout(()=>{\n                    d(new Error(n));\n                }, t), r = i, o = d;\n            })\n    };\n}\nfunction ut(e, n, t) {\n    return new Promise(async (r, o)=>{\n        const s = setTimeout(()=>o(new Error(t)), n);\n        try {\n            const i = await e;\n            r(i);\n        } catch (i) {\n            o(i);\n        }\n        clearTimeout(s);\n    });\n}\nfunction re(e, n) {\n    if (typeof n == \"string\" && n.startsWith(\"\".concat(e, \":\"))) return n;\n    if (e.toLowerCase() === \"topic\") {\n        if (typeof n != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return \"topic:\".concat(n);\n    } else if (e.toLowerCase() === \"id\") {\n        if (typeof n != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return \"id:\".concat(n);\n    }\n    throw new Error(\"Unknown expirer target type: \".concat(e));\n}\nfunction lt(e) {\n    return re(\"topic\", e);\n}\nfunction dt(e) {\n    return re(\"id\", e);\n}\nfunction ft(e) {\n    const [n, t] = e.split(\":\"), r = {\n        id: void 0,\n        topic: void 0\n    };\n    if (n === \"topic\" && typeof t == \"string\") r.topic = t;\n    else if (n === \"id\" && Number.isInteger(Number(t))) r.id = Number(t);\n    else throw new Error(\"Invalid target, expected id:number or topic:string, got \".concat(n, \":\").concat(t));\n    return r;\n}\nfunction pt(e, n) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.fromMiliseconds)((n || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e));\n}\nfunction mt(e) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_6__.toMiliseconds)(e);\n}\nfunction yt(e, n) {\n    return \"\".concat(e).concat(n ? \":\".concat(n) : \"\");\n}\nfunction S() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    return [\n        ...new Set([\n            ...e,\n            ...n\n        ])\n    ];\n}\n_c31 = S;\nasync function ht(param) {\n    let { id: e, topic: n, wcDeepLink: t } = param;\n    try {\n        if (!t) return;\n        const r = typeof t == \"string\" ? JSON.parse(t) : t;\n        let o = r === null || r === void 0 ? void 0 : r.href;\n        if (typeof o != \"string\") return;\n        o.endsWith(\"/\") && (o = o.slice(0, -1));\n        const s = \"\".concat(o, \"/wc?requestId=\").concat(e, \"&sessionTopic=\").concat(n), i = T();\n        i === m.browser ? s.startsWith(\"https://\") ? window.open(s, \"_blank\", \"noreferrer noopener\") : window.open(s, \"_self\", \"noreferrer noopener\") : i === m.reactNative && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking) < \"u\" && await __webpack_require__.g.Linking.openURL(s);\n    } catch (r) {\n        console.error(r);\n    }\n}\nasync function gt(e, n) {\n    try {\n        return await e.getItem(n) || (D() ? localStorage.getItem(n) : void 0);\n    } catch (t) {\n        console.error(t);\n    }\n}\nconst Fe = \"irn\";\nfunction vt(e) {\n    return (e === null || e === void 0 ? void 0 : e.relay) || {\n        protocol: Fe\n    };\n}\nfunction Et(e) {\n    const n = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__.RELAY_JSONRPC[e];\n    if (typeof n > \"u\") throw new Error(\"Relay Protocol not supported: \".concat(e));\n    return n;\n}\n_c32 = Et;\nvar bt = Object.defineProperty, He = Object.getOwnPropertySymbols, Nt = Object.prototype.hasOwnProperty, Ot = Object.prototype.propertyIsEnumerable, qe = (e, n, t)=>n in e ? bt(e, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : e[n] = t, St = (e, n)=>{\n    for(var t in n || (n = {}))Nt.call(n, t) && qe(e, t, n[t]);\n    if (He) for (var t of He(n))Ot.call(n, t) && qe(e, t, n[t]);\n    return e;\n};\nfunction Be(e) {\n    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const t = {}, r = \"relay\" + n;\n    return Object.keys(e).forEach((o)=>{\n        if (o.startsWith(r)) {\n            const s = o.replace(r, \"\"), i = e[o];\n            t[s] = i;\n        }\n    }), t;\n}\n_c33 = Be;\nfunction wt(e) {\n    e = e.includes(\"wc://\") ? e.replace(\"wc://\", \"\") : e, e = e.includes(\"wc:\") ? e.replace(\"wc:\", \"\") : e;\n    const n = e.indexOf(\":\"), t = e.indexOf(\"?\") !== -1 ? e.indexOf(\"?\") : void 0, r = e.substring(0, n), o = e.substring(n + 1, t).split(\"@\"), s = typeof t < \"u\" ? e.substring(t) : \"\", i = query_string__WEBPACK_IMPORTED_MODULE_9__.parse(s);\n    return {\n        protocol: r,\n        topic: Ge(o[0]),\n        version: parseInt(o[1], 10),\n        symKey: i.symKey,\n        relay: Be(i)\n    };\n}\nfunction Ge(e) {\n    return e.startsWith(\"//\") ? e.substring(2) : e;\n}\n_c34 = Ge;\nfunction We(e) {\n    let n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const t = \"relay\", r = {};\n    return Object.keys(e).forEach((o)=>{\n        const s = t + n + o;\n        e[o] && (r[s] = e[o]);\n    }), r;\n}\n_c35 = We;\nfunction It(e) {\n    return \"\".concat(e.protocol, \":\").concat(e.topic, \"@\").concat(e.version, \"?\") + query_string__WEBPACK_IMPORTED_MODULE_9__.stringify(St({\n        symKey: e.symKey\n    }, We(e.relay)));\n}\n_c36 = It;\nvar Pt = Object.defineProperty, Rt = Object.defineProperties, Tt = Object.getOwnPropertyDescriptors, ze = Object.getOwnPropertySymbols, At = Object.prototype.hasOwnProperty, Ut = Object.prototype.propertyIsEnumerable, Ye = (e, n, t)=>n in e ? Pt(e, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : e[n] = t, _t = (e, n)=>{\n    for(var t in n || (n = {}))At.call(n, t) && Ye(e, t, n[t]);\n    if (ze) for (var t of ze(n))Ut.call(n, t) && Ye(e, t, n[t]);\n    return e;\n}, Ct = (e, n)=>Rt(e, Tt(n));\nfunction A(e) {\n    const n = [];\n    return e.forEach((t)=>{\n        const [r, o] = t.split(\":\");\n        n.push(\"\".concat(r, \":\").concat(o));\n    }), n;\n}\n_c37 = A;\nfunction Je(e) {\n    const n = [];\n    return Object.values(e).forEach((t)=>{\n        n.push(...A(t.accounts));\n    }), n;\n}\n_c38 = Je;\nfunction Qe(e, n) {\n    const t = [];\n    return Object.values(e).forEach((r)=>{\n        A(r.accounts).includes(n) && t.push(...r.methods);\n    }), t;\n}\n_c39 = Qe;\nfunction Ze(e, n) {\n    const t = [];\n    return Object.values(e).forEach((r)=>{\n        A(r.accounts).includes(n) && t.push(...r.events);\n    }), t;\n}\n_c40 = Ze;\nfunction jt(e, n) {\n    const t = un(e, n);\n    if (t) throw new Error(t.message);\n    const r = {};\n    for (const [o, s] of Object.entries(e))r[o] = {\n        methods: s.methods,\n        events: s.events,\n        chains: s.accounts.map((i)=>\"\".concat(i.split(\":\")[0], \":\").concat(i.split(\":\")[1]))\n    };\n    return r;\n}\nfunction $t(e) {\n    const { proposal: { requiredNamespaces: n, optionalNamespaces: t = {} }, supportedNamespaces: r } = e, o = se(n), s = se(t), i = {};\n    Object.keys(r).forEach((c)=>{\n        const u = r[c].chains, a = r[c].methods, b = r[c].events, I = r[c].accounts;\n        u.forEach((y)=>{\n            if (!I.some((f)=>f.includes(y))) throw new Error(\"No accounts provided for chain \".concat(y, \" in namespace \").concat(c));\n        }), i[c] = {\n            chains: u,\n            methods: a,\n            events: b,\n            accounts: I\n        };\n    });\n    const d = dn(n, i, \"approve()\");\n    if (d) throw new Error(d.message);\n    const l = {};\n    return !Object.keys(n).length && !Object.keys(t).length ? i : (Object.keys(o).forEach((c)=>{\n        const u = r[c].chains.filter((y)=>{\n            var f, g;\n            return (g = (f = o[c]) == null ? void 0 : f.chains) == null ? void 0 : g.includes(y);\n        }), a = r[c].methods.filter((y)=>{\n            var f, g;\n            return (g = (f = o[c]) == null ? void 0 : f.methods) == null ? void 0 : g.includes(y);\n        }), b = r[c].events.filter((y)=>{\n            var f, g;\n            return (g = (f = o[c]) == null ? void 0 : f.events) == null ? void 0 : g.includes(y);\n        }), I = u.map((y)=>r[c].accounts.filter((f)=>f.includes(\"\".concat(y, \":\")))).flat();\n        l[c] = {\n            chains: u,\n            methods: a,\n            events: b,\n            accounts: I\n        };\n    }), Object.keys(s).forEach((c)=>{\n        var u, a, b, I, y, f;\n        if (!r[c]) return;\n        const g = (a = (u = s[c]) == null ? void 0 : u.chains) == null ? void 0 : a.filter((P)=>r[c].chains.includes(P)), vn = r[c].methods.filter((P)=>{\n            var R, j;\n            return (j = (R = s[c]) == null ? void 0 : R.methods) == null ? void 0 : j.includes(P);\n        }), En = r[c].events.filter((P)=>{\n            var R, j;\n            return (j = (R = s[c]) == null ? void 0 : R.events) == null ? void 0 : j.includes(P);\n        }), bn = g === null || g === void 0 ? void 0 : g.map((P)=>r[c].accounts.filter((R)=>R.includes(\"\".concat(P, \":\")))).flat();\n        l[c] = {\n            chains: S((b = l[c]) == null ? void 0 : b.chains, g),\n            methods: S((I = l[c]) == null ? void 0 : I.methods, vn),\n            events: S((y = l[c]) == null ? void 0 : y.events, En),\n            accounts: S((f = l[c]) == null ? void 0 : f.accounts, bn)\n        };\n    }), l);\n}\nfunction oe(e) {\n    return e.includes(\":\");\n}\nfunction Xe(e) {\n    return oe(e) ? e.split(\":\")[0] : e;\n}\n_c41 = Xe;\nfunction se(e) {\n    var n, t, r;\n    const o = {};\n    if (!B(e)) return o;\n    for (const [s, i] of Object.entries(e)){\n        const d = oe(s) ? [\n            s\n        ] : i.chains, l = i.methods || [], c = i.events || [], u = Xe(s);\n        o[u] = Ct(_t({}, o[u]), {\n            chains: S(d, (n = o[u]) == null ? void 0 : n.chains),\n            methods: S(l, (t = o[u]) == null ? void 0 : t.methods),\n            events: S(c, (r = o[u]) == null ? void 0 : r.events)\n        });\n    }\n    return o;\n}\nconst en = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, nn = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction N(e, n) {\n    const { message: t, code: r } = nn[e];\n    return {\n        message: n ? \"\".concat(t, \" \").concat(n) : t,\n        code: r\n    };\n}\n_c42 = N;\nfunction U(e, n) {\n    const { message: t, code: r } = en[e];\n    return {\n        message: n ? \"\".concat(t, \" \").concat(n) : t,\n        code: r\n    };\n}\n_c43 = U;\nfunction k(e, n) {\n    return Array.isArray(e) ? typeof n < \"u\" && e.length ? e.every(n) : !0 : !1;\n}\nfunction B(e) {\n    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;\n}\n_c44 = B;\nfunction w(e) {\n    return typeof e > \"u\";\n}\nfunction h(e, n) {\n    return n && w(e) ? !0 : typeof e == \"string\" && !!e.trim().length;\n}\nfunction G(e, n) {\n    return n && w(e) ? !0 : typeof e == \"number\" && !isNaN(e);\n}\n_c45 = G;\nfunction Dt(e, n) {\n    const { requiredNamespaces: t } = n, r = Object.keys(e.namespaces), o = Object.keys(t);\n    let s = !0;\n    return O(o, r) ? (r.forEach((i)=>{\n        const { accounts: d, methods: l, events: c } = e.namespaces[i], u = A(d), a = t[i];\n        (!O(L(i, a), u) || !O(a.methods, l) || !O(a.events, c)) && (s = !1);\n    }), s) : !1;\n}\n_c46 = Dt;\nfunction V(e) {\n    return h(e, !1) && e.includes(\":\") ? e.split(\":\").length === 2 : !1;\n}\n_c47 = V;\nfunction tn(e) {\n    if (h(e, !1) && e.includes(\":\")) {\n        const n = e.split(\":\");\n        if (n.length === 3) {\n            const t = n[0] + \":\" + n[1];\n            return !!n[2] && V(t);\n        }\n    }\n    return !1;\n}\nfunction kt(e) {\n    if (h(e, !1)) try {\n        return typeof new URL(e) < \"u\";\n    } catch (e) {\n        return !1;\n    }\n    return !1;\n}\nfunction Vt(e) {\n    var n;\n    return (n = e === null || e === void 0 ? void 0 : e.proposer) == null ? void 0 : n.publicKey;\n}\n_c48 = Vt;\nfunction Mt(e) {\n    return e === null || e === void 0 ? void 0 : e.topic;\n}\n_c49 = Mt;\nfunction Kt(e, n) {\n    let t = null;\n    return h(e === null || e === void 0 ? void 0 : e.publicKey, !1) || (t = N(\"MISSING_OR_INVALID\", \"\".concat(n, \" controller public key should be a string\"))), t;\n}\n_c50 = Kt;\nfunction ie(e) {\n    let n = !0;\n    return k(e) ? e.length && (n = e.every((t)=>h(t, !1))) : n = !1, n;\n}\nfunction rn(e, n, t) {\n    let r = null;\n    return k(n) && n.length ? n.forEach((o)=>{\n        r || V(o) || (r = U(\"UNSUPPORTED_CHAINS\", \"\".concat(t, \", chain \").concat(o, ' should be a string and conform to \"namespace:chainId\" format')));\n    }) : V(e) || (r = U(\"UNSUPPORTED_CHAINS\", \"\".concat(t, ', chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }'))), r;\n}\nfunction on(e, n, t) {\n    let r = null;\n    return Object.entries(e).forEach((param)=>{\n        let [o, s] = param;\n        if (r) return;\n        const i = rn(o, L(o, s), \"\".concat(n, \" \").concat(t));\n        i && (r = i);\n    }), r;\n}\nfunction sn(e, n) {\n    let t = null;\n    return k(e) ? e.forEach((r)=>{\n        t || tn(r) || (t = U(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(n, \", account \").concat(r, ' should be a string and conform to \"namespace:chainId:address\" format')));\n    }) : t = U(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(n, ', accounts should be an array of strings conforming to \"namespace:chainId:address\" format')), t;\n}\nfunction cn(e, n) {\n    let t = null;\n    return Object.values(e).forEach((r)=>{\n        if (t) return;\n        const o = sn(r === null || r === void 0 ? void 0 : r.accounts, \"\".concat(n, \" namespace\"));\n        o && (t = o);\n    }), t;\n}\nfunction an(e, n) {\n    let t = null;\n    return ie(e === null || e === void 0 ? void 0 : e.methods) ? ie(e === null || e === void 0 ? void 0 : e.events) || (t = U(\"UNSUPPORTED_EVENTS\", \"\".concat(n, \", events should be an array of strings or empty array for no events\"))) : t = U(\"UNSUPPORTED_METHODS\", \"\".concat(n, \", methods should be an array of strings or empty array for no methods\")), t;\n}\nfunction ce(e, n) {\n    let t = null;\n    return Object.values(e).forEach((r)=>{\n        if (t) return;\n        const o = an(r, \"\".concat(n, \", namespace\"));\n        o && (t = o);\n    }), t;\n}\nfunction Lt(e, n, t) {\n    let r = null;\n    if (e && B(e)) {\n        const o = ce(e, n);\n        o && (r = o);\n        const s = on(e, n, t);\n        s && (r = s);\n    } else r = N(\"MISSING_OR_INVALID\", \"\".concat(n, \", \").concat(t, \" should be an object with data\"));\n    return r;\n}\n_c51 = Lt;\nfunction un(e, n) {\n    let t = null;\n    if (e && B(e)) {\n        const r = ce(e, n);\n        r && (t = r);\n        const o = cn(e, n);\n        o && (t = o);\n    } else t = N(\"MISSING_OR_INVALID\", \"\".concat(n, \", namespaces should be an object with data\"));\n    return t;\n}\nfunction ln(e) {\n    return h(e.protocol, !0);\n}\nfunction xt(e, n) {\n    let t = !1;\n    return n && !e ? t = !0 : e && k(e) && e.length && e.forEach((r)=>{\n        t = ln(r);\n    }), t;\n}\nfunction Ft(e) {\n    return typeof e == \"number\";\n}\n_c52 = Ft;\nfunction Ht(e) {\n    return typeof e < \"u\" && typeof e !== null;\n}\n_c53 = Ht;\nfunction qt(e) {\n    return !(!e || typeof e != \"object\" || !e.code || !G(e.code, !1) || !e.message || !h(e.message, !1));\n}\nfunction Bt(e) {\n    return !(w(e) || !h(e.method, !1));\n}\n_c54 = Bt;\nfunction Gt(e) {\n    return !(w(e) || w(e.result) && w(e.error) || !G(e.id, !1) || !h(e.jsonrpc, !1));\n}\n_c55 = Gt;\nfunction Wt(e) {\n    return !(w(e) || !h(e.name, !1));\n}\n_c56 = Wt;\nfunction zt(e, n) {\n    return !(!V(n) || !Je(e).includes(n));\n}\nfunction Yt(e, n, t) {\n    return h(t, !1) ? Qe(e, n).includes(t) : !1;\n}\n_c57 = Yt;\nfunction Jt(e, n, t) {\n    return h(t, !1) ? Ze(e, n).includes(t) : !1;\n}\n_c58 = Jt;\nfunction dn(e, n, t) {\n    let r = null;\n    const o = Qt(e), s = Zt(n), i = Object.keys(o), d = Object.keys(s), l = fn(Object.keys(e)), c = fn(Object.keys(n)), u = l.filter((a)=>!c.includes(a));\n    return u.length && (r = N(\"NON_CONFORMING_NAMESPACES\", \"\".concat(t, \" namespaces keys don't satisfy requiredNamespaces.\\n      Required: \").concat(u.toString(), \"\\n      Received: \").concat(Object.keys(n).toString()))), O(i, d) || (r = N(\"NON_CONFORMING_NAMESPACES\", \"\".concat(t, \" namespaces chains don't satisfy required namespaces.\\n      Required: \").concat(i.toString(), \"\\n      Approved: \").concat(d.toString()))), Object.keys(n).forEach((a)=>{\n        if (!a.includes(\":\") || r) return;\n        const b = A(n[a].accounts);\n        b.includes(a) || (r = N(\"NON_CONFORMING_NAMESPACES\", \"\".concat(t, \" namespaces accounts don't satisfy namespace accounts for \").concat(a, \"\\n        Required: \").concat(a, \"\\n        Approved: \").concat(b.toString())));\n    }), i.forEach((a)=>{\n        r || (O(o[a].methods, s[a].methods) ? O(o[a].events, s[a].events) || (r = N(\"NON_CONFORMING_NAMESPACES\", \"\".concat(t, \" namespaces events don't satisfy namespace events for \").concat(a))) : r = N(\"NON_CONFORMING_NAMESPACES\", \"\".concat(t, \" namespaces methods don't satisfy namespace methods for \").concat(a)));\n    }), r;\n}\nfunction Qt(e) {\n    const n = {};\n    return Object.keys(e).forEach((t)=>{\n        var r;\n        t.includes(\":\") ? n[t] = e[t] : (r = e[t].chains) == null || r.forEach((o)=>{\n            n[o] = {\n                methods: e[t].methods,\n                events: e[t].events\n            };\n        });\n    }), n;\n}\n_c59 = Qt;\nfunction fn(e) {\n    return [\n        ...new Set(e.map((n)=>n.includes(\":\") ? n.split(\":\")[0] : n))\n    ];\n}\nfunction Zt(e) {\n    const n = {};\n    return Object.keys(e).forEach((t)=>{\n        if (t.includes(\":\")) n[t] = e[t];\n        else {\n            const r = A(e[t].accounts);\n            r === null || r === void 0 ? void 0 : r.forEach((o)=>{\n                n[o] = {\n                    accounts: e[t].accounts.filter((s)=>s.includes(\"\".concat(o, \":\"))),\n                    methods: e[t].methods,\n                    events: e[t].events\n                };\n            });\n        }\n    }), n;\n}\n_c60 = Zt;\nfunction Xt(e, n) {\n    return G(e, !1) && e <= n.max && e >= n.min;\n}\n_c61 = Xt;\nfunction er() {\n    const e = T();\n    return new Promise((n)=>{\n        switch(e){\n            case m.browser:\n                n(pn());\n                break;\n            case m.reactNative:\n                n(mn());\n                break;\n            case m.node:\n                n(yn());\n                break;\n            default:\n                n(!0);\n        }\n    });\n}\nfunction pn() {\n    var _navigator;\n    return D() && ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine);\n}\nasync function mn() {\n    if (C() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo) {\n        const e = await (__webpack_require__.g == null ? void 0 : __webpack_require__.g.NetInfo.fetch());\n        return e === null || e === void 0 ? void 0 : e.isConnected;\n    }\n    return !0;\n}\nfunction yn() {\n    return !0;\n}\nfunction nr(e) {\n    switch(T()){\n        case m.browser:\n            hn(e);\n            break;\n        case m.reactNative:\n            gn(e);\n            break;\n        case m.node:\n            break;\n    }\n}\nfunction hn(e) {\n    !C() && D() && (window.addEventListener(\"online\", ()=>e(!0)), window.addEventListener(\"offline\", ()=>e(!1)));\n}\nfunction gn(e) {\n    var _global;\n    C() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo && ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : _global.NetInfo.addEventListener((n)=>e(n === null || n === void 0 ? void 0 : n.isConnected)));\n}\nconst ae = {};\nclass tr {\n    static get(n) {\n        return ae[n];\n    }\n    static set(n, t) {\n        ae[n] = t;\n    }\n    static delete(n) {\n        delete ae[n];\n    }\n}\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61;\n$RefreshReg$(_c, \"Ee\");\n$RefreshReg$(_c1, \"Y\");\n$RefreshReg$(_c2, \"Ne\");\n$RefreshReg$(_c3, \"Tn\");\n$RefreshReg$(_c4, \"An\");\n$RefreshReg$(_c5, \"Oe\");\n$RefreshReg$(_c6, \"Un\");\n$RefreshReg$(_c7, \"Cn\");\n$RefreshReg$(_c8, \"L\");\n$RefreshReg$(_c9, \"Vn\");\n$RefreshReg$(_c10, \"Mn\");\n$RefreshReg$(_c11, \"Kn\");\n$RefreshReg$(_c12, \"Ln\");\n$RefreshReg$(_c13, \"Pe\");\n$RefreshReg$(_c14, \"Fn\");\n$RefreshReg$(_c15, \"Re\");\n$RefreshReg$(_c16, \"Hn\");\n$RefreshReg$(_c17, \"Te\");\n$RefreshReg$(_c18, \"C\");\n$RefreshReg$(_c19, \"D\");\n$RefreshReg$(_c20, \"T\");\n$RefreshReg$(_c21, \"Jn\");\n$RefreshReg$(_c22, \"De\");\n$RefreshReg$(_c23, \"Qn\");\n$RefreshReg$(_c24, \"Zn\");\n$RefreshReg$(_c25, \"Ve\");\n$RefreshReg$(_c26, \"Me\");\n$RefreshReg$(_c27, \"Xn\");\n$RefreshReg$(_c28, \"Ke\");\n$RefreshReg$(_c29, \"O\");\n$RefreshReg$(_c30, \"Le\");\n$RefreshReg$(_c31, \"S\");\n$RefreshReg$(_c32, \"Et\");\n$RefreshReg$(_c33, \"Be\");\n$RefreshReg$(_c34, \"Ge\");\n$RefreshReg$(_c35, \"We\");\n$RefreshReg$(_c36, \"It\");\n$RefreshReg$(_c37, \"A\");\n$RefreshReg$(_c38, \"Je\");\n$RefreshReg$(_c39, \"Qe\");\n$RefreshReg$(_c40, \"Ze\");\n$RefreshReg$(_c41, \"Xe\");\n$RefreshReg$(_c42, \"N\");\n$RefreshReg$(_c43, \"U\");\n$RefreshReg$(_c44, \"B\");\n$RefreshReg$(_c45, \"G\");\n$RefreshReg$(_c46, \"Dt\");\n$RefreshReg$(_c47, \"V\");\n$RefreshReg$(_c48, \"Vt\");\n$RefreshReg$(_c49, \"Mt\");\n$RefreshReg$(_c50, \"Kt\");\n$RefreshReg$(_c51, \"Lt\");\n$RefreshReg$(_c52, \"Ft\");\n$RefreshReg$(_c53, \"Ht\");\n$RefreshReg$(_c54, \"Bt\");\n$RefreshReg$(_c55, \"Gt\");\n$RefreshReg$(_c56, \"Wt\");\n$RefreshReg$(_c57, \"Yt\");\n$RefreshReg$(_c58, \"Jt\");\n$RefreshReg$(_c59, \"Qt\");\n$RefreshReg$(_c60, \"Zt\");\n$RefreshReg$(_c61, \"Xt\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/query-string/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/query-string/index.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst strictUriEncode = __webpack_require__(/*! strict-uri-encode */ \"(app-pages-browser)/./node_modules/strict-uri-encode/index.js\");\nconst decodeComponent = __webpack_require__(/*! decode-uri-component */ \"(app-pages-browser)/./node_modules/decode-uri-component/index.js\");\nconst splitOnFirst = __webpack_require__(/*! split-on-first */ \"(app-pages-browser)/./node_modules/split-on-first/index.js\");\nconst filterObject = __webpack_require__(/*! filter-obj */ \"(app-pages-browser)/./node_modules/filter-obj/index.js\");\nconst isNullOrUndefined = (value)=>value === null || value === undefined;\nconst encodeFragmentIdentifier = Symbol(\"encodeFragmentIdentifier\");\nfunction encoderForArrayFormat(options) {\n    switch(options.arrayFormat){\n        case \"index\":\n            return (key)=>(result, value)=>{\n                    const index = result.length;\n                    if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                        return result;\n                    }\n                    if (value === null) {\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \"[\",\n                                index,\n                                \"]\"\n                            ].join(\"\")\n                        ];\n                    }\n                    return [\n                        ...result,\n                        [\n                            encode(key, options),\n                            \"[\",\n                            encode(index, options),\n                            \"]=\",\n                            encode(value, options)\n                        ].join(\"\")\n                    ];\n                };\n        case \"bracket\":\n            return (key)=>(result, value)=>{\n                    if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                        return result;\n                    }\n                    if (value === null) {\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \"[]\"\n                            ].join(\"\")\n                        ];\n                    }\n                    return [\n                        ...result,\n                        [\n                            encode(key, options),\n                            \"[]=\",\n                            encode(value, options)\n                        ].join(\"\")\n                    ];\n                };\n        case \"colon-list-separator\":\n            return (key)=>(result, value)=>{\n                    if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                        return result;\n                    }\n                    if (value === null) {\n                        return [\n                            ...result,\n                            [\n                                encode(key, options),\n                                \":list=\"\n                            ].join(\"\")\n                        ];\n                    }\n                    return [\n                        ...result,\n                        [\n                            encode(key, options),\n                            \":list=\",\n                            encode(value, options)\n                        ].join(\"\")\n                    ];\n                };\n        case \"comma\":\n        case \"separator\":\n        case \"bracket-separator\":\n            {\n                const keyValueSep = options.arrayFormat === \"bracket-separator\" ? \"[]=\" : \"=\";\n                return (key)=>(result, value)=>{\n                        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                            return result;\n                        }\n                        // Translate null to an empty string so that it doesn't serialize as 'null'\n                        value = value === null ? \"\" : value;\n                        if (result.length === 0) {\n                            return [\n                                [\n                                    encode(key, options),\n                                    keyValueSep,\n                                    encode(value, options)\n                                ].join(\"\")\n                            ];\n                        }\n                        return [\n                            [\n                                result,\n                                encode(value, options)\n                            ].join(options.arrayFormatSeparator)\n                        ];\n                    };\n            }\n        default:\n            return (key)=>(result, value)=>{\n                    if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === \"\") {\n                        return result;\n                    }\n                    if (value === null) {\n                        return [\n                            ...result,\n                            encode(key, options)\n                        ];\n                    }\n                    return [\n                        ...result,\n                        [\n                            encode(key, options),\n                            \"=\",\n                            encode(value, options)\n                        ].join(\"\")\n                    ];\n                };\n    }\n}\nfunction parserForArrayFormat(options) {\n    let result;\n    switch(options.arrayFormat){\n        case \"index\":\n            return (key, value, accumulator)=>{\n                result = /\\[(\\d*)\\]$/.exec(key);\n                key = key.replace(/\\[\\d*\\]$/, \"\");\n                if (!result) {\n                    accumulator[key] = value;\n                    return;\n                }\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = {};\n                }\n                accumulator[key][result[1]] = value;\n            };\n        case \"bracket\":\n            return (key, value, accumulator)=>{\n                result = /(\\[\\])$/.exec(key);\n                key = key.replace(/\\[\\]$/, \"\");\n                if (!result) {\n                    accumulator[key] = value;\n                    return;\n                }\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = [\n                        value\n                    ];\n                    return;\n                }\n                accumulator[key] = [].concat(accumulator[key], value);\n            };\n        case \"colon-list-separator\":\n            return (key, value, accumulator)=>{\n                result = /(:list)$/.exec(key);\n                key = key.replace(/:list$/, \"\");\n                if (!result) {\n                    accumulator[key] = value;\n                    return;\n                }\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = [\n                        value\n                    ];\n                    return;\n                }\n                accumulator[key] = [].concat(accumulator[key], value);\n            };\n        case \"comma\":\n        case \"separator\":\n            return (key, value, accumulator)=>{\n                const isArray = typeof value === \"string\" && value.includes(options.arrayFormatSeparator);\n                const isEncodedArray = typeof value === \"string\" && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n                value = isEncodedArray ? decode(value, options) : value;\n                const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map((item)=>decode(item, options)) : value === null ? value : decode(value, options);\n                accumulator[key] = newValue;\n            };\n        case \"bracket-separator\":\n            return (key, value, accumulator)=>{\n                const isArray = /(\\[\\])$/.test(key);\n                key = key.replace(/\\[\\]$/, \"\");\n                if (!isArray) {\n                    accumulator[key] = value ? decode(value, options) : value;\n                    return;\n                }\n                const arrayValue = value === null ? [] : value.split(options.arrayFormatSeparator).map((item)=>decode(item, options));\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = arrayValue;\n                    return;\n                }\n                accumulator[key] = [].concat(accumulator[key], arrayValue);\n            };\n        default:\n            return (key, value, accumulator)=>{\n                if (accumulator[key] === undefined) {\n                    accumulator[key] = value;\n                    return;\n                }\n                accumulator[key] = [].concat(accumulator[key], value);\n            };\n    }\n}\nfunction validateArrayFormatSeparator(value) {\n    if (typeof value !== \"string\" || value.length !== 1) {\n        throw new TypeError(\"arrayFormatSeparator must be single character string\");\n    }\n}\nfunction encode(value, options) {\n    if (options.encode) {\n        return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n    }\n    return value;\n}\nfunction decode(value, options) {\n    if (options.decode) {\n        return decodeComponent(value);\n    }\n    return value;\n}\nfunction keysSorter(input) {\n    if (Array.isArray(input)) {\n        return input.sort();\n    }\n    if (typeof input === \"object\") {\n        return keysSorter(Object.keys(input)).sort((a, b)=>Number(a) - Number(b)).map((key)=>input[key]);\n    }\n    return input;\n}\nfunction removeHash(input) {\n    const hashStart = input.indexOf(\"#\");\n    if (hashStart !== -1) {\n        input = input.slice(0, hashStart);\n    }\n    return input;\n}\nfunction getHash(url) {\n    let hash = \"\";\n    const hashStart = url.indexOf(\"#\");\n    if (hashStart !== -1) {\n        hash = url.slice(hashStart);\n    }\n    return hash;\n}\nfunction extract(input) {\n    input = removeHash(input);\n    const queryStart = input.indexOf(\"?\");\n    if (queryStart === -1) {\n        return \"\";\n    }\n    return input.slice(queryStart + 1);\n}\nfunction parseValue(value, options) {\n    if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === \"string\" && value.trim() !== \"\") {\n        value = Number(value);\n    } else if (options.parseBooleans && value !== null && (value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\")) {\n        value = value.toLowerCase() === \"true\";\n    }\n    return value;\n}\nfunction parse(query, options) {\n    options = Object.assign({\n        decode: true,\n        sort: true,\n        arrayFormat: \"none\",\n        arrayFormatSeparator: \",\",\n        parseNumbers: false,\n        parseBooleans: false\n    }, options);\n    validateArrayFormatSeparator(options.arrayFormatSeparator);\n    const formatter = parserForArrayFormat(options);\n    // Create an object with no prototype\n    const ret = Object.create(null);\n    if (typeof query !== \"string\") {\n        return ret;\n    }\n    query = query.trim().replace(/^[?#&]/, \"\");\n    if (!query) {\n        return ret;\n    }\n    for (const param of query.split(\"&\")){\n        if (param === \"\") {\n            continue;\n        }\n        let [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, \" \") : param, \"=\");\n        // Missing `=` should be `null`:\n        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n        value = value === undefined ? null : [\n            \"comma\",\n            \"separator\",\n            \"bracket-separator\"\n        ].includes(options.arrayFormat) ? value : decode(value, options);\n        formatter(decode(key, options), value, ret);\n    }\n    for (const key of Object.keys(ret)){\n        const value = ret[key];\n        if (typeof value === \"object\" && value !== null) {\n            for (const k of Object.keys(value)){\n                value[k] = parseValue(value[k], options);\n            }\n        } else {\n            ret[key] = parseValue(value, options);\n        }\n    }\n    if (options.sort === false) {\n        return ret;\n    }\n    return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key)=>{\n        const value = ret[key];\n        if (Boolean(value) && typeof value === \"object\" && !Array.isArray(value)) {\n            // Sort object keys, not values\n            result[key] = keysSorter(value);\n        } else {\n            result[key] = value;\n        }\n        return result;\n    }, Object.create(null));\n}\nexports.extract = extract;\nexports.parse = parse;\nexports.stringify = (object, options)=>{\n    if (!object) {\n        return \"\";\n    }\n    options = Object.assign({\n        encode: true,\n        strict: true,\n        arrayFormat: \"none\",\n        arrayFormatSeparator: \",\"\n    }, options);\n    validateArrayFormatSeparator(options.arrayFormatSeparator);\n    const shouldFilter = (key)=>options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === \"\";\n    const formatter = encoderForArrayFormat(options);\n    const objectCopy = {};\n    for (const key of Object.keys(object)){\n        if (!shouldFilter(key)) {\n            objectCopy[key] = object[key];\n        }\n    }\n    const keys = Object.keys(objectCopy);\n    if (options.sort !== false) {\n        keys.sort(options.sort);\n    }\n    return keys.map((key)=>{\n        const value = object[key];\n        if (value === undefined) {\n            return \"\";\n        }\n        if (value === null) {\n            return encode(key, options);\n        }\n        if (Array.isArray(value)) {\n            if (value.length === 0 && options.arrayFormat === \"bracket-separator\") {\n                return encode(key, options) + \"[]\";\n            }\n            return value.reduce(formatter(key), []).join(\"&\");\n        }\n        return encode(key, options) + \"=\" + encode(value, options);\n    }).filter((x)=>x.length > 0).join(\"&\");\n};\nexports.parseUrl = (url, options)=>{\n    options = Object.assign({\n        decode: true\n    }, options);\n    const [url_, hash] = splitOnFirst(url, \"#\");\n    return Object.assign({\n        url: url_.split(\"?\")[0] || \"\",\n        query: parse(extract(url), options)\n    }, options && options.parseFragmentIdentifier && hash ? {\n        fragmentIdentifier: decode(hash, options)\n    } : {});\n};\nexports.stringifyUrl = (object, options)=>{\n    options = Object.assign({\n        encode: true,\n        strict: true,\n        [encodeFragmentIdentifier]: true\n    }, options);\n    const url = removeHash(object.url).split(\"?\")[0] || \"\";\n    const queryFromUrl = exports.extract(object.url);\n    const parsedQueryFromUrl = exports.parse(queryFromUrl, {\n        sort: false\n    });\n    const query = Object.assign(parsedQueryFromUrl, object.query);\n    let queryString = exports.stringify(query, options);\n    if (queryString) {\n        queryString = \"?\".concat(queryString);\n    }\n    let hash = getHash(object.url);\n    if (object.fragmentIdentifier) {\n        hash = \"#\".concat(options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier);\n    }\n    return \"\".concat(url).concat(queryString).concat(hash);\n};\nexports.pick = (input, filter, options)=>{\n    options = Object.assign({\n        parseFragmentIdentifier: true,\n        [encodeFragmentIdentifier]: false\n    }, options);\n    const { url, query, fragmentIdentifier } = exports.parseUrl(input, options);\n    return exports.stringifyUrl({\n        url,\n        query: filterObject(query, filter),\n        fragmentIdentifier\n    }, options);\n};\nexports.exclude = (input, filter, options)=>{\n    const exclusionFilter = Array.isArray(filter) ? (key)=>!filter.includes(key) : (key, value)=>!filter(key, value);\n    return exports.pick(input, exclusionFilter, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/node_modules/query-string/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    // Trim off extra bytes after placeholder bytes are found\n    // See: https://github.com/beatgammit/base64-js/issues/42\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    // if there are placeholders, only get up to the last complete 4 chars\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 0xFF;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 0xFF;\n        arr[curByte++] = tmp & 0xFF;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    ;\n    var parts = [];\n    var maxChunkLength = 16383 // must be multiple of 3\n    ;\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + \"=\");\n    }\n    return parts.join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/base64-js/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ /* eslint-disable no-proto */ \nconst base64 = __webpack_require__(/*! base64-js */ \"(app-pages-browser)/./node_modules/base64-js/index.js\");\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"(app-pages-browser)/./node_modules/ieee754/index.js\");\nconst customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" // eslint-disable-line dot-notation\n ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") // eslint-disable-line dot-notation\n : null;\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\nconst K_MAX_LENGTH = 0x7fffffff;\nexports.kMaxLength = K_MAX_LENGTH;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n    console.error(\"This browser lacks typed array (Uint8Array) support which is required by \" + \"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n}\nfunction typedArraySupport() {\n    // Can typed array instances can be augmented?\n    try {\n        const arr = new Uint8Array(1);\n        const proto = {\n            foo: function() {\n                return 42;\n            }\n        };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n    } catch (e) {\n        return false;\n    }\n}\nObject.defineProperty(Buffer.prototype, \"parent\", {\n    enumerable: true,\n    get: function() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.buffer;\n    }\n});\nObject.defineProperty(Buffer.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        if (!Buffer.isBuffer(this)) return undefined;\n        return this.byteOffset;\n    }\n});\nfunction createBuffer(length) {\n    if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    }\n    // Return an augmented `Uint8Array` instance\n    const buf = new Uint8Array(length);\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */ function Buffer(arg, encodingOrOffset, length) {\n    // Common case.\n    if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n            throw new TypeError('The \"string\" argument must be of type string. Received type number');\n        }\n        return allocUnsafe(arg);\n    }\n    return from(arg, encodingOrOffset, length);\n}\n_c = Buffer;\nBuffer.poolSize = 8192 // not used by this implementation\n;\nfunction from(value, encodingOrOffset, length) {\n    if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n    }\n    if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n    }\n    if (value == null) {\n        throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof value);\n    }\n    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof value === \"number\") {\n        throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    }\n    const valueOf = value.valueOf && value.valueOf();\n    if (valueOf != null && valueOf !== value) {\n        return Buffer.from(valueOf, encodingOrOffset, length);\n    }\n    const b = fromObject(value);\n    if (b) return b;\n    if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n    }\n    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/ Buffer.from = function(value, encodingOrOffset, length) {\n    return from(value, encodingOrOffset, length);\n};\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\nObject.setPrototypeOf(Buffer, Uint8Array);\nfunction assertSize(size) {\n    if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n    } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n    }\n}\nfunction alloc(size, fill, encoding) {\n    assertSize(size);\n    if (size <= 0) {\n        return createBuffer(size);\n    }\n    if (fill !== undefined) {\n        // Only pay attention to encoding if it's a string. This\n        // prevents accidentally sending in a number that would\n        // be interpreted as a start offset.\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n    }\n    return createBuffer(size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/ Buffer.alloc = function(size, fill, encoding) {\n    return alloc(size, fill, encoding);\n};\nfunction allocUnsafe(size) {\n    assertSize(size);\n    return createBuffer(size < 0 ? 0 : checked(size) | 0);\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */ Buffer.allocUnsafe = function(size) {\n    return allocUnsafe(size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */ Buffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(size);\n};\nfunction fromString(string, encoding) {\n    if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n    }\n    if (!Buffer.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n    }\n    const length = byteLength(string, encoding) | 0;\n    let buf = createBuffer(length);\n    const actual = buf.write(string, encoding);\n    if (actual !== length) {\n        // Writing a hex string, for example, that contains invalid characters will\n        // cause everything after the first invalid character to be ignored. (e.g.\n        // 'abxxcd' will be treated as 'ab')\n        buf = buf.slice(0, actual);\n    }\n    return buf;\n}\nfunction fromArrayLike(array) {\n    const length = array.length < 0 ? 0 : checked(array.length) | 0;\n    const buf = createBuffer(length);\n    for(let i = 0; i < length; i += 1){\n        buf[i] = array[i] & 255;\n    }\n    return buf;\n}\nfunction fromArrayView(arrayView) {\n    if (isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n    }\n    return fromArrayLike(arrayView);\n}\nfunction fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n    }\n    if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n    }\n    let buf;\n    if (byteOffset === undefined && length === undefined) {\n        buf = new Uint8Array(array);\n    } else if (length === undefined) {\n        buf = new Uint8Array(array, byteOffset);\n    } else {\n        buf = new Uint8Array(array, byteOffset, length);\n    }\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(buf, Buffer.prototype);\n    return buf;\n}\nfunction fromObject(obj) {\n    if (Buffer.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n            return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n    }\n    if (obj.length !== undefined) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n    }\n    if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n    }\n}\nfunction checked(length) {\n    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum \" + \"size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n    }\n    return length | 0;\n}\nfunction SlowBuffer(length) {\n    if (+length != length) {\n        length = 0;\n    }\n    return Buffer.alloc(+length);\n}\n_c1 = SlowBuffer;\nBuffer.isBuffer = function isBuffer(b) {\n    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n    ;\n};\nBuffer.compare = function compare(a, b) {\n    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n        throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    }\n    if (a === b) return 0;\n    let x = a.length;\n    let y = b.length;\n    for(let i = 0, len = Math.min(x, y); i < len; ++i){\n        if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n        }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\nBuffer.isEncoding = function isEncoding(encoding) {\n    switch(String(encoding).toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return true;\n        default:\n            return false;\n    }\n};\nBuffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n    if (list.length === 0) {\n        return Buffer.alloc(0);\n    }\n    let i;\n    if (length === undefined) {\n        length = 0;\n        for(i = 0; i < list.length; ++i){\n            length += list[i].length;\n        }\n    }\n    const buffer = Buffer.allocUnsafe(length);\n    let pos = 0;\n    for(i = 0; i < list.length; ++i){\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n            if (pos + buf.length > buffer.length) {\n                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);\n                buf.copy(buffer, pos);\n            } else {\n                Uint8Array.prototype.set.call(buffer, buf, pos);\n            }\n        } else if (!Buffer.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n            buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n    }\n    return buffer;\n};\nfunction byteLength(string, encoding) {\n    if (Buffer.isBuffer(string)) {\n        return string.length;\n    }\n    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n    }\n    if (typeof string !== \"string\") {\n        throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + \"Received type \" + typeof string);\n    }\n    const len = string.length;\n    const mustMatch = arguments.length > 2 && arguments[2] === true;\n    if (!mustMatch && len === 0) return 0;\n    // Use a for loop to avoid recursion\n    let loweredCase = false;\n    for(;;){\n        switch(encoding){\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return len;\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8ToBytes(string).length;\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return len * 2;\n            case \"hex\":\n                return len >>> 1;\n            case \"base64\":\n                return base64ToBytes(string).length;\n            default:\n                if (loweredCase) {\n                    return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n                    ;\n                }\n                encoding = (\"\" + encoding).toLowerCase();\n                loweredCase = true;\n        }\n    }\n}\nBuffer.byteLength = byteLength;\nfunction slowToString(encoding, start, end) {\n    let loweredCase = false;\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n        start = 0;\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n        return \"\";\n    }\n    if (end === undefined || end > this.length) {\n        end = this.length;\n    }\n    if (end <= 0) {\n        return \"\";\n    }\n    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) {\n        return \"\";\n    }\n    if (!encoding) encoding = \"utf8\";\n    while(true){\n        switch(encoding){\n            case \"hex\":\n                return hexSlice(this, start, end);\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8Slice(this, start, end);\n            case \"ascii\":\n                return asciiSlice(this, start, end);\n            case \"latin1\":\n            case \"binary\":\n                return latin1Slice(this, start, end);\n            case \"base64\":\n                return base64Slice(this, start, end);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return utf16leSlice(this, start, end);\n            default:\n                if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                encoding = (encoding + \"\").toLowerCase();\n                loweredCase = true;\n        }\n    }\n}\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true;\nfunction swap(b, n, m) {\n    const i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n}\nBuffer.prototype.swap16 = function swap16() {\n    const len = this.length;\n    if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    }\n    for(let i = 0; i < len; i += 2){\n        swap(this, i, i + 1);\n    }\n    return this;\n};\nBuffer.prototype.swap32 = function swap32() {\n    const len = this.length;\n    if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    }\n    for(let i = 0; i < len; i += 4){\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n    }\n    return this;\n};\nBuffer.prototype.swap64 = function swap64() {\n    const len = this.length;\n    if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    }\n    for(let i = 0; i < len; i += 8){\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n    }\n    return this;\n};\nBuffer.prototype.toString = function toString() {\n    const length = this.length;\n    if (length === 0) return \"\";\n    if (arguments.length === 0) return utf8Slice(this, 0, length);\n    return slowToString.apply(this, arguments);\n};\nBuffer.prototype.toLocaleString = Buffer.prototype.toString;\nBuffer.prototype.equals = function equals(b) {\n    if (!Buffer.isBuffer(b)) throw new TypeError(\"Argument must be a Buffer\");\n    if (this === b) return true;\n    return Buffer.compare(this, b) === 0;\n};\nBuffer.prototype.inspect = function inspect() {\n    let str = \"\";\n    const max = exports.INSPECT_MAX_BYTES;\n    str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n    if (this.length > max) str += \" ... \";\n    return \"<Buffer \" + str + \">\";\n};\nif (customInspectSymbol) {\n    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n}\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n    if (isInstance(target, Uint8Array)) {\n        target = Buffer.from(target, target.offset, target.byteLength);\n    }\n    if (!Buffer.isBuffer(target)) {\n        throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + \"Received type \" + typeof target);\n    }\n    if (start === undefined) {\n        start = 0;\n    }\n    if (end === undefined) {\n        end = target ? target.length : 0;\n    }\n    if (thisStart === undefined) {\n        thisStart = 0;\n    }\n    if (thisEnd === undefined) {\n        thisEnd = this.length;\n    }\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n    }\n    if (thisStart >= thisEnd && start >= end) {\n        return 0;\n    }\n    if (thisStart >= thisEnd) {\n        return -1;\n    }\n    if (start >= end) {\n        return 1;\n    }\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) return 0;\n    let x = thisEnd - thisStart;\n    let y = end - start;\n    const len = Math.min(x, y);\n    const thisCopy = this.slice(thisStart, thisEnd);\n    const targetCopy = target.slice(start, end);\n    for(let i = 0; i < len; ++i){\n        if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n        }\n    }\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n};\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1;\n    // Normalize byteOffset\n    if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n        byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n        byteOffset = -0x80000000;\n    }\n    byteOffset = +byteOffset // Coerce to Number.\n    ;\n    if (numberIsNaN(byteOffset)) {\n        // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n        byteOffset = dir ? 0 : buffer.length - 1;\n    }\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1;\n        else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0;\n        else return -1;\n    }\n    // Normalize val\n    if (typeof val === \"string\") {\n        val = Buffer.from(val, encoding);\n    }\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (Buffer.isBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) {\n            return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    } else if (typeof val === \"number\") {\n        val = val & 0xFF // Search for a byte value [0-255]\n        ;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n            if (dir) {\n                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n        }\n        return arrayIndexOf(buffer, [\n            val\n        ], byteOffset, encoding, dir);\n    }\n    throw new TypeError(\"val must be string, number or Buffer\");\n}\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    let indexSize = 1;\n    let arrLength = arr.length;\n    let valLength = val.length;\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n            if (arr.length < 2 || val.length < 2) {\n                return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n        }\n    }\n    function read(buf, i) {\n        if (indexSize === 1) {\n            return buf[i];\n        } else {\n            return buf.readUInt16BE(i * indexSize);\n        }\n    }\n    let i;\n    if (dir) {\n        let foundIndex = -1;\n        for(i = byteOffset; i < arrLength; i++){\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                if (foundIndex === -1) foundIndex = i;\n                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n            } else {\n                if (foundIndex !== -1) i -= i - foundIndex;\n                foundIndex = -1;\n            }\n        }\n    } else {\n        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n        for(i = byteOffset; i >= 0; i--){\n            let found = true;\n            for(let j = 0; j < valLength; j++){\n                if (read(arr, i + j) !== read(val, j)) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return i;\n        }\n    }\n    return -1;\n}\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n};\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\nfunction hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    const remaining = buf.length - offset;\n    if (!length) {\n        length = remaining;\n    } else {\n        length = Number(length);\n        if (length > remaining) {\n            length = remaining;\n        }\n    }\n    const strLen = string.length;\n    if (length > strLen / 2) {\n        length = strLen / 2;\n    }\n    let i;\n    for(i = 0; i < length; ++i){\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed)) return i;\n        buf[offset + i] = parsed;\n    }\n    return i;\n}\nfunction utf8Write(buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\nfunction asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\nfunction base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\nfunction ucs2Write(buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = \"utf8\";\n        } else {\n            encoding = length;\n            length = undefined;\n        }\n    } else {\n        throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n    }\n    const remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n    }\n    if (!encoding) encoding = \"utf8\";\n    let loweredCase = false;\n    for(;;){\n        switch(encoding){\n            case \"hex\":\n                return hexWrite(this, string, offset, length);\n            case \"utf8\":\n            case \"utf-8\":\n                return utf8Write(this, string, offset, length);\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n                return asciiWrite(this, string, offset, length);\n            case \"base64\":\n                // Warning: maxLength not taken into account in base64Write\n                return base64Write(this, string, offset, length);\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n                return ucs2Write(this, string, offset, length);\n            default:\n                if (loweredCase) throw new TypeError(\"Unknown encoding: \" + encoding);\n                encoding = (\"\" + encoding).toLowerCase();\n                loweredCase = true;\n        }\n    }\n};\nBuffer.prototype.toJSON = function toJSON() {\n    return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nfunction base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n    } else {\n        return base64.fromByteArray(buf.slice(start, end));\n    }\n}\nfunction utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    const res = [];\n    let i = start;\n    while(i < end){\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n            let secondByte, thirdByte, fourthByte, tempCodePoint;\n            switch(bytesPerSequence){\n                case 1:\n                    if (firstByte < 0x80) {\n                        codePoint = firstByte;\n                    }\n                    break;\n                case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                        if (tempCodePoint > 0x7F) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n                    break;\n                case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                            codePoint = tempCodePoint;\n                        }\n                    }\n            }\n        }\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n        } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n    }\n    return decodeCodePointsArray(res);\n}\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction decodeCodePointsArray(codePoints) {\n    const len = codePoints.length;\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n        ;\n    }\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    let res = \"\";\n    let i = 0;\n    while(i < len){\n        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n    }\n    return res;\n}\nfunction asciiSlice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i){\n        ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n    return ret;\n}\nfunction latin1Slice(buf, start, end) {\n    let ret = \"\";\n    end = Math.min(buf.length, end);\n    for(let i = start; i < end; ++i){\n        ret += String.fromCharCode(buf[i]);\n    }\n    return ret;\n}\nfunction hexSlice(buf, start, end) {\n    const len = buf.length;\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n    let out = \"\";\n    for(let i = start; i < end; ++i){\n        out += hexSliceLookupTable[buf[i]];\n    }\n    return out;\n}\nfunction utf16leSlice(buf, start, end) {\n    const bytes = buf.slice(start, end);\n    let res = \"\";\n    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n    for(let i = 0; i < bytes.length - 1; i += 2){\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n    return res;\n}\nBuffer.prototype.slice = function slice(start, end) {\n    const len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n    if (start < 0) {\n        start += len;\n        if (start < 0) start = 0;\n    } else if (start > len) {\n        start = len;\n    }\n    if (end < 0) {\n        end += len;\n        if (end < 0) end = 0;\n    } else if (end > len) {\n        end = len;\n    }\n    if (end < start) end = start;\n    const newBuf = this.subarray(start, end);\n    // Return an augmented `Uint8Array` instance\n    Object.setPrototypeOf(newBuf, Buffer.prototype);\n    return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */ function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) throw new RangeError(\"offset is not uint\");\n    if (offset + ext > length) throw new RangeError(\"Trying to access beyond buffer length\");\n}\nBuffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100)){\n        val += this[offset + i] * mul;\n    }\n    return val;\n};\nBuffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        checkOffset(offset, byteLength, this.length);\n    }\n    let val = this[offset + --byteLength];\n    let mul = 1;\n    while(byteLength > 0 && (mul *= 0x100)){\n        val += this[offset + --byteLength] * mul;\n    }\n    return val;\n};\nBuffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset];\n};\nBuffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n};\nBuffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n};\nBuffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\nBuffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n    return BigInt(lo) + (BigInt(hi) << BigInt(32));\n});\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n    return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n});\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let val = this[offset];\n    let mul = 1;\n    let i = 0;\n    while(++i < byteLength && (mul *= 0x100)){\n        val += this[offset + i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n    let i = byteLength;\n    let mul = 1;\n    let val = this[offset + --i];\n    while(i > 0 && (mul *= 0x100)){\n        val += this[offset + --i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n    return val;\n};\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return this[offset];\n    return (0xff - this[offset] + 1) * -1;\n};\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset] | this[offset + 1] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    const val = this[offset + 1] | this[offset] << 8;\n    return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow\n    );\n    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n});\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n    offset = offset >>> 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset];\n    const last = this[offset + 7];\n    if (first === undefined || last === undefined) {\n        boundsError(offset, this.length - 8);\n    }\n    const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n});\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, true, 23, 4);\n};\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, false, 23, 4);\n};\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, true, 52, 8);\n};\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    offset = offset >>> 0;\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, false, 52, 8);\n};\nfunction checkInt(buf, value, offset, ext, max, min) {\n    if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n}\nBuffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let mul = 1;\n    let i = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength) - 1;\n        checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        this[offset + i] = value / mul & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nfunction wrtBigUInt64LE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    lo = lo >> 8;\n    buf[offset++] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    hi = hi >> 8;\n    buf[offset++] = hi;\n    return offset;\n}\nfunction wrtBigUInt64BE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    let lo = Number(value & BigInt(0xffffffff));\n    buf[offset + 7] = lo;\n    lo = lo >> 8;\n    buf[offset + 6] = lo;\n    lo = lo >> 8;\n    buf[offset + 5] = lo;\n    lo = lo >> 8;\n    buf[offset + 4] = lo;\n    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));\n    buf[offset + 3] = hi;\n    hi = hi >> 8;\n    buf[offset + 2] = hi;\n    hi = hi >> 8;\n    buf[offset + 1] = hi;\n    hi = hi >> 8;\n    buf[offset] = hi;\n    return offset + 8;\n}\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n});\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    this[offset] = value & 0xFF;\n    while(++i < byteLength && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength - 1);\n        checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    this[offset + i] = value & 0xFF;\n    while(--i >= 0 && (mul *= 0x100)){\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n};\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = value & 0xff;\n    return offset + 1;\n};\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n};\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n    return offset + 2;\n};\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n};\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n    return offset + 4;\n};\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value) {\n    let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n});\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError(\"Index out of range\");\n    if (offset < 0) throw new RangeError(\"Index out of range\");\n}\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n    }\n    ieee754.write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n}\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert);\n};\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset = offset >>> 0;\n    if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n    }\n    ieee754.write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n}\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert);\n};\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert);\n};\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!Buffer.isBuffer(target)) throw new TypeError(\"argument should be a Buffer\");\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n    // Copy 0 bytes; we're done\n    if (end === start) return 0;\n    if (target.length === 0 || this.length === 0) return 0;\n    // Fatal error conditions\n    if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n    }\n    if (start < 0 || start >= this.length) throw new RangeError(\"Index out of range\");\n    if (end < 0) throw new RangeError(\"sourceEnd out of bounds\");\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n    }\n    const len = end - start;\n    if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        // Use built-in when available, missing from IE11\n        this.copyWithin(targetStart, start, end);\n    } else {\n        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    }\n    return len;\n};\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n            encoding = start;\n            start = 0;\n            end = this.length;\n        } else if (typeof end === \"string\") {\n            encoding = end;\n            end = this.length;\n        }\n        if (encoding !== undefined && typeof encoding !== \"string\") {\n            throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer.isEncoding(encoding)) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n            const code = val.charCodeAt(0);\n            if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n                // Fast path: If `val` fits into a single byte, use that numeric value.\n                val = code;\n            }\n        }\n    } else if (typeof val === \"number\") {\n        val = val & 255;\n    } else if (typeof val === \"boolean\") {\n        val = Number(val);\n    }\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n    }\n    if (end <= start) {\n        return this;\n    }\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n    if (!val) val = 0;\n    let i;\n    if (typeof val === \"number\") {\n        for(i = start; i < end; ++i){\n            this[i] = val;\n        }\n    } else {\n        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) {\n            throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for(i = 0; i < end - start; ++i){\n            this[i + start] = bytes[i % len];\n        }\n    }\n    return this;\n};\n// CUSTOM ERRORS\n// =============\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {};\nfunction E(sym, getMessage, Base) {\n    errors[sym] = class NodeError extends Base {\n        get code() {\n            return sym;\n        }\n        set code(value) {\n            Object.defineProperty(this, \"code\", {\n                configurable: true,\n                enumerable: true,\n                value,\n                writable: true\n            });\n        }\n        toString() {\n            return \"\".concat(this.name, \" [\").concat(sym, \"]: \").concat(this.message);\n        }\n        constructor(){\n            super();\n            Object.defineProperty(this, \"message\", {\n                value: getMessage.apply(this, arguments),\n                writable: true,\n                configurable: true\n            });\n            // Add the error code to the name to include it in the stack trace.\n            this.name = \"\".concat(this.name, \" [\").concat(sym, \"]\");\n            // Access the stack to generate the error message including the error code\n            // from the name.\n            this.stack // eslint-disable-line no-unused-expressions\n            ;\n            // Reset the name to the actual name.\n            delete this.name;\n        }\n    };\n}\n_c2 = E;\nE(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(name) {\n    if (name) {\n        return \"\".concat(name, \" is outside of buffer bounds\");\n    }\n    return \"Attempt to access memory outside buffer bounds\";\n}, RangeError);\nE(\"ERR_INVALID_ARG_TYPE\", function(name, actual) {\n    return 'The \"'.concat(name, '\" argument must be of type number. Received type ').concat(typeof actual);\n}, TypeError);\nE(\"ERR_OUT_OF_RANGE\", function(str, range, input) {\n    let msg = 'The value of \"'.concat(str, '\" is out of range.');\n    let received = input;\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n        received = addNumericalSeparator(String(input));\n    } else if (typeof input === \"bigint\") {\n        received = String(input);\n        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n            received = addNumericalSeparator(received);\n        }\n        received += \"n\";\n    }\n    msg += \" It must be \".concat(range, \". Received \").concat(received);\n    return msg;\n}, RangeError);\nfunction addNumericalSeparator(val) {\n    let res = \"\";\n    let i = val.length;\n    const start = val[0] === \"-\" ? 1 : 0;\n    for(; i >= start + 4; i -= 3){\n        res = \"_\".concat(val.slice(i - 3, i)).concat(res);\n    }\n    return \"\".concat(val.slice(0, i)).concat(res);\n}\n// CHECK FUNCTIONS\n// ===============\nfunction checkBounds(buf, offset, byteLength) {\n    validateNumber(offset, \"offset\");\n    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n        boundsError(offset, buf.length - (byteLength + 1));\n    }\n}\nfunction checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n        const n = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        if (byteLength > 3) {\n            if (min === 0 || min === BigInt(0)) {\n                range = \">= 0\".concat(n, \" and < 2\").concat(n, \" ** \").concat((byteLength + 1) * 8).concat(n);\n            } else {\n                range = \">= -(2\".concat(n, \" ** \").concat((byteLength + 1) * 8 - 1).concat(n, \") and < 2 ** \") + \"\".concat((byteLength + 1) * 8 - 1).concat(n);\n            }\n        } else {\n            range = \">= \".concat(min).concat(n, \" and <= \").concat(max).concat(n);\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n    }\n    checkBounds(buf, offset, byteLength);\n}\nfunction validateNumber(value, name) {\n    if (typeof value !== \"number\") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    }\n}\nfunction boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n    }\n    if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    }\n    throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \">= \".concat(type ? 1 : 0, \" and <= \").concat(length), value);\n}\n// HELPER FUNCTIONS\n// ================\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\nfunction base64clean(str) {\n    // Node takes equal signs as end of the Base64 encoding\n    str = str.split(\"=\")[0];\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = str.trim().replace(INVALID_BASE64_RE, \"\");\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return \"\";\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while(str.length % 4 !== 0){\n        str = str + \"=\";\n    }\n    return str;\n}\nfunction utf8ToBytes(string, units) {\n    units = units || Infinity;\n    let codePoint;\n    const length = string.length;\n    let leadSurrogate = null;\n    const bytes = [];\n    for(let i = 0; i < length; ++i){\n        codePoint = string.charCodeAt(i);\n        // is surrogate component\n        if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                }\n                // valid lead\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // 2 leads in a row\n            if (codePoint < 0xDC00) {\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                leadSurrogate = codePoint;\n                continue;\n            }\n            // valid surrogate pair\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n        } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        }\n        leadSurrogate = null;\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n        } else {\n            throw new Error(\"Invalid code point\");\n        }\n    }\n    return bytes;\n}\nfunction asciiToBytes(str) {\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i){\n        // Node's code seems to be doing this and not & 0x7F..\n        byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n    return byteArray;\n}\nfunction utf16leToBytes(str, units) {\n    let c, hi, lo;\n    const byteArray = [];\n    for(let i = 0; i < str.length; ++i){\n        if ((units -= 2) < 0) break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n    }\n    return byteArray;\n}\nfunction base64ToBytes(str) {\n    return base64.toByteArray(base64clean(str));\n}\nfunction blitBuffer(src, dst, offset, length) {\n    let i;\n    for(i = 0; i < length; ++i){\n        if (i + offset >= dst.length || i >= src.length) break;\n        dst[i + offset] = src[i];\n    }\n    return i;\n}\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n}\nfunction numberIsNaN(obj) {\n    // For IE11 support\n    return obj !== obj // eslint-disable-line no-self-compare\n    ;\n}\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = function() {\n    const alphabet = \"0123456789abcdef\";\n    const table = new Array(256);\n    for(let i = 0; i < 16; ++i){\n        const i16 = i * 16;\n        for(let j = 0; j < 16; ++j){\n            table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n    }\n    return table;\n}();\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod(fn) {\n    return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n}\nfunction BufferBigIntNotDefined() {\n    throw new Error(\"BigInt not supported\");\n}\n_c3 = BufferBigIntNotDefined;\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"Buffer\");\n$RefreshReg$(_c1, \"SlowBuffer\");\n$RefreshReg$(_c2, \"E\");\n$RefreshReg$(_c3, \"BufferBigIntNotDefined\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/buffer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar global = typeof self !== \"undefined\" ? self : void 0;\nvar __self__ = function() {\n    function F() {\n        this.fetch = false;\n        this.DOMException = global.DOMException;\n    }\n    F.prototype = global;\n    return new F();\n}();\n(function(self1) {\n    var irrelevant = function(exports1) {\n        var support = {\n            searchParams: \"URLSearchParams\" in self1,\n            iterable: \"Symbol\" in self1 && \"iterator\" in Symbol,\n            blob: \"FileReader\" in self1 && \"Blob\" in self1 && function() {\n                try {\n                    new Blob();\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }(),\n            formData: \"FormData\" in self1,\n            arrayBuffer: \"ArrayBuffer\" in self1\n        };\n        function isDataView(obj) {\n            return obj && DataView.prototype.isPrototypeOf(obj);\n        }\n        if (support.arrayBuffer) {\n            var viewClasses = [\n                \"[object Int8Array]\",\n                \"[object Uint8Array]\",\n                \"[object Uint8ClampedArray]\",\n                \"[object Int16Array]\",\n                \"[object Uint16Array]\",\n                \"[object Int32Array]\",\n                \"[object Uint32Array]\",\n                \"[object Float32Array]\",\n                \"[object Float64Array]\"\n            ];\n            var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n            };\n        }\n        function normalizeName(name) {\n            if (typeof name !== \"string\") {\n                name = String(name);\n            }\n            if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n                throw new TypeError(\"Invalid character in header field name\");\n            }\n            return name.toLowerCase();\n        }\n        function normalizeValue(value) {\n            if (typeof value !== \"string\") {\n                value = String(value);\n            }\n            return value;\n        }\n        // Build a destructive iterator for the value list\n        function iteratorFor(items) {\n            var iterator = {\n                next: function() {\n                    var value = items.shift();\n                    return {\n                        done: value === undefined,\n                        value: value\n                    };\n                }\n            };\n            if (support.iterable) {\n                iterator[Symbol.iterator] = function() {\n                    return iterator;\n                };\n            }\n            return iterator;\n        }\n        function Headers(headers) {\n            this.map = {};\n            if (headers instanceof Headers) {\n                headers.forEach(function(value, name) {\n                    this.append(name, value);\n                }, this);\n            } else if (Array.isArray(headers)) {\n                headers.forEach(function(header) {\n                    this.append(header[0], header[1]);\n                }, this);\n            } else if (headers) {\n                Object.getOwnPropertyNames(headers).forEach(function(name) {\n                    this.append(name, headers[name]);\n                }, this);\n            }\n        }\n        Headers.prototype.append = function(name, value) {\n            name = normalizeName(name);\n            value = normalizeValue(value);\n            var oldValue = this.map[name];\n            this.map[name] = oldValue ? oldValue + \", \" + value : value;\n        };\n        Headers.prototype[\"delete\"] = function(name) {\n            delete this.map[normalizeName(name)];\n        };\n        Headers.prototype.get = function(name) {\n            name = normalizeName(name);\n            return this.has(name) ? this.map[name] : null;\n        };\n        Headers.prototype.has = function(name) {\n            return this.map.hasOwnProperty(normalizeName(name));\n        };\n        Headers.prototype.set = function(name, value) {\n            this.map[normalizeName(name)] = normalizeValue(value);\n        };\n        Headers.prototype.forEach = function(callback, thisArg) {\n            for(var name in this.map){\n                if (this.map.hasOwnProperty(name)) {\n                    callback.call(thisArg, this.map[name], name, this);\n                }\n            }\n        };\n        Headers.prototype.keys = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push(name);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.values = function() {\n            var items = [];\n            this.forEach(function(value) {\n                items.push(value);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.entries = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push([\n                    name,\n                    value\n                ]);\n            });\n            return iteratorFor(items);\n        };\n        if (support.iterable) {\n            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n        }\n        function consumed(body) {\n            if (body.bodyUsed) {\n                return Promise.reject(new TypeError(\"Already read\"));\n            }\n            body.bodyUsed = true;\n        }\n        function fileReaderReady(reader) {\n            return new Promise(function(resolve, reject) {\n                reader.onload = function() {\n                    resolve(reader.result);\n                };\n                reader.onerror = function() {\n                    reject(reader.error);\n                };\n            });\n        }\n        function readBlobAsArrayBuffer(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsArrayBuffer(blob);\n            return promise;\n        }\n        function readBlobAsText(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsText(blob);\n            return promise;\n        }\n        function readArrayBufferAsText(buf) {\n            var view = new Uint8Array(buf);\n            var chars = new Array(view.length);\n            for(var i = 0; i < view.length; i++){\n                chars[i] = String.fromCharCode(view[i]);\n            }\n            return chars.join(\"\");\n        }\n        function bufferClone(buf) {\n            if (buf.slice) {\n                return buf.slice(0);\n            } else {\n                var view = new Uint8Array(buf.byteLength);\n                view.set(new Uint8Array(buf));\n                return view.buffer;\n            }\n        }\n        function Body() {\n            this.bodyUsed = false;\n            this._initBody = function(body) {\n                this._bodyInit = body;\n                if (!body) {\n                    this._bodyText = \"\";\n                } else if (typeof body === \"string\") {\n                    this._bodyText = body;\n                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n                    this._bodyBlob = body;\n                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n                    this._bodyFormData = body;\n                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                    this._bodyText = body.toString();\n                } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n                    this._bodyArrayBuffer = bufferClone(body.buffer);\n                    // IE 10-11 can't handle a DataView body.\n                    this._bodyInit = new Blob([\n                        this._bodyArrayBuffer\n                    ]);\n                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n                    this._bodyArrayBuffer = bufferClone(body);\n                } else {\n                    this._bodyText = body = Object.prototype.toString.call(body);\n                }\n                if (!this.headers.get(\"content-type\")) {\n                    if (typeof body === \"string\") {\n                        this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n                    } else if (this._bodyBlob && this._bodyBlob.type) {\n                        this.headers.set(\"content-type\", this._bodyBlob.type);\n                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                        this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n                    }\n                }\n            };\n            if (support.blob) {\n                this.blob = function() {\n                    var rejected = consumed(this);\n                    if (rejected) {\n                        return rejected;\n                    }\n                    if (this._bodyBlob) {\n                        return Promise.resolve(this._bodyBlob);\n                    } else if (this._bodyArrayBuffer) {\n                        return Promise.resolve(new Blob([\n                            this._bodyArrayBuffer\n                        ]));\n                    } else if (this._bodyFormData) {\n                        throw new Error(\"could not read FormData body as blob\");\n                    } else {\n                        return Promise.resolve(new Blob([\n                            this._bodyText\n                        ]));\n                    }\n                };\n                this.arrayBuffer = function() {\n                    if (this._bodyArrayBuffer) {\n                        return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n                    } else {\n                        return this.blob().then(readBlobAsArrayBuffer);\n                    }\n                };\n            }\n            this.text = function() {\n                var rejected = consumed(this);\n                if (rejected) {\n                    return rejected;\n                }\n                if (this._bodyBlob) {\n                    return readBlobAsText(this._bodyBlob);\n                } else if (this._bodyArrayBuffer) {\n                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n                } else if (this._bodyFormData) {\n                    throw new Error(\"could not read FormData body as text\");\n                } else {\n                    return Promise.resolve(this._bodyText);\n                }\n            };\n            if (support.formData) {\n                this.formData = function() {\n                    return this.text().then(decode);\n                };\n            }\n            this.json = function() {\n                return this.text().then(JSON.parse);\n            };\n            return this;\n        }\n        // HTTP methods whose capitalization should be normalized\n        var methods = [\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"OPTIONS\",\n            \"POST\",\n            \"PUT\"\n        ];\n        function normalizeMethod(method) {\n            var upcased = method.toUpperCase();\n            return methods.indexOf(upcased) > -1 ? upcased : method;\n        }\n        function Request(input, options) {\n            options = options || {};\n            var body = options.body;\n            if (input instanceof Request) {\n                if (input.bodyUsed) {\n                    throw new TypeError(\"Already read\");\n                }\n                this.url = input.url;\n                this.credentials = input.credentials;\n                if (!options.headers) {\n                    this.headers = new Headers(input.headers);\n                }\n                this.method = input.method;\n                this.mode = input.mode;\n                this.signal = input.signal;\n                if (!body && input._bodyInit != null) {\n                    body = input._bodyInit;\n                    input.bodyUsed = true;\n                }\n            } else {\n                this.url = String(input);\n            }\n            this.credentials = options.credentials || this.credentials || \"same-origin\";\n            if (options.headers || !this.headers) {\n                this.headers = new Headers(options.headers);\n            }\n            this.method = normalizeMethod(options.method || this.method || \"GET\");\n            this.mode = options.mode || this.mode || null;\n            this.signal = options.signal || this.signal;\n            this.referrer = null;\n            if ((this.method === \"GET\" || this.method === \"HEAD\") && body) {\n                throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n            }\n            this._initBody(body);\n        }\n        Request.prototype.clone = function() {\n            return new Request(this, {\n                body: this._bodyInit\n            });\n        };\n        function decode(body) {\n            var form = new FormData();\n            body.trim().split(\"&\").forEach(function(bytes) {\n                if (bytes) {\n                    var split = bytes.split(\"=\");\n                    var name = split.shift().replace(/\\+/g, \" \");\n                    var value = split.join(\"=\").replace(/\\+/g, \" \");\n                    form.append(decodeURIComponent(name), decodeURIComponent(value));\n                }\n            });\n            return form;\n        }\n        function parseHeaders(rawHeaders) {\n            var headers = new Headers();\n            // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n            // https://tools.ietf.org/html/rfc7230#section-3.2\n            var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, \" \");\n            preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n                var parts = line.split(\":\");\n                var key = parts.shift().trim();\n                if (key) {\n                    var value = parts.join(\":\").trim();\n                    headers.append(key, value);\n                }\n            });\n            return headers;\n        }\n        Body.call(Request.prototype);\n        function Response(bodyInit, options) {\n            if (!options) {\n                options = {};\n            }\n            this.type = \"default\";\n            this.status = options.status === undefined ? 200 : options.status;\n            this.ok = this.status >= 200 && this.status < 300;\n            this.statusText = \"statusText\" in options ? options.statusText : \"OK\";\n            this.headers = new Headers(options.headers);\n            this.url = options.url || \"\";\n            this._initBody(bodyInit);\n        }\n        Body.call(Response.prototype);\n        Response.prototype.clone = function() {\n            return new Response(this._bodyInit, {\n                status: this.status,\n                statusText: this.statusText,\n                headers: new Headers(this.headers),\n                url: this.url\n            });\n        };\n        Response.error = function() {\n            var response = new Response(null, {\n                status: 0,\n                statusText: \"\"\n            });\n            response.type = \"error\";\n            return response;\n        };\n        var redirectStatuses = [\n            301,\n            302,\n            303,\n            307,\n            308\n        ];\n        Response.redirect = function(url, status) {\n            if (redirectStatuses.indexOf(status) === -1) {\n                throw new RangeError(\"Invalid status code\");\n            }\n            return new Response(null, {\n                status: status,\n                headers: {\n                    location: url\n                }\n            });\n        };\n        exports1.DOMException = self1.DOMException;\n        try {\n            new exports1.DOMException();\n        } catch (err) {\n            exports1.DOMException = function(message, name) {\n                this.message = message;\n                this.name = name;\n                var error = Error(message);\n                this.stack = error.stack;\n            };\n            exports1.DOMException.prototype = Object.create(Error.prototype);\n            exports1.DOMException.prototype.constructor = exports1.DOMException;\n        }\n        function fetch(input, init) {\n            return new Promise(function(resolve, reject) {\n                var request = new Request(input, init);\n                if (request.signal && request.signal.aborted) {\n                    return reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                }\n                var xhr = new XMLHttpRequest();\n                function abortXhr() {\n                    xhr.abort();\n                }\n                xhr.onload = function() {\n                    var options = {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        headers: parseHeaders(xhr.getAllResponseHeaders() || \"\")\n                    };\n                    options.url = \"responseURL\" in xhr ? xhr.responseURL : options.headers.get(\"X-Request-URL\");\n                    var body = \"response\" in xhr ? xhr.response : xhr.responseText;\n                    resolve(new Response(body, options));\n                };\n                xhr.onerror = function() {\n                    reject(new TypeError(\"Network request failed\"));\n                };\n                xhr.ontimeout = function() {\n                    reject(new TypeError(\"Network request failed\"));\n                };\n                xhr.onabort = function() {\n                    reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                };\n                xhr.open(request.method, request.url, true);\n                if (request.credentials === \"include\") {\n                    xhr.withCredentials = true;\n                } else if (request.credentials === \"omit\") {\n                    xhr.withCredentials = false;\n                }\n                if (\"responseType\" in xhr && support.blob) {\n                    xhr.responseType = \"blob\";\n                }\n                request.headers.forEach(function(value, name) {\n                    xhr.setRequestHeader(name, value);\n                });\n                if (request.signal) {\n                    request.signal.addEventListener(\"abort\", abortXhr);\n                    xhr.onreadystatechange = function() {\n                        // DONE (success or failure)\n                        if (xhr.readyState === 4) {\n                            request.signal.removeEventListener(\"abort\", abortXhr);\n                        }\n                    };\n                }\n                xhr.send(typeof request._bodyInit === \"undefined\" ? null : request._bodyInit);\n            });\n        }\n        fetch.polyfill = true;\n        if (!self1.fetch) {\n            self1.fetch = fetch;\n            self1.Headers = Headers;\n            self1.Request = Request;\n            self1.Response = Response;\n        }\n        exports1.Headers = Headers;\n        exports1.Request = Request;\n        exports1.Response = Response;\n        exports1.fetch = fetch;\n        Object.defineProperty(exports1, \"__esModule\", {\n            value: true\n        });\n        return exports1;\n    }({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\n;\nexports[\"default\"] = ctx.fetch // For TypeScript consumers without esModuleInterop.\n;\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\n;\nexports.Headers = ctx.Headers;\nexports.Request = ctx.Request;\nexports.Response = ctx.Response;\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cross-fetch/dist/browser-ponyfill.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? nBytes - 1 : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n    i += d;\n    e = s & (1 << -nBits) - 1;\n    s >>= -nBits;\n    nBits += eLen;\n    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8){}\n    m = e & (1 << -nBits) - 1;\n    e >>= -nBits;\n    nBits += mLen;\n    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8){}\n    if (e === 0) {\n        e = 1 - eBias;\n    } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n    } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n    var i = isLE ? 0 : nBytes - 1;\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n    value = Math.abs(value);\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n        }\n        if (e + eBias >= 1) {\n            value += rt / c;\n        } else {\n            value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n            e++;\n            c /= 2;\n        }\n        if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n        }\n    }\n    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8){}\n    e = e << mLen | m;\n    eLen += mLen;\n    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8){}\n    buffer[offset + i - d] |= s * 128;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHVGQUF1RixHQUN2RkEsWUFBWSxHQUFHLFNBQVVFLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsTUFBTTtJQUN6RCxJQUFJQyxHQUFHQztJQUNQLElBQUlDLE9BQU8sU0FBVSxJQUFLSixPQUFPO0lBQ2pDLElBQUlLLE9BQU8sQ0FBQyxLQUFLRCxJQUFHLElBQUs7SUFDekIsSUFBSUUsUUFBUUQsUUFBUTtJQUNwQixJQUFJRSxRQUFRLENBQUM7SUFDYixJQUFJQyxJQUFJVCxPQUFRRSxTQUFTLElBQUs7SUFDOUIsSUFBSVEsSUFBSVYsT0FBTyxDQUFDLElBQUk7SUFDcEIsSUFBSVcsSUFBSWIsTUFBTSxDQUFDQyxTQUFTVSxFQUFFO0lBRTFCQSxLQUFLQztJQUVMUCxJQUFJUSxJQUFLLENBQUMsS0FBTSxDQUFDSCxLQUFLLElBQUs7SUFDM0JHLE1BQU8sQ0FBQ0g7SUFDUkEsU0FBU0g7SUFDVCxNQUFPRyxRQUFRLEdBQUdMLElBQUksSUFBSyxNQUFPTCxNQUFNLENBQUNDLFNBQVNVLEVBQUUsRUFBRUEsS0FBS0MsR0FBR0YsU0FBUyxFQUFHLENBQUM7SUFFM0VKLElBQUlELElBQUssQ0FBQyxLQUFNLENBQUNLLEtBQUssSUFBSztJQUMzQkwsTUFBTyxDQUFDSztJQUNSQSxTQUFTUDtJQUNULE1BQU9PLFFBQVEsR0FBR0osSUFBSSxJQUFLLE1BQU9OLE1BQU0sQ0FBQ0MsU0FBU1UsRUFBRSxFQUFFQSxLQUFLQyxHQUFHRixTQUFTLEVBQUcsQ0FBQztJQUUzRSxJQUFJTCxNQUFNLEdBQUc7UUFDWEEsSUFBSSxJQUFJSTtJQUNWLE9BQU8sSUFBSUosTUFBTUcsTUFBTTtRQUNyQixPQUFPRixJQUFJUSxNQUFPLENBQUNELElBQUksQ0FBQyxJQUFJLEtBQUtFO0lBQ25DLE9BQU87UUFDTFQsSUFBSUEsSUFBSVUsS0FBS0MsR0FBRyxDQUFDLEdBQUdkO1FBQ3BCRSxJQUFJQSxJQUFJSTtJQUNWO0lBQ0EsT0FBTyxDQUFDSSxJQUFJLENBQUMsSUFBSSxLQUFLUCxJQUFJVSxLQUFLQyxHQUFHLENBQUMsR0FBR1osSUFBSUY7QUFDNUM7QUFFQUwsYUFBYSxHQUFHLFNBQVVFLE1BQU0sRUFBRW1CLEtBQUssRUFBRWxCLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDakUsSUFBSUMsR0FBR0MsR0FBR2M7SUFDVixJQUFJYixPQUFPLFNBQVUsSUFBS0osT0FBTztJQUNqQyxJQUFJSyxPQUFPLENBQUMsS0FBS0QsSUFBRyxJQUFLO0lBQ3pCLElBQUlFLFFBQVFELFFBQVE7SUFDcEIsSUFBSWEsS0FBTWxCLFNBQVMsS0FBS2EsS0FBS0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNRCxLQUFLQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU07SUFDOUQsSUFBSU4sSUFBSVQsT0FBTyxJQUFLRSxTQUFTO0lBQzdCLElBQUlRLElBQUlWLE9BQU8sSUFBSSxDQUFDO0lBQ3BCLElBQUlXLElBQUlNLFFBQVEsS0FBTUEsVUFBVSxLQUFLLElBQUlBLFFBQVEsSUFBSyxJQUFJO0lBRTFEQSxRQUFRSCxLQUFLTSxHQUFHLENBQUNIO0lBRWpCLElBQUlJLE1BQU1KLFVBQVVBLFVBQVVKLFVBQVU7UUFDdENULElBQUlpQixNQUFNSixTQUFTLElBQUk7UUFDdkJkLElBQUlHO0lBQ04sT0FBTztRQUNMSCxJQUFJVyxLQUFLUSxLQUFLLENBQUNSLEtBQUtTLEdBQUcsQ0FBQ04sU0FBU0gsS0FBS1UsR0FBRztRQUN6QyxJQUFJUCxRQUFTQyxDQUFBQSxJQUFJSixLQUFLQyxHQUFHLENBQUMsR0FBRyxDQUFDWixFQUFDLElBQUssR0FBRztZQUNyQ0E7WUFDQWUsS0FBSztRQUNQO1FBQ0EsSUFBSWYsSUFBSUksU0FBUyxHQUFHO1lBQ2xCVSxTQUFTRSxLQUFLRDtRQUNoQixPQUFPO1lBQ0xELFNBQVNFLEtBQUtMLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLElBQUlSO1FBQ2hDO1FBQ0EsSUFBSVUsUUFBUUMsS0FBSyxHQUFHO1lBQ2xCZjtZQUNBZSxLQUFLO1FBQ1A7UUFFQSxJQUFJZixJQUFJSSxTQUFTRCxNQUFNO1lBQ3JCRixJQUFJO1lBQ0pELElBQUlHO1FBQ04sT0FBTyxJQUFJSCxJQUFJSSxTQUFTLEdBQUc7WUFDekJILElBQUksQ0FBQyxRQUFTYyxJQUFLLEtBQUtKLEtBQUtDLEdBQUcsQ0FBQyxHQUFHZDtZQUNwQ0UsSUFBSUEsSUFBSUk7UUFDVixPQUFPO1lBQ0xILElBQUlhLFFBQVFILEtBQUtDLEdBQUcsQ0FBQyxHQUFHUixRQUFRLEtBQUtPLEtBQUtDLEdBQUcsQ0FBQyxHQUFHZDtZQUNqREUsSUFBSTtRQUNOO0lBQ0Y7SUFFQSxNQUFPRixRQUFRLEdBQUdILE1BQU0sQ0FBQ0MsU0FBU1UsRUFBRSxHQUFHTCxJQUFJLE1BQU1LLEtBQUtDLEdBQUdOLEtBQUssS0FBS0gsUUFBUSxFQUFHLENBQUM7SUFFL0VFLElBQUksS0FBTUYsT0FBUUc7SUFDbEJDLFFBQVFKO0lBQ1IsTUFBT0ksT0FBTyxHQUFHUCxNQUFNLENBQUNDLFNBQVNVLEVBQUUsR0FBR04sSUFBSSxNQUFNTSxLQUFLQyxHQUFHUCxLQUFLLEtBQUtFLFFBQVEsRUFBRyxDQUFDO0lBRTlFUCxNQUFNLENBQUNDLFNBQVNVLElBQUlDLEVBQUUsSUFBSUMsSUFBSTtBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz9lYmMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInJlYWQiLCJidWZmZXIiLCJvZmZzZXQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImUiLCJtIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiaSIsImQiLCJzIiwiTmFOIiwiSW5maW5pdHkiLCJNYXRoIiwicG93Iiwid3JpdGUiLCJ2YWx1ZSIsImMiLCJydCIsImFicyIsImlzTmFOIiwiZmxvb3IiLCJsb2ciLCJMTjIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ieee754/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/lodash.isequal/index.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash.isequal/index.js ***!
  \**********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ /** Used as the size to enable large array optimizations. */ \nvar LARGE_ARRAY_SIZE = 200;\n/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;\n/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;\n/** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", asyncTag = \"[object AsyncFunction]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", genTag = \"[object GeneratorFunction]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", nullTag = \"[object Null]\", objectTag = \"[object Object]\", promiseTag = \"[object Promise]\", proxyTag = \"[object Proxy]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", symbolTag = \"[object Symbol]\", undefinedTag = \"[object Undefined]\", weakMapTag = \"[object WeakMap]\";\nvar arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\\d*)$/;\n/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof __webpack_require__.g == \"object\" && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n/** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\n/** Detect free variable `exports`. */ var freeExports =  true && exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && \"object\" == \"object\" && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;\n/** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n    try {\n        return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n    } catch (e) {}\n}();\n/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */ function arrayFilter(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];\n    while(++index < length){\n        var value = array[index];\n        if (predicate(value, index, array)) {\n            result[resIndex++] = value;\n        }\n    }\n    return result;\n}\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */ function arrayPush(array, values) {\n    var index = -1, length = values.length, offset = array.length;\n    while(++index < length){\n        array[offset + index] = values[index];\n    }\n    return array;\n}\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */ function arraySome(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (predicate(array[index], index, array)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */ function baseTimes(n, iteratee) {\n    var index = -1, result = Array(n);\n    while(++index < n){\n        result[index] = iteratee(index);\n    }\n    return result;\n}\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */ function baseUnary(func) {\n    return function(value) {\n        return func(value);\n    };\n}\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function cacheHas(cache, key) {\n    return cache.has(key);\n}\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */ function mapToArray(map) {\n    var index = -1, result = Array(map.size);\n    map.forEach(function(value, key) {\n        result[++index] = [\n            key,\n            value\n        ];\n    });\n    return result;\n}\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */ function overArg(func, transform) {\n    return function(arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */ function setToArray(set) {\n    var index = -1, result = Array(set.size);\n    set.forEach(function(value) {\n        result[++index] = value;\n    });\n    return result;\n}\n/** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;\n/** Used to detect overreaching core-js shims. */ var coreJsData = root[\"__core-js_shared__\"];\n/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";\n}();\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n/** Used to detect if a method is native. */ var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, Symbol = root.Symbol, Uint8Array = root.Uint8Array, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeKeys = overArg(Object.keys, Object);\n/* Built-in method references that are verified to be native. */ var DataView = getNative(root, \"DataView\"), Map = getNative(root, \"Map\"), Promise = getNative(root, \"Promise\"), Set = getNative(root, \"Set\"), WeakMap = getNative(root, \"WeakMap\"), nativeCreate = getNative(Object, \"create\");\n/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);\n/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Hash(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c = Hash;\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function hashClear() {\n    this.__data__ = nativeCreate ? nativeCreate(null) : {};\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n}\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n    }\n    return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n    return this;\n}\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype[\"delete\"] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function ListCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c1 = ListCache;\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function listCacheDelete(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n        data.pop();\n    } else {\n        splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n}\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function listCacheGet(key) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n}\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function listCacheSet(key, value) {\n    var data = this.__data__, index = assocIndexOf(data, key);\n    if (index < 0) {\n        ++this.size;\n        data.push([\n            key,\n            value\n        ]);\n    } else {\n        data[index][1] = value;\n    }\n    return this;\n}\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype[\"delete\"] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function MapCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n_c2 = MapCache;\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n        \"hash\": new Hash,\n        \"map\": new (Map || ListCache),\n        \"string\": new Hash\n    };\n}\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function mapCacheDelete(key) {\n    var result = getMapData(this, key)[\"delete\"](key);\n    this.size -= result ? 1 : 0;\n    return result;\n}\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n}\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n}\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function mapCacheSet(key, value) {\n    var data = getMapData(this, key), size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n}\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype[\"delete\"] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */ function SetCache(values) {\n    var index = -1, length = values == null ? 0 : values.length;\n    this.__data__ = new MapCache;\n    while(++index < length){\n        this.add(values[index]);\n    }\n}\n_c3 = SetCache;\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */ function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n}\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */ function setCacheHas(value) {\n    return this.__data__.has(value);\n}\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n}\n_c4 = Stack;\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */ function stackClear() {\n    this.__data__ = new ListCache;\n    this.size = 0;\n}\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function stackDelete(key) {\n    var data = this.__data__, result = data[\"delete\"](key);\n    this.size = data.size;\n    return result;\n}\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function stackGet(key) {\n    return this.__data__.get(key);\n}\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function stackHas(key) {\n    return this.__data__.has(key);\n}\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */ function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n            pairs.push([\n                key,\n                value\n            ]);\n            this.size = ++data.size;\n            return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n}\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype[\"delete\"] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */ function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\n    for(var key in value){\n        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n        (key == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n        isBuff && (key == \"offset\" || key == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n        isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || // Skip index properties.\n        isIndex(key, length)))) {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function assocIndexOf(array, key) {\n    var length = array.length;\n    while(length--){\n        if (eq(array[length][0], key)) {\n            return length;\n        }\n    }\n    return -1;\n}\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */ function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */ function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n        return true;\n    }\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n        return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;\n    if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n            return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, \"__wrapped__\"), othIsWrapped = othIsObj && hasOwnProperty.call(other, \"__wrapped__\");\n        if (objIsWrapped || othIsWrapped) {\n            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;\n            stack || (stack = new Stack);\n            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n    }\n    if (!isSameTag) {\n        return false;\n    }\n    stack || (stack = new Stack);\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n        return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n}\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */ function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function baseKeys(object) {\n    if (!isPrototype(object)) {\n        return nativeKeys(object);\n    }\n    var result = [];\n    for(var key in Object(object)){\n        if (hasOwnProperty.call(object, key) && key != \"constructor\") {\n            result.push(key);\n        }\n    }\n    return result;\n}\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(array);\n    if (stacked && stack.get(other)) {\n        return stacked == other;\n    }\n    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n    // Ignore non-index properties.\n    while(++index < arrLength){\n        var arrValue = array[index], othValue = other[index];\n        if (customizer) {\n            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n            if (compared) {\n                continue;\n            }\n            result = false;\n            break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n            if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                    return seen.push(othIndex);\n                }\n            })) {\n                result = false;\n                break;\n            }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            result = false;\n            break;\n        }\n    }\n    stack[\"delete\"](array);\n    stack[\"delete\"](other);\n    return result;\n}\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch(tag){\n        case dataViewTag:\n            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n                return false;\n            }\n            object = object.buffer;\n            other = other.buffer;\n        case arrayBufferTag:\n            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n                return false;\n            }\n            return true;\n        case boolTag:\n        case dateTag:\n        case numberTag:\n            // Coerce booleans to `1` or `0` and dates to milliseconds.\n            // Invalid dates are coerced to `NaN`.\n            return eq(+object, +other);\n        case errorTag:\n            return object.name == other.name && object.message == other.message;\n        case regexpTag:\n        case stringTag:\n            // Coerce regexes to strings and treat strings, primitives and objects,\n            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n            // for more details.\n            return object == other + \"\";\n        case mapTag:\n            var convert = mapToArray;\n        case setTag:\n            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n            convert || (convert = setToArray);\n            if (object.size != other.size && !isPartial) {\n                return false;\n            }\n            // Assume cyclic values are equal.\n            var stacked = stack.get(object);\n            if (stacked) {\n                return stacked == other;\n            }\n            bitmask |= COMPARE_UNORDERED_FLAG;\n            // Recursively compare objects (susceptible to call stack limits).\n            stack.set(object, other);\n            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n            stack[\"delete\"](object);\n            return result;\n        case symbolTag:\n            if (symbolValueOf) {\n                return symbolValueOf.call(object) == symbolValueOf.call(other);\n            }\n    }\n    return false;\n}\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;\n    if (objLength != othLength && !isPartial) {\n        return false;\n    }\n    var index = objLength;\n    while(index--){\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n            return false;\n        }\n    }\n    // Assume cyclic values are equal.\n    var stacked = stack.get(object);\n    if (stacked && stack.get(other)) {\n        return stacked == other;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n    while(++index < objLength){\n        key = objProps[index];\n        var objValue = object[key], othValue = other[key];\n        if (customizer) {\n            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n            result = false;\n            break;\n        }\n        skipCtor || (skipCtor = key == \"constructor\");\n    }\n    if (result && !skipCtor) {\n        var objCtor = object.constructor, othCtor = other.constructor;\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor == \"function\" && objCtor instanceof objCtor && typeof othCtor == \"function\" && othCtor instanceof othCtor)) {\n            result = false;\n        }\n    }\n    stack[\"delete\"](object);\n    stack[\"delete\"](other);\n    return result;\n}\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */ function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols);\n}\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function getMapData(map, key) {\n    var data = map.__data__;\n    return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n}\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : undefined;\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        } else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n    if (object == null) {\n        return [];\n    }\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n    });\n};\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ var getTag = baseGetTag;\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) {\n    getTag = function(value) {\n        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : \"\";\n        if (ctorString) {\n            switch(ctorString){\n                case dataViewCtorString:\n                    return dataViewTag;\n                case mapCtorString:\n                    return mapTag;\n                case promiseCtorString:\n                    return promiseTag;\n                case setCtorString:\n                    return setTag;\n                case weakMapCtorString:\n                    return weakMapTag;\n            }\n        }\n        return result;\n    };\n}\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */ function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length && (typeof value == \"number\" || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ function isKeyable(value) {\n    var type = typeof value;\n    return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n}\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n}\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */ function isPrototype(value) {\n    var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n    return value === proto;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function toSource(func) {\n    if (func != null) {\n        try {\n            return funcToString.call(func);\n        } catch (e) {}\n        try {\n            return func + \"\";\n        } catch (e) {}\n    }\n    return \"\";\n}\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ function eq(value, other) {\n    return value === other || value !== value && other !== other;\n}\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */ var isArguments = baseIsArguments(function() {\n    return arguments;\n}()) ? baseIsArguments : function(value) {\n    return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n};\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ var isArray = Array.isArray;\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n}\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */ var isBuffer = nativeIsBuffer || stubFalse;\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */ function isEqual(value, other) {\n    return baseIsEqual(value, other);\n}\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function isFunction(value) {\n    if (!isObject(value)) {\n        return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function isLength(value) {\n    return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == \"object\" || type == \"function\");\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function isObjectLike(value) {\n    return value != null && typeof value == \"object\";\n}\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */ function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */ function stubArray() {\n    return [];\n}\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */ function stubFalse() {\n    return false;\n}\nmodule.exports = isEqual;\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Hash\");\n$RefreshReg$(_c1, \"ListCache\");\n$RefreshReg$(_c2, \"MapCache\");\n$RefreshReg$(_c3, \"SetCache\");\n$RefreshReg$(_c4, \"Stack\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/lodash.isequal/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/quick-format-unescaped/index.js":
/*!******************************************************!*\
  !*** ./node_modules/quick-format-unescaped/index.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nfunction tryStringify(o) {\n    try {\n        return JSON.stringify(o);\n    } catch (e) {\n        return '\"[Circular]\"';\n    }\n}\nmodule.exports = format;\nfunction format(f, args, opts) {\n    var ss = opts && opts.stringify || tryStringify;\n    var offset = 1;\n    if (typeof f === \"object\" && f !== null) {\n        var len = args.length + offset;\n        if (len === 1) return f;\n        var objects = new Array(len);\n        objects[0] = ss(f);\n        for(var index = 1; index < len; index++){\n            objects[index] = ss(args[index]);\n        }\n        return objects.join(\" \");\n    }\n    if (typeof f !== \"string\") {\n        return f;\n    }\n    var argLen = args.length;\n    if (argLen === 0) return f;\n    var str = \"\";\n    var a = 1 - offset;\n    var lastPos = -1;\n    var flen = f && f.length || 0;\n    for(var i = 0; i < flen;){\n        if (f.charCodeAt(i) === 37 && i + 1 < flen) {\n            lastPos = lastPos > -1 ? lastPos : 0;\n            switch(f.charCodeAt(i + 1)){\n                case 100:\n                case 102:\n                    if (a >= argLen) break;\n                    if (args[a] == null) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += Number(args[a]);\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 105:\n                    if (a >= argLen) break;\n                    if (args[a] == null) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += Math.floor(Number(args[a]));\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 79:\n                case 111:\n                case 106:\n                    if (a >= argLen) break;\n                    if (args[a] === undefined) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    var type = typeof args[a];\n                    if (type === \"string\") {\n                        str += \"'\" + args[a] + \"'\";\n                        lastPos = i + 2;\n                        i++;\n                        break;\n                    }\n                    if (type === \"function\") {\n                        str += args[a].name || \"<anonymous>\";\n                        lastPos = i + 2;\n                        i++;\n                        break;\n                    }\n                    str += ss(args[a]);\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 115:\n                    if (a >= argLen) break;\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += String(args[a]);\n                    lastPos = i + 2;\n                    i++;\n                    break;\n                case 37:\n                    if (lastPos < i) str += f.slice(lastPos, i);\n                    str += \"%\";\n                    lastPos = i + 2;\n                    i++;\n                    a--;\n                    break;\n            }\n            ++a;\n        }\n        ++i;\n    }\n    if (lastPos === -1) return f;\n    else if (lastPos < flen) {\n        str += f.slice(lastPos);\n    }\n    return str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9xdWljay1mb3JtYXQtdW5lc2NhcGVkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsU0FBU0EsYUFBY0MsQ0FBQztJQUN0QixJQUFJO1FBQUUsT0FBT0MsS0FBS0MsU0FBUyxDQUFDRjtJQUFHLEVBQUUsT0FBTUcsR0FBRztRQUFFLE9BQU87SUFBZTtBQUNwRTtBQUVBQyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLE9BQU9DLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxJQUFJO0lBQzNCLElBQUlDLEtBQUssUUFBU0QsS0FBS1AsU0FBUyxJQUFLSDtJQUNyQyxJQUFJWSxTQUFTO0lBQ2IsSUFBSSxPQUFPSixNQUFNLFlBQVlBLE1BQU0sTUFBTTtRQUN2QyxJQUFJSyxNQUFNSixLQUFLSyxNQUFNLEdBQUdGO1FBQ3hCLElBQUlDLFFBQVEsR0FBRyxPQUFPTDtRQUN0QixJQUFJTyxVQUFVLElBQUlDLE1BQU1IO1FBQ3hCRSxPQUFPLENBQUMsRUFBRSxHQUFHSixHQUFHSDtRQUNoQixJQUFLLElBQUlTLFFBQVEsR0FBR0EsUUFBUUosS0FBS0ksUUFBUztZQUN4Q0YsT0FBTyxDQUFDRSxNQUFNLEdBQUdOLEdBQUdGLElBQUksQ0FBQ1EsTUFBTTtRQUNqQztRQUNBLE9BQU9GLFFBQVFHLElBQUksQ0FBQztJQUN0QjtJQUNBLElBQUksT0FBT1YsTUFBTSxVQUFVO1FBQ3pCLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJVyxTQUFTVixLQUFLSyxNQUFNO0lBQ3hCLElBQUlLLFdBQVcsR0FBRyxPQUFPWDtJQUN6QixJQUFJWSxNQUFNO0lBQ1YsSUFBSUMsSUFBSSxJQUFJVDtJQUNaLElBQUlVLFVBQVUsQ0FBQztJQUNmLElBQUlDLE9BQU8sS0FBTWYsRUFBRU0sTUFBTSxJQUFLO0lBQzlCLElBQUssSUFBSVUsSUFBSSxHQUFHQSxJQUFJRCxNQUFPO1FBQ3pCLElBQUlmLEVBQUVpQixVQUFVLENBQUNELE9BQU8sTUFBTUEsSUFBSSxJQUFJRCxNQUFNO1lBQzFDRCxVQUFVQSxVQUFVLENBQUMsSUFBSUEsVUFBVTtZQUNuQyxPQUFRZCxFQUFFaUIsVUFBVSxDQUFDRCxJQUFJO2dCQUN2QixLQUFLO2dCQUNMLEtBQUs7b0JBQ0gsSUFBSUgsS0FBS0YsUUFDUDtvQkFDRixJQUFJVixJQUFJLENBQUNZLEVBQUUsSUFBSSxNQUFPO29CQUN0QixJQUFJQyxVQUFVRSxHQUNaSixPQUFPWixFQUFFa0IsS0FBSyxDQUFDSixTQUFTRTtvQkFDMUJKLE9BQU9PLE9BQU9sQixJQUFJLENBQUNZLEVBQUU7b0JBQ3JCQyxVQUFVRSxJQUFJO29CQUNkQTtvQkFDQTtnQkFDRixLQUFLO29CQUNILElBQUlILEtBQUtGLFFBQ1A7b0JBQ0YsSUFBSVYsSUFBSSxDQUFDWSxFQUFFLElBQUksTUFBTztvQkFDdEIsSUFBSUMsVUFBVUUsR0FDWkosT0FBT1osRUFBRWtCLEtBQUssQ0FBQ0osU0FBU0U7b0JBQzFCSixPQUFPUSxLQUFLQyxLQUFLLENBQUNGLE9BQU9sQixJQUFJLENBQUNZLEVBQUU7b0JBQ2hDQyxVQUFVRSxJQUFJO29CQUNkQTtvQkFDQTtnQkFDRixLQUFLO2dCQUNMLEtBQUs7Z0JBQ0wsS0FBSztvQkFDSCxJQUFJSCxLQUFLRixRQUNQO29CQUNGLElBQUlWLElBQUksQ0FBQ1ksRUFBRSxLQUFLUyxXQUFXO29CQUMzQixJQUFJUixVQUFVRSxHQUNaSixPQUFPWixFQUFFa0IsS0FBSyxDQUFDSixTQUFTRTtvQkFDMUIsSUFBSU8sT0FBTyxPQUFPdEIsSUFBSSxDQUFDWSxFQUFFO29CQUN6QixJQUFJVSxTQUFTLFVBQVU7d0JBQ3JCWCxPQUFPLE1BQU9YLElBQUksQ0FBQ1ksRUFBRSxHQUFHO3dCQUN4QkMsVUFBVUUsSUFBSTt3QkFDZEE7d0JBQ0E7b0JBQ0Y7b0JBQ0EsSUFBSU8sU0FBUyxZQUFZO3dCQUN2QlgsT0FBT1gsSUFBSSxDQUFDWSxFQUFFLENBQUNXLElBQUksSUFBSTt3QkFDdkJWLFVBQVVFLElBQUk7d0JBQ2RBO3dCQUNBO29CQUNGO29CQUNBSixPQUFPVCxHQUFHRixJQUFJLENBQUNZLEVBQUU7b0JBQ2pCQyxVQUFVRSxJQUFJO29CQUNkQTtvQkFDQTtnQkFDRixLQUFLO29CQUNILElBQUlILEtBQUtGLFFBQ1A7b0JBQ0YsSUFBSUcsVUFBVUUsR0FDWkosT0FBT1osRUFBRWtCLEtBQUssQ0FBQ0osU0FBU0U7b0JBQzFCSixPQUFPYSxPQUFPeEIsSUFBSSxDQUFDWSxFQUFFO29CQUNyQkMsVUFBVUUsSUFBSTtvQkFDZEE7b0JBQ0E7Z0JBQ0YsS0FBSztvQkFDSCxJQUFJRixVQUFVRSxHQUNaSixPQUFPWixFQUFFa0IsS0FBSyxDQUFDSixTQUFTRTtvQkFDMUJKLE9BQU87b0JBQ1BFLFVBQVVFLElBQUk7b0JBQ2RBO29CQUNBSDtvQkFDQTtZQUNKO1lBQ0EsRUFBRUE7UUFDSjtRQUNBLEVBQUVHO0lBQ0o7SUFDQSxJQUFJRixZQUFZLENBQUMsR0FDZixPQUFPZDtTQUNKLElBQUljLFVBQVVDLE1BQU07UUFDdkJILE9BQU9aLEVBQUVrQixLQUFLLENBQUNKO0lBQ2pCO0lBRUEsT0FBT0Y7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcXVpY2stZm9ybWF0LXVuZXNjYXBlZC9pbmRleC5qcz9iZDZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5IChvKSB7XG4gIHRyeSB7IHJldHVybiBKU09OLnN0cmluZ2lmeShvKSB9IGNhdGNoKGUpIHsgcmV0dXJuICdcIltDaXJjdWxhcl1cIicgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdFxuXG5mdW5jdGlvbiBmb3JtYXQoZiwgYXJncywgb3B0cykge1xuICB2YXIgc3MgPSAob3B0cyAmJiBvcHRzLnN0cmluZ2lmeSkgfHwgdHJ5U3RyaW5naWZ5XG4gIHZhciBvZmZzZXQgPSAxXG4gIGlmICh0eXBlb2YgZiA9PT0gJ29iamVjdCcgJiYgZiAhPT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aCArIG9mZnNldFxuICAgIGlmIChsZW4gPT09IDEpIHJldHVybiBmXG4gICAgdmFyIG9iamVjdHMgPSBuZXcgQXJyYXkobGVuKVxuICAgIG9iamVjdHNbMF0gPSBzcyhmKVxuICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW47IGluZGV4KyspIHtcbiAgICAgIG9iamVjdHNbaW5kZXhdID0gc3MoYXJnc1tpbmRleF0pXG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKVxuICB9XG4gIGlmICh0eXBlb2YgZiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZlxuICB9XG4gIHZhciBhcmdMZW4gPSBhcmdzLmxlbmd0aFxuICBpZiAoYXJnTGVuID09PSAwKSByZXR1cm4gZlxuICB2YXIgc3RyID0gJydcbiAgdmFyIGEgPSAxIC0gb2Zmc2V0XG4gIHZhciBsYXN0UG9zID0gLTFcbiAgdmFyIGZsZW4gPSAoZiAmJiBmLmxlbmd0aCkgfHwgMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZsZW47KSB7XG4gICAgaWYgKGYuY2hhckNvZGVBdChpKSA9PT0gMzcgJiYgaSArIDEgPCBmbGVuKSB7XG4gICAgICBsYXN0UG9zID0gbGFzdFBvcyA+IC0xID8gbGFzdFBvcyA6IDBcbiAgICAgIHN3aXRjaCAoZi5jaGFyQ29kZUF0KGkgKyAxKSkge1xuICAgICAgICBjYXNlIDEwMDogLy8gJ2QnXG4gICAgICAgIGNhc2UgMTAyOiAvLyAnZidcbiAgICAgICAgICBpZiAoYSA+PSBhcmdMZW4pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGlmIChhcmdzW2FdID09IG51bGwpICBicmVha1xuICAgICAgICAgIGlmIChsYXN0UG9zIDwgaSlcbiAgICAgICAgICAgIHN0ciArPSBmLnNsaWNlKGxhc3RQb3MsIGkpXG4gICAgICAgICAgc3RyICs9IE51bWJlcihhcmdzW2FdKVxuICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgIGkrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTA1OiAvLyAnaSdcbiAgICAgICAgICBpZiAoYSA+PSBhcmdMZW4pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGlmIChhcmdzW2FdID09IG51bGwpICBicmVha1xuICAgICAgICAgIGlmIChsYXN0UG9zIDwgaSlcbiAgICAgICAgICAgIHN0ciArPSBmLnNsaWNlKGxhc3RQb3MsIGkpXG4gICAgICAgICAgc3RyICs9IE1hdGguZmxvb3IoTnVtYmVyKGFyZ3NbYV0pKVxuICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgIGkrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNzk6IC8vICdPJ1xuICAgICAgICBjYXNlIDExMTogLy8gJ28nXG4gICAgICAgIGNhc2UgMTA2OiAvLyAnaidcbiAgICAgICAgICBpZiAoYSA+PSBhcmdMZW4pXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGlmIChhcmdzW2FdID09PSB1bmRlZmluZWQpIGJyZWFrXG4gICAgICAgICAgaWYgKGxhc3RQb3MgPCBpKVxuICAgICAgICAgICAgc3RyICs9IGYuc2xpY2UobGFzdFBvcywgaSlcbiAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBhcmdzW2FdXG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzdHIgKz0gJ1xcJycgKyBhcmdzW2FdICsgJ1xcJydcbiAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMlxuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RyICs9IGFyZ3NbYV0ubmFtZSB8fCAnPGFub255bW91cz4nXG4gICAgICAgICAgICBsYXN0UG9zID0gaSArIDJcbiAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyICs9IHNzKGFyZ3NbYV0pXG4gICAgICAgICAgbGFzdFBvcyA9IGkgKyAyXG4gICAgICAgICAgaSsrXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMTU6IC8vICdzJ1xuICAgICAgICAgIGlmIChhID49IGFyZ0xlbilcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgaWYgKGxhc3RQb3MgPCBpKVxuICAgICAgICAgICAgc3RyICs9IGYuc2xpY2UobGFzdFBvcywgaSlcbiAgICAgICAgICBzdHIgKz0gU3RyaW5nKGFyZ3NbYV0pXG4gICAgICAgICAgbGFzdFBvcyA9IGkgKyAyXG4gICAgICAgICAgaSsrXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzNzogLy8gJyUnXG4gICAgICAgICAgaWYgKGxhc3RQb3MgPCBpKVxuICAgICAgICAgICAgc3RyICs9IGYuc2xpY2UobGFzdFBvcywgaSlcbiAgICAgICAgICBzdHIgKz0gJyUnXG4gICAgICAgICAgbGFzdFBvcyA9IGkgKyAyXG4gICAgICAgICAgaSsrXG4gICAgICAgICAgYS0tXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgICsrYVxuICAgIH1cbiAgICArK2lcbiAgfVxuICBpZiAobGFzdFBvcyA9PT0gLTEpXG4gICAgcmV0dXJuIGZcbiAgZWxzZSBpZiAobGFzdFBvcyA8IGZsZW4pIHtcbiAgICBzdHIgKz0gZi5zbGljZShsYXN0UG9zKVxuICB9XG5cbiAgcmV0dXJuIHN0clxufVxuIl0sIm5hbWVzIjpbInRyeVN0cmluZ2lmeSIsIm8iLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJmb3JtYXQiLCJmIiwiYXJncyIsIm9wdHMiLCJzcyIsIm9mZnNldCIsImxlbiIsImxlbmd0aCIsIm9iamVjdHMiLCJBcnJheSIsImluZGV4Iiwiam9pbiIsImFyZ0xlbiIsInN0ciIsImEiLCJsYXN0UG9zIiwiZmxlbiIsImkiLCJjaGFyQ29kZUF0Iiwic2xpY2UiLCJOdW1iZXIiLCJNYXRoIiwiZmxvb3IiLCJ1bmRlZmluZWQiLCJ0eXBlIiwibmFtZSIsIlN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/quick-format-unescaped/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/ws/browser.js":
/*!************************************!*\
  !*** ./node_modules/ws/browser.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = function() {\n    throw new Error(\"ws does not work in the browser. Browser clients must use the native \" + \"WebSocket object\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy93cy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmLE1BQU0sSUFBSUMsTUFDUiwwRUFDRTtBQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy93cy9icm93c2VyLmpzPzJjMWQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd3cyBkb2VzIG5vdCB3b3JrIGluIHRoZSBicm93c2VyLiBCcm93c2VyIGNsaWVudHMgbXVzdCB1c2UgdGhlIG5hdGl2ZSAnICtcbiAgICAgICdXZWJTb2NrZXQgb2JqZWN0J1xuICApO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/ws/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/pino/browser.js":
/*!**************************************!*\
  !*** ./node_modules/pino/browser.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nconst format = __webpack_require__(/*! quick-format-unescaped */ \"(app-pages-browser)/./node_modules/quick-format-unescaped/index.js\");\nmodule.exports = pino;\nconst _console = pfGlobalThisOrFallback().console || {};\nconst stdSerializers = {\n    mapHttpRequest: mock,\n    mapHttpResponse: mock,\n    wrapRequestSerializer: passthrough,\n    wrapResponseSerializer: passthrough,\n    wrapErrorSerializer: passthrough,\n    req: mock,\n    res: mock,\n    err: asErrValue\n};\nfunction shouldSerialize(serialize, serializers) {\n    if (Array.isArray(serialize)) {\n        const hasToFilter = serialize.filter(function(k) {\n            return k !== \"!stdSerializers.err\";\n        });\n        return hasToFilter;\n    } else if (serialize === true) {\n        return Object.keys(serializers);\n    }\n    return false;\n}\nfunction pino(opts) {\n    opts = opts || {};\n    opts.browser = opts.browser || {};\n    const transmit = opts.browser.transmit;\n    if (transmit && typeof transmit.send !== \"function\") {\n        throw Error(\"pino: transmit option must have a send function\");\n    }\n    const proto = opts.browser.write || _console;\n    if (opts.browser.write) opts.browser.asObject = true;\n    const serializers = opts.serializers || {};\n    const serialize = shouldSerialize(opts.browser.serialize, serializers);\n    let stdErrSerialize = opts.browser.serialize;\n    if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf(\"!stdSerializers.err\") > -1) stdErrSerialize = false;\n    const levels = [\n        \"error\",\n        \"fatal\",\n        \"warn\",\n        \"info\",\n        \"debug\",\n        \"trace\"\n    ];\n    if (typeof proto === \"function\") {\n        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;\n    }\n    if (opts.enabled === false) opts.level = \"silent\";\n    const level = opts.level || \"info\";\n    const logger = Object.create(proto);\n    if (!logger.log) logger.log = noop;\n    Object.defineProperty(logger, \"levelVal\", {\n        get: getLevelVal\n    });\n    Object.defineProperty(logger, \"level\", {\n        get: getLevel,\n        set: setLevel\n    });\n    const setOpts = {\n        transmit,\n        serialize,\n        asObject: opts.browser.asObject,\n        levels,\n        timestamp: getTimeFunction(opts)\n    };\n    logger.levels = pino.levels;\n    logger.level = level;\n    logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;\n    logger.serializers = serializers;\n    logger._serialize = serialize;\n    logger._stdErrSerialize = stdErrSerialize;\n    logger.child = child;\n    if (transmit) logger._logEvent = createLogEventShape();\n    function getLevelVal() {\n        return this.level === \"silent\" ? Infinity : this.levels.values[this.level];\n    }\n    function getLevel() {\n        return this._level;\n    }\n    function setLevel(level) {\n        if (level !== \"silent\" && !this.levels.values[level]) {\n            throw Error(\"unknown level \" + level);\n        }\n        this._level = level;\n        set(setOpts, logger, \"error\", \"log\") // <-- must stay first\n        ;\n        set(setOpts, logger, \"fatal\", \"error\");\n        set(setOpts, logger, \"warn\", \"error\");\n        set(setOpts, logger, \"info\", \"log\");\n        set(setOpts, logger, \"debug\", \"log\");\n        set(setOpts, logger, \"trace\", \"log\");\n    }\n    function child(bindings, childOptions) {\n        if (!bindings) {\n            throw new Error(\"missing bindings for child Pino\");\n        }\n        childOptions = childOptions || {};\n        if (serialize && bindings.serializers) {\n            childOptions.serializers = bindings.serializers;\n        }\n        const childOptionsSerializers = childOptions.serializers;\n        if (serialize && childOptionsSerializers) {\n            var childSerializers = Object.assign({}, serializers, childOptionsSerializers);\n            var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;\n            delete bindings.serializers;\n            applySerializers([\n                bindings\n            ], childSerialize, childSerializers, this._stdErrSerialize);\n        }\n        function Child(parent) {\n            this._childLevel = (parent._childLevel | 0) + 1;\n            this.error = bind(parent, bindings, \"error\");\n            this.fatal = bind(parent, bindings, \"fatal\");\n            this.warn = bind(parent, bindings, \"warn\");\n            this.info = bind(parent, bindings, \"info\");\n            this.debug = bind(parent, bindings, \"debug\");\n            this.trace = bind(parent, bindings, \"trace\");\n            if (childSerializers) {\n                this.serializers = childSerializers;\n                this._serialize = childSerialize;\n            }\n            if (transmit) {\n                this._logEvent = createLogEventShape([].concat(parent._logEvent.bindings, bindings));\n            }\n        }\n        Child.prototype = this;\n        return new Child(this);\n    }\n    return logger;\n}\npino.levels = {\n    values: {\n        fatal: 60,\n        error: 50,\n        warn: 40,\n        info: 30,\n        debug: 20,\n        trace: 10\n    },\n    labels: {\n        10: \"trace\",\n        20: \"debug\",\n        30: \"info\",\n        40: \"warn\",\n        50: \"error\",\n        60: \"fatal\"\n    }\n};\npino.stdSerializers = stdSerializers;\npino.stdTimeFunctions = Object.assign({}, {\n    nullTime,\n    epochTime,\n    unixTime,\n    isoTime\n});\nfunction set(opts, logger, level, fallback) {\n    const proto = Object.getPrototypeOf(logger);\n    logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback] || noop;\n    wrap(opts, logger, level);\n}\nfunction wrap(opts, logger, level) {\n    if (!opts.transmit && logger[level] === noop) return;\n    logger[level] = function(write) {\n        return function LOG() {\n            const ts = opts.timestamp();\n            const args = new Array(arguments.length);\n            const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;\n            for(var i = 0; i < args.length; i++)args[i] = arguments[i];\n            if (opts.serialize && !opts.asObject) {\n                applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);\n            }\n            if (opts.asObject) write.call(proto, asObject(this, level, args, ts));\n            else write.apply(proto, args);\n            if (opts.transmit) {\n                const transmitLevel = opts.transmit.level || logger.level;\n                const transmitValue = pino.levels.values[transmitLevel];\n                const methodValue = pino.levels.values[level];\n                if (methodValue < transmitValue) return;\n                transmit(this, {\n                    ts,\n                    methodLevel: level,\n                    methodValue,\n                    transmitLevel,\n                    transmitValue: pino.levels.values[opts.transmit.level || logger.level],\n                    send: opts.transmit.send,\n                    val: logger.levelVal\n                }, args);\n            }\n        };\n    }(logger[level]);\n}\nfunction asObject(logger, level, args, ts) {\n    if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);\n    const argsCloned = args.slice();\n    let msg = argsCloned[0];\n    const o = {};\n    if (ts) {\n        o.time = ts;\n    }\n    o.level = pino.levels.values[level];\n    let lvl = (logger._childLevel | 0) + 1;\n    if (lvl < 1) lvl = 1;\n    // deliberate, catching objects, arrays\n    if (msg !== null && typeof msg === \"object\") {\n        while(lvl-- && typeof argsCloned[0] === \"object\"){\n            Object.assign(o, argsCloned.shift());\n        }\n        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : undefined;\n    } else if (typeof msg === \"string\") msg = format(argsCloned.shift(), argsCloned);\n    if (msg !== undefined) o.msg = msg;\n    return o;\n}\nfunction applySerializers(args, serialize, serializers, stdErrSerialize) {\n    for(const i in args){\n        if (stdErrSerialize && args[i] instanceof Error) {\n            args[i] = pino.stdSerializers.err(args[i]);\n        } else if (typeof args[i] === \"object\" && !Array.isArray(args[i])) {\n            for(const k in args[i]){\n                if (serialize && serialize.indexOf(k) > -1 && k in serializers) {\n                    args[i][k] = serializers[k](args[i][k]);\n                }\n            }\n        }\n    }\n}\nfunction bind(parent, bindings, level) {\n    return function() {\n        const args = new Array(1 + arguments.length);\n        args[0] = bindings;\n        for(var i = 1; i < args.length; i++){\n            args[i] = arguments[i - 1];\n        }\n        return parent[level].apply(this, args);\n    };\n}\nfunction transmit(logger, opts, args) {\n    const send = opts.send;\n    const ts = opts.ts;\n    const methodLevel = opts.methodLevel;\n    const methodValue = opts.methodValue;\n    const val = opts.val;\n    const bindings = logger._logEvent.bindings;\n    applySerializers(args, logger._serialize || Object.keys(logger.serializers), logger.serializers, logger._stdErrSerialize === undefined ? true : logger._stdErrSerialize);\n    logger._logEvent.ts = ts;\n    logger._logEvent.messages = args.filter(function(arg) {\n        // bindings can only be objects, so reference equality check via indexOf is fine\n        return bindings.indexOf(arg) === -1;\n    });\n    logger._logEvent.level.label = methodLevel;\n    logger._logEvent.level.value = methodValue;\n    send(methodLevel, logger._logEvent, val);\n    logger._logEvent = createLogEventShape(bindings);\n}\nfunction createLogEventShape(bindings) {\n    return {\n        ts: 0,\n        messages: [],\n        bindings: bindings || [],\n        level: {\n            label: \"\",\n            value: 0\n        }\n    };\n}\nfunction asErrValue(err) {\n    const obj = {\n        type: err.constructor.name,\n        msg: err.message,\n        stack: err.stack\n    };\n    for(const key in err){\n        if (obj[key] === undefined) {\n            obj[key] = err[key];\n        }\n    }\n    return obj;\n}\nfunction getTimeFunction(opts) {\n    if (typeof opts.timestamp === \"function\") {\n        return opts.timestamp;\n    }\n    if (opts.timestamp === false) {\n        return nullTime;\n    }\n    return epochTime;\n}\nfunction mock() {\n    return {};\n}\nfunction passthrough(a) {\n    return a;\n}\nfunction noop() {}\nfunction nullTime() {\n    return false;\n}\nfunction epochTime() {\n    return Date.now();\n}\nfunction unixTime() {\n    return Math.round(Date.now() / 1000.0);\n}\nfunction isoTime() {\n    return new Date(Date.now()).toISOString();\n} // using Date.now() for testability\n/* eslint-disable */ /* istanbul ignore next */ function pfGlobalThisOrFallback() {\n    function defd(o) {\n        return typeof o !== \"undefined\" && o;\n    }\n    try {\n        if (typeof globalThis !== \"undefined\") return globalThis;\n        Object.defineProperty(Object.prototype, \"globalThis\", {\n            get: function() {\n                delete Object.prototype.globalThis;\n                return this.globalThis = this;\n            },\n            configurable: true\n        });\n        return globalThis;\n    } catch (e) {\n        return defd(self) || defd(window) || defd(this) || {};\n    }\n} /* eslint-enable */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/pino/browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/destr/dist/index.mjs":
/*!*******************************************!*\
  !*** ./node_modules/destr/dist/index.mjs ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ destr; },\n/* harmony export */   destr: function() { return /* binding */ destr; },\n/* harmony export */   safeDestr: function() { return /* binding */ safeDestr; }\n/* harmony export */ });\nconst suspectProtoRx = /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/;\nconst suspectConstructorRx = /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/;\nconst JsonSigRx = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nfunction jsonParseTransform(key, value) {\n    if (key === \"__proto__\" || key === \"constructor\" && value && typeof value === \"object\" && \"prototype\" in value) {\n        warnKeyDropped(key);\n        return;\n    }\n    return value;\n}\nfunction warnKeyDropped(key) {\n    console.warn('[destr] Dropping \"'.concat(key, '\" key to prevent prototype pollution.'));\n}\nfunction destr(value) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    const _value = value.trim();\n    if (// eslint-disable-next-line unicorn/prefer-at\n    value[0] === '\"' && value.at(-1) === '\"' && !value.includes(\"\\\\\")) {\n        return _value.slice(1, -1);\n    }\n    if (_value.length <= 9) {\n        const _lval = _value.toLowerCase();\n        if (_lval === \"true\") {\n            return true;\n        }\n        if (_lval === \"false\") {\n            return false;\n        }\n        if (_lval === \"undefined\") {\n            return void 0;\n        }\n        if (_lval === \"null\") {\n            return null;\n        }\n        if (_lval === \"nan\") {\n            return Number.NaN;\n        }\n        if (_lval === \"infinity\") {\n            return Number.POSITIVE_INFINITY;\n        }\n        if (_lval === \"-infinity\") {\n            return Number.NEGATIVE_INFINITY;\n        }\n    }\n    if (!JsonSigRx.test(value)) {\n        if (options.strict) {\n            throw new SyntaxError(\"[destr] Invalid JSON\");\n        }\n        return value;\n    }\n    try {\n        if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {\n            if (options.strict) {\n                throw new Error(\"[destr] Possible prototype pollution\");\n            }\n            return JSON.parse(value, jsonParseTransform);\n        }\n        return JSON.parse(value);\n    } catch (error) {\n        if (options.strict) {\n            throw error;\n        }\n        return value;\n    }\n}\nfunction safeDestr(value) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    return destr(value, {\n        ...options,\n        strict: true\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kZXN0ci9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxpQkFBaUI7QUFDdkIsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLFlBQVk7QUFDbEIsU0FBU0MsbUJBQW1CQyxHQUFHLEVBQUVDLEtBQUs7SUFDcEMsSUFBSUQsUUFBUSxlQUFlQSxRQUFRLGlCQUFpQkMsU0FBUyxPQUFPQSxVQUFVLFlBQVksZUFBZUEsT0FBTztRQUM5R0MsZUFBZUY7UUFDZjtJQUNGO0lBQ0EsT0FBT0M7QUFDVDtBQUNBLFNBQVNDLGVBQWVGLEdBQUc7SUFDekJHLFFBQVFDLElBQUksQ0FBQyxxQkFBeUIsT0FBSkosS0FBSTtBQUN4QztBQUNBLFNBQVNLLE1BQU1KLEtBQUs7UUFBRUssVUFBQUEsaUVBQVUsQ0FBQztJQUMvQixJQUFJLE9BQU9MLFVBQVUsVUFBVTtRQUM3QixPQUFPQTtJQUNUO0lBQ0EsTUFBTU0sU0FBU04sTUFBTU8sSUFBSTtJQUN6QixJQUNFLDZDQUE2QztJQUM3Q1AsS0FBSyxDQUFDLEVBQUUsS0FBSyxPQUFPQSxNQUFNUSxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sQ0FBQ1IsTUFBTVMsUUFBUSxDQUFDLE9BQzVEO1FBQ0EsT0FBT0gsT0FBT0ksS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUMxQjtJQUNBLElBQUlKLE9BQU9LLE1BQU0sSUFBSSxHQUFHO1FBQ3RCLE1BQU1DLFFBQVFOLE9BQU9PLFdBQVc7UUFDaEMsSUFBSUQsVUFBVSxRQUFRO1lBQ3BCLE9BQU87UUFDVDtRQUNBLElBQUlBLFVBQVUsU0FBUztZQUNyQixPQUFPO1FBQ1Q7UUFDQSxJQUFJQSxVQUFVLGFBQWE7WUFDekIsT0FBTyxLQUFLO1FBQ2Q7UUFDQSxJQUFJQSxVQUFVLFFBQVE7WUFDcEIsT0FBTztRQUNUO1FBQ0EsSUFBSUEsVUFBVSxPQUFPO1lBQ25CLE9BQU9FLE9BQU9DLEdBQUc7UUFDbkI7UUFDQSxJQUFJSCxVQUFVLFlBQVk7WUFDeEIsT0FBT0UsT0FBT0UsaUJBQWlCO1FBQ2pDO1FBQ0EsSUFBSUosVUFBVSxhQUFhO1lBQ3pCLE9BQU9FLE9BQU9HLGlCQUFpQjtRQUNqQztJQUNGO0lBQ0EsSUFBSSxDQUFDcEIsVUFBVXFCLElBQUksQ0FBQ2xCLFFBQVE7UUFDMUIsSUFBSUssUUFBUWMsTUFBTSxFQUFFO1lBQ2xCLE1BQU0sSUFBSUMsWUFBWTtRQUN4QjtRQUNBLE9BQU9wQjtJQUNUO0lBQ0EsSUFBSTtRQUNGLElBQUlMLGVBQWV1QixJQUFJLENBQUNsQixVQUFVSixxQkFBcUJzQixJQUFJLENBQUNsQixRQUFRO1lBQ2xFLElBQUlLLFFBQVFjLE1BQU0sRUFBRTtnQkFDbEIsTUFBTSxJQUFJRSxNQUFNO1lBQ2xCO1lBQ0EsT0FBT0MsS0FBS0MsS0FBSyxDQUFDdkIsT0FBT0Y7UUFDM0I7UUFDQSxPQUFPd0IsS0FBS0MsS0FBSyxDQUFDdkI7SUFDcEIsRUFBRSxPQUFPd0IsT0FBTztRQUNkLElBQUluQixRQUFRYyxNQUFNLEVBQUU7WUFDbEIsTUFBTUs7UUFDUjtRQUNBLE9BQU94QjtJQUNUO0FBQ0Y7QUFDQSxTQUFTeUIsVUFBVXpCLEtBQUs7UUFBRUssVUFBQUEsaUVBQVUsQ0FBQztJQUNuQyxPQUFPRCxNQUFNSixPQUFPO1FBQUUsR0FBR0ssT0FBTztRQUFFYyxRQUFRO0lBQUs7QUFDakQ7QUFFOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Rlc3RyL2Rpc3QvaW5kZXgubWpzPzhjNTQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3VzcGVjdFByb3RvUnggPSAvXCIoPzpffFxcXFx1MHsyfTVbRmZdKXsyfSg/OnB8XFxcXHUwezJ9NzApKD86cnxcXFxcdTB7Mn03MikoPzpvfFxcXFx1MHsyfTZbRmZdKSg/OnR8XFxcXHUwezJ9NzQpKD86b3xcXFxcdTB7Mn02W0ZmXSkoPzpffFxcXFx1MHsyfTVbRmZdKXsyfVwiXFxzKjovO1xuY29uc3Qgc3VzcGVjdENvbnN0cnVjdG9yUnggPSAvXCIoPzpjfFxcXFx1MDA2MykoPzpvfFxcXFx1MDA2W0ZmXSkoPzpufFxcXFx1MDA2W0VlXSkoPzpzfFxcXFx1MDA3MykoPzp0fFxcXFx1MDA3NCkoPzpyfFxcXFx1MDA3MikoPzp1fFxcXFx1MDA3NSkoPzpjfFxcXFx1MDA2MykoPzp0fFxcXFx1MDA3NCkoPzpvfFxcXFx1MDA2W0ZmXSkoPzpyfFxcXFx1MDA3MilcIlxccyo6LztcbmNvbnN0IEpzb25TaWdSeCA9IC9eXFxzKltcIlt7XXxeXFxzKi0/XFxkezEsMTZ9KFxcLlxcZHsxLDE3fSk/KFtFZV1bKy1dP1xcZCspP1xccyokLztcbmZ1bmN0aW9uIGpzb25QYXJzZVRyYW5zZm9ybShrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT09IFwiX19wcm90b19fXCIgfHwga2V5ID09PSBcImNvbnN0cnVjdG9yXCIgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIFwicHJvdG90eXBlXCIgaW4gdmFsdWUpIHtcbiAgICB3YXJuS2V5RHJvcHBlZChrZXkpO1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3YXJuS2V5RHJvcHBlZChrZXkpIHtcbiAgY29uc29sZS53YXJuKGBbZGVzdHJdIERyb3BwaW5nIFwiJHtrZXl9XCIga2V5IHRvIHByZXZlbnQgcHJvdG90eXBlIHBvbGx1dGlvbi5gKTtcbn1cbmZ1bmN0aW9uIGRlc3RyKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBfdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gIGlmIChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItYXRcbiAgICB2YWx1ZVswXSA9PT0gJ1wiJyAmJiB2YWx1ZS5hdCgtMSkgPT09ICdcIicgJiYgIXZhbHVlLmluY2x1ZGVzKFwiXFxcXFwiKVxuICApIHtcbiAgICByZXR1cm4gX3ZhbHVlLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAoX3ZhbHVlLmxlbmd0aCA8PSA5KSB7XG4gICAgY29uc3QgX2x2YWwgPSBfdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoX2x2YWwgPT09IFwidHJ1ZVwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKF9sdmFsID09PSBcImZhbHNlXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKF9sdmFsID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoX2x2YWwgPT09IFwibnVsbFwiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKF9sdmFsID09PSBcIm5hblwiKSB7XG4gICAgICByZXR1cm4gTnVtYmVyLk5hTjtcbiAgICB9XG4gICAgaWYgKF9sdmFsID09PSBcImluZmluaXR5XCIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGlmIChfbHZhbCA9PT0gXCItaW5maW5pdHlcIikge1xuICAgICAgcmV0dXJuIE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICB9XG4gIH1cbiAgaWYgKCFKc29uU2lnUngudGVzdCh2YWx1ZSkpIHtcbiAgICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIltkZXN0cl0gSW52YWxpZCBKU09OXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAoc3VzcGVjdFByb3RvUngudGVzdCh2YWx1ZSkgfHwgc3VzcGVjdENvbnN0cnVjdG9yUngudGVzdCh2YWx1ZSkpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0cmljdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbZGVzdHJdIFBvc3NpYmxlIHByb3RvdHlwZSBwb2xsdXRpb25cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSwganNvblBhcnNlVHJhbnNmb3JtKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChvcHRpb25zLnN0cmljdCkge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZURlc3RyKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIGRlc3RyKHZhbHVlLCB7IC4uLm9wdGlvbnMsIHN0cmljdDogdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IHsgZGVzdHIgYXMgZGVmYXVsdCwgZGVzdHIsIHNhZmVEZXN0ciB9O1xuIl0sIm5hbWVzIjpbInN1c3BlY3RQcm90b1J4Iiwic3VzcGVjdENvbnN0cnVjdG9yUngiLCJKc29uU2lnUngiLCJqc29uUGFyc2VUcmFuc2Zvcm0iLCJrZXkiLCJ2YWx1ZSIsIndhcm5LZXlEcm9wcGVkIiwiY29uc29sZSIsIndhcm4iLCJkZXN0ciIsIm9wdGlvbnMiLCJfdmFsdWUiLCJ0cmltIiwiYXQiLCJpbmNsdWRlcyIsInNsaWNlIiwibGVuZ3RoIiwiX2x2YWwiLCJ0b0xvd2VyQ2FzZSIsIk51bWJlciIsIk5hTiIsIlBPU0lUSVZFX0lORklOSVRZIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJ0ZXN0Iiwic3RyaWN0IiwiU3ludGF4RXJyb3IiLCJFcnJvciIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwic2FmZURlc3RyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/destr/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/idb-keyval/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/idb-keyval/dist/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clear: function() { return /* binding */ clear; },\n/* harmony export */   createStore: function() { return /* binding */ createStore; },\n/* harmony export */   del: function() { return /* binding */ del; },\n/* harmony export */   delMany: function() { return /* binding */ delMany; },\n/* harmony export */   entries: function() { return /* binding */ entries; },\n/* harmony export */   get: function() { return /* binding */ get; },\n/* harmony export */   getMany: function() { return /* binding */ getMany; },\n/* harmony export */   keys: function() { return /* binding */ keys; },\n/* harmony export */   promisifyRequest: function() { return /* binding */ promisifyRequest; },\n/* harmony export */   set: function() { return /* binding */ set; },\n/* harmony export */   setMany: function() { return /* binding */ setMany; },\n/* harmony export */   update: function() { return /* binding */ update; },\n/* harmony export */   values: function() { return /* binding */ values; }\n/* harmony export */ });\nfunction promisifyRequest(request) {\n    return new Promise((resolve, reject)=>{\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = ()=>resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = ()=>reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = ()=>request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback)=>dbp.then((db)=>callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore(\"keyval-store\", \"keyval\");\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function get(key) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function set(key, value) {\n    let customStore = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic – if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function setMany(entries) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        entries.forEach((entry)=>store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function getMany(keys) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>Promise.all(keys.map((key)=>promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function update(key, updater) {\n    let customStore = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>// Need to create the promise manually.\n        // If I try to chain promises, the transaction closes in browsers\n        // that use a promise polyfill (IE10/11).\n        new Promise((resolve, reject)=>{\n            store.get(key).onsuccess = function() {\n                try {\n                    store.put(updater(this.result), key);\n                    resolve(promisifyRequest(store.transaction));\n                } catch (err) {\n                    reject(err);\n                }\n            };\n        }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function del(key) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function delMany(keys) {\n    let customStore = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        keys.forEach((key)=>store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function clear() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readwrite\", (store)=>{\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function() {\n        if (!this.result) return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function keys() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>{\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor)=>items.push(cursor.key)).then(()=>items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function values() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>{\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor)=>items.push(cursor.value)).then(()=>items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */ function entries() {\n    let customStore = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultGetStore();\n    return customStore(\"readonly\", (store)=>{\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll())\n            ]).then((param)=>{\n                let [keys, values] = param;\n                return keys.map((key, i)=>[\n                        key,\n                        values[i]\n                    ]);\n            });\n        }\n        const items = [];\n        return customStore(\"readonly\", (store)=>eachCursor(store, (cursor)=>items.push([\n                    cursor.key,\n                    cursor.value\n                ])).then(()=>items));\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/idb-keyval/dist/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/unstorage/dist/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/unstorage/dist/index.mjs ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: function() { return /* binding */ builtinDrivers; },\n/* harmony export */   createStorage: function() { return /* binding */ createStorage; },\n/* harmony export */   defineDriver: function() { return /* binding */ defineDriver; },\n/* harmony export */   joinKeys: function() { return /* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.j; },\n/* harmony export */   normalizeBaseKey: function() { return /* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n; },\n/* harmony export */   normalizeKey: function() { return /* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a; },\n/* harmony export */   prefixStorage: function() { return /* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.p; },\n/* harmony export */   restoreSnapshot: function() { return /* binding */ restoreSnapshot; },\n/* harmony export */   snapshot: function() { return /* binding */ snapshot; }\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! destr */ \"(app-pages-browser)/./node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/unstorage.8581f561.mjs */ \"(app-pages-browser)/./node_modules/unstorage/dist/shared/unstorage.8581f561.mjs\");\n\n\n\nfunction defineDriver(factory) {\n    return factory;\n}\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(()=>{\n    const data = /* @__PURE__ */ new Map();\n    return {\n        name: DRIVER_NAME,\n        options: {},\n        hasItem (key) {\n            return data.has(key);\n        },\n        getItem (key) {\n            var _data_get;\n            return (_data_get = data.get(key)) !== null && _data_get !== void 0 ? _data_get : null;\n        },\n        getItemRaw (key) {\n            var _data_get;\n            return (_data_get = data.get(key)) !== null && _data_get !== void 0 ? _data_get : null;\n        },\n        setItem (key, value) {\n            data.set(key, value);\n        },\n        setItemRaw (key, value) {\n            data.set(key, value);\n        },\n        removeItem (key) {\n            data.delete(key);\n        },\n        getKeys () {\n            return Array.from(data.keys());\n        },\n        clear () {\n            data.clear();\n        },\n        dispose () {\n            data.clear();\n        }\n    };\n});\nfunction createStorage() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const context = {\n        mounts: {\n            \"\": options.driver || memory()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: false,\n        watchListeners: [],\n        unwatch: {}\n    };\n    const getMount = (key)=>{\n        for (const base of context.mountpoints){\n            if (key.startsWith(base)) {\n                return {\n                    base,\n                    relativeKey: key.slice(base.length),\n                    driver: context.mounts[base]\n                };\n            }\n        }\n        return {\n            base: \"\",\n            relativeKey: key,\n            driver: context.mounts[\"\"]\n        };\n    };\n    const getMounts = (base, includeParent)=>{\n        return context.mountpoints.filter((mountpoint)=>mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint)=>({\n                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n                mountpoint,\n                driver: context.mounts[mountpoint]\n            }));\n    };\n    const onChange = (event, key)=>{\n        if (!context.watching) {\n            return;\n        }\n        key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n        for (const listener of context.watchListeners){\n            listener(event, key);\n        }\n    };\n    const startWatch = async ()=>{\n        if (context.watching) {\n            return;\n        }\n        context.watching = true;\n        for(const mountpoint in context.mounts){\n            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);\n        }\n    };\n    const stopWatch = async ()=>{\n        if (!context.watching) {\n            return;\n        }\n        for(const mountpoint in context.unwatch){\n            await context.unwatch[mountpoint]();\n        }\n        context.unwatch = {};\n        context.watching = false;\n    };\n    const runBatch = (items, commonOptions, cb)=>{\n        const batches = /* @__PURE__ */ new Map();\n        const getBatch = (mount)=>{\n            let batch = batches.get(mount.base);\n            if (!batch) {\n                batch = {\n                    driver: mount.driver,\n                    base: mount.base,\n                    items: []\n                };\n                batches.set(mount.base, batch);\n            }\n            return batch;\n        };\n        for (const item of items){\n            const isStringItem = typeof item === \"string\";\n            const key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(isStringItem ? item : item.key);\n            const value = isStringItem ? void 0 : item.value;\n            const options2 = isStringItem || !item.options ? commonOptions : {\n                ...commonOptions,\n                ...item.options\n            };\n            const mount = getMount(key);\n            getBatch(mount).items.push({\n                key,\n                value,\n                relativeKey: mount.relativeKey,\n                options: options2\n            });\n        }\n        return Promise.all([\n            ...batches.values()\n        ].map((batch)=>cb(batch))).then((r)=>r.flat());\n    };\n    const storage = {\n        // Item\n        hasItem (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.hasItem, relativeKey, opts);\n        },\n        getItem (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value));\n        },\n        getItems (items, commonOptions) {\n            return runBatch(items, commonOptions, (batch)=>{\n                if (batch.driver.getItems) {\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            options: item.options\n                        })), commonOptions).then((r)=>r.map((item)=>({\n                                key: (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(batch.base, item.key),\n                                value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item.value)\n                            })));\n                }\n                return Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItem, item.relativeKey, item.options).then((value)=>({\n                            key: item.key,\n                            value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)\n                        }));\n                }));\n            });\n        },\n        getItemRaw (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.getItemRaw) {\n                return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItemRaw, relativeKey, opts);\n            }\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(value));\n        },\n        async setItem (key, value) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            if (value === void 0) {\n                return storage.removeItem(key);\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.setItem) {\n                return;\n            }\n            await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(value), opts);\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async setItems (items, commonOptions) {\n            await runBatch(items, commonOptions, async (batch)=>{\n                if (batch.driver.setItems) {\n                    await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            value: (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value),\n                            options: item.options\n                        })), commonOptions);\n                }\n                if (!batch.driver.setItem) {\n                    return;\n                }\n                await Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItem, item.relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value), item.options);\n                }));\n            });\n        },\n        async setItemRaw (key, value) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            if (value === void 0) {\n                return storage.removeItem(key, opts);\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.setItemRaw) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItemRaw, relativeKey, value, opts);\n            } else if (driver.setItem) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(value), opts);\n            } else {\n                return;\n            }\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async removeItem (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    removeMeta: opts\n                };\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.removeItem) {\n                return;\n            }\n            await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey, opts);\n            if (opts.removeMeta || opts.removeMata) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey + \"$\", opts);\n            }\n            if (!driver.watch) {\n                onChange(\"remove\", key);\n            }\n        },\n        // Meta\n        async getMeta (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    nativeOnly: opts\n                };\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            const meta = /* @__PURE__ */ Object.create(null);\n            if (driver.getMeta) {\n                Object.assign(meta, await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getMeta, relativeKey, opts));\n            }\n            if (!opts.nativeOnly) {\n                const value = await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey + \"$\", opts).then((value_)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value_));\n                if (value && typeof value === \"object\") {\n                    if (typeof value.atime === \"string\") {\n                        value.atime = new Date(value.atime);\n                    }\n                    if (typeof value.mtime === \"string\") {\n                        value.mtime = new Date(value.mtime);\n                    }\n                    Object.assign(meta, value);\n                }\n            }\n            return meta;\n        },\n        setMeta (key, value) {\n            let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            return this.setItem(key + \"$\", value, opts);\n        },\n        removeMeta (key) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return this.removeItem(key + \"$\", opts);\n        },\n        // Keys\n        async getKeys (base) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            const mounts = getMounts(base, true);\n            let maskedMounts = [];\n            const allKeys = [];\n            for (const mount of mounts){\n                const rawKeys = await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(mount.driver.getKeys, mount.relativeBase, opts);\n                const keys = rawKeys.map((key)=>mount.mountpoint + (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key)).filter((key)=>!maskedMounts.some((p)=>key.startsWith(p)));\n                allKeys.push(...keys);\n                maskedMounts = [\n                    mount.mountpoint,\n                    ...maskedMounts.filter((p)=>!p.startsWith(mount.mountpoint))\n                ];\n            }\n            return base ? allKeys.filter((key)=>key.startsWith(base) && !key.endsWith(\"$\")) : allKeys.filter((key)=>!key.endsWith(\"$\"));\n        },\n        // Utils\n        async clear (base) {\n            let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            await Promise.all(getMounts(base, false).map(async (m)=>{\n                if (m.driver.clear) {\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(m.driver.clear, m.relativeBase, opts);\n                }\n                if (m.driver.removeItem) {\n                    const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n                    return Promise.all(keys.map((key)=>m.driver.removeItem(key, opts)));\n                }\n            }));\n        },\n        async dispose () {\n            await Promise.all(Object.values(context.mounts).map((driver)=>dispose(driver)));\n        },\n        async watch (callback) {\n            await startWatch();\n            context.watchListeners.push(callback);\n            return async ()=>{\n                context.watchListeners = context.watchListeners.filter((listener)=>listener !== callback);\n                if (context.watchListeners.length === 0) {\n                    await stopWatch();\n                }\n            };\n        },\n        async unwatch () {\n            context.watchListeners = [];\n            await stopWatch();\n        },\n        // Mount\n        mount (base, driver) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (base && context.mounts[base]) {\n                throw new Error(\"already mounted at \".concat(base));\n            }\n            if (base) {\n                context.mountpoints.push(base);\n                context.mountpoints.sort((a, b)=>b.length - a.length);\n            }\n            context.mounts[base] = driver;\n            if (context.watching) {\n                Promise.resolve(watch(driver, onChange, base)).then((unwatcher)=>{\n                    context.unwatch[base] = unwatcher;\n                }).catch(console.error);\n            }\n            return storage;\n        },\n        async unmount (base) {\n            let _dispose = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (!base || !context.mounts[base]) {\n                return;\n            }\n            if (context.watching && base in context.unwatch) {\n                context.unwatch[base]();\n                delete context.unwatch[base];\n            }\n            if (_dispose) {\n                await dispose(context.mounts[base]);\n            }\n            context.mountpoints = context.mountpoints.filter((key)=>key !== base);\n            delete context.mounts[base];\n        },\n        getMount () {\n            let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key) + \":\";\n            const m = getMount(key);\n            return {\n                driver: m.driver,\n                base: m.base\n            };\n        },\n        getMounts () {\n            let base = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(base);\n            const mounts = getMounts(base, opts.parents);\n            return mounts.map((m)=>({\n                    driver: m.driver,\n                    base: m.mountpoint\n                }));\n        }\n    };\n    return storage;\n}\nasync function snapshot(storage, base) {\n    base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    const keys = await storage.getKeys(base);\n    const snapshot2 = {};\n    await Promise.all(keys.map(async (key)=>{\n        snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    }));\n    return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2) {\n    let base = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n    base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    await Promise.all(Object.entries(snapshot2).map((e)=>driver.setItem(base + e[0], e[1])));\n}\nfunction watch(driver, onChange, base) {\n    return driver.watch ? driver.watch((event, key)=>onChange(event, base + key)) : ()=>{};\n}\nasync function dispose(driver) {\n    if (typeof driver.dispose === \"function\") {\n        await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.dispose);\n    }\n}\nconst builtinDrivers = {\n    azureAppConfiguration: \"unstorage/drivers/azure-app-configuration\",\n    azureCosmos: \"unstorage/drivers/azure-cosmos\",\n    azureKeyVault: \"unstorage/drivers/azure-key-vault\",\n    azureStorageBlob: \"unstorage/drivers/azure-storage-blob\",\n    azureStorageTable: \"unstorage/drivers/azure-storage-table\",\n    cloudflareKVBinding: \"unstorage/drivers/cloudflare-kv-binding\",\n    cloudflareKVHTTP: \"unstorage/drivers/cloudflare-kv-http\",\n    cloudflareR2Binding: \"unstorage/drivers/cloudflare-r2-binding\",\n    fs: \"unstorage/drivers/fs\",\n    fsLite: \"unstorage/drivers/fs-lite\",\n    github: \"unstorage/drivers/github\",\n    http: \"unstorage/drivers/http\",\n    indexedb: \"unstorage/drivers/indexedb\",\n    localStorage: \"unstorage/drivers/localstorage\",\n    lruCache: \"unstorage/drivers/lru-cache\",\n    memory: \"unstorage/drivers/memory\",\n    mongodb: \"unstorage/drivers/mongodb\",\n    netlifyBlobs: \"unstorage/drivers/netlify-blobs\",\n    overlay: \"unstorage/drivers/overlay\",\n    planetscale: \"unstorage/drivers/planetscale\",\n    redis: \"unstorage/drivers/redis\",\n    sessionStorage: \"unstorage/drivers/session-storage\",\n    vercelKV: \"unstorage/drivers/vercel-kv\",\n    /** @deprecated */ \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    /** @deprecated */ \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/unstorage/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/unstorage/dist/shared/unstorage.8581f561.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/unstorage/dist/shared/unstorage.8581f561.mjs ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: function() { return /* binding */ normalizeKey; },\n/* harmony export */   b: function() { return /* binding */ asyncCall; },\n/* harmony export */   c: function() { return /* binding */ serializeRaw; },\n/* harmony export */   d: function() { return /* binding */ deserializeRaw; },\n/* harmony export */   j: function() { return /* binding */ joinKeys; },\n/* harmony export */   n: function() { return /* binding */ normalizeBaseKey; },\n/* harmony export */   p: function() { return /* binding */ prefixStorage; },\n/* harmony export */   s: function() { return /* binding */ stringify; }\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\nfunction wrapToPromise(value) {\n    if (!value || typeof value.then !== \"function\") {\n        return Promise.resolve(value);\n    }\n    return value;\n}\nfunction asyncCall(function_) {\n    for(var _len = arguments.length, arguments_ = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        arguments_[_key - 1] = arguments[_key];\n    }\n    try {\n        return wrapToPromise(function_(...arguments_));\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\nfunction isPrimitive(value) {\n    const type = typeof value;\n    return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n    const proto = Object.getPrototypeOf(value);\n    return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n    if (isPrimitive(value)) {\n        return String(value);\n    }\n    if (isPureObject(value) || Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nfunction checkBufferSupport() {\n    if (typeof Buffer === void 0) {\n        throw new TypeError(\"[unstorage] Buffer is not supported!\");\n    }\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    checkBufferSupport();\n    const base64 = Buffer.from(value).toString(\"base64\");\n    return BASE64_PREFIX + base64;\n}\nfunction deserializeRaw(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (!value.startsWith(BASE64_PREFIX)) {\n        return value;\n    }\n    checkBufferSupport();\n    return Buffer.from(value.slice(BASE64_PREFIX.length), \"base64\");\n}\nconst storageKeyProperties = [\n    \"hasItem\",\n    \"getItem\",\n    \"getItemRaw\",\n    \"setItem\",\n    \"setItemRaw\",\n    \"removeItem\",\n    \"getMeta\",\n    \"setMeta\",\n    \"removeMeta\",\n    \"getKeys\",\n    \"clear\",\n    \"mount\",\n    \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n    base = normalizeBaseKey(base);\n    if (!base) {\n        return storage;\n    }\n    const nsStorage = {\n        ...storage\n    };\n    for (const property of storageKeyProperties){\n        nsStorage[property] = function() {\n            let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                args[_key - 1] = arguments[_key];\n            }\n            return(// @ts-ignore\n            storage[property](base + key, ...args));\n        };\n    }\n    nsStorage.getKeys = function() {\n        let key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\";\n        for(var _len = arguments.length, arguments_ = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            arguments_[_key - 1] = arguments[_key];\n        }\n        return storage.getKeys(base + key, ...arguments_).then((keys)=>keys.map((key2)=>key2.slice(base.length)));\n    };\n    return nsStorage;\n}\nfunction normalizeKey(key) {\n    if (!key) {\n        return \"\";\n    }\n    return key.split(\"?\")[0].replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\");\n}\nfunction joinKeys() {\n    for(var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++){\n        keys[_key] = arguments[_key];\n    }\n    return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n    base = normalizeKey(base);\n    return base ? base + \":\" : \"\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91bnN0b3JhZ2UvZGlzdC9zaGFyZWQvdW5zdG9yYWdlLjg1ODFmNTYxLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxjQUFjQyxLQUFLO0lBQzFCLElBQUksQ0FBQ0EsU0FBUyxPQUFPQSxNQUFNQyxJQUFJLEtBQUssWUFBWTtRQUM5QyxPQUFPQyxRQUFRQyxPQUFPLENBQUNIO0lBQ3pCO0lBQ0EsT0FBT0E7QUFDVDtBQUNBLFNBQVNJLFVBQVVDLFNBQVM7SUFBRTtRQUFHQyxXQUFILDJCQUFhOztJQUN6QyxJQUFJO1FBQ0YsT0FBT1AsY0FBY00sYUFBYUM7SUFDcEMsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsT0FBT0wsUUFBUU0sTUFBTSxDQUFDRDtJQUN4QjtBQUNGO0FBQ0EsU0FBU0UsWUFBWVQsS0FBSztJQUN4QixNQUFNVSxPQUFPLE9BQU9WO0lBQ3BCLE9BQU9BLFVBQVUsUUFBUVUsU0FBUyxZQUFZQSxTQUFTO0FBQ3pEO0FBQ0EsU0FBU0MsYUFBYVgsS0FBSztJQUN6QixNQUFNWSxRQUFRQyxPQUFPQyxjQUFjLENBQUNkO0lBQ3BDLE9BQU8sQ0FBQ1ksU0FBU0EsTUFBTUcsYUFBYSxDQUFDRjtBQUN2QztBQUNBLFNBQVNHLFVBQVVoQixLQUFLO0lBQ3RCLElBQUlTLFlBQVlULFFBQVE7UUFDdEIsT0FBT2lCLE9BQU9qQjtJQUNoQjtJQUNBLElBQUlXLGFBQWFYLFVBQVVrQixNQUFNQyxPQUFPLENBQUNuQixRQUFRO1FBQy9DLE9BQU9vQixLQUFLSixTQUFTLENBQUNoQjtJQUN4QjtJQUNBLElBQUksT0FBT0EsTUFBTXFCLE1BQU0sS0FBSyxZQUFZO1FBQ3RDLE9BQU9MLFVBQVVoQixNQUFNcUIsTUFBTTtJQUMvQjtJQUNBLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUNBLFNBQVNDO0lBQ1AsSUFBSSxPQUFPQyxNQUFNQSxLQUFLLEtBQUssR0FBRztRQUM1QixNQUFNLElBQUlDLFVBQVU7SUFDdEI7QUFDRjtBQUNBLE1BQU1DLGdCQUFnQjtBQUN0QixTQUFTQyxhQUFhM0IsS0FBSztJQUN6QixJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUM3QixPQUFPQTtJQUNUO0lBQ0F1QjtJQUNBLE1BQU1LLFNBQVNKLE1BQU1BLENBQUNLLElBQUksQ0FBQzdCLE9BQU84QixRQUFRLENBQUM7SUFDM0MsT0FBT0osZ0JBQWdCRTtBQUN6QjtBQUNBLFNBQVNHLGVBQWUvQixLQUFLO0lBQzNCLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzdCLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLENBQUNBLE1BQU1nQyxVQUFVLENBQUNOLGdCQUFnQjtRQUNwQyxPQUFPMUI7SUFDVDtJQUNBdUI7SUFDQSxPQUFPQyxNQUFNQSxDQUFDSyxJQUFJLENBQUM3QixNQUFNaUMsS0FBSyxDQUFDUCxjQUFjUSxNQUFNLEdBQUc7QUFDeEQ7QUFFQSxNQUFNQyx1QkFBdUI7SUFDM0I7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUNELFNBQVNDLGNBQWNDLE9BQU8sRUFBRUMsSUFBSTtJQUNsQ0EsT0FBT0MsaUJBQWlCRDtJQUN4QixJQUFJLENBQUNBLE1BQU07UUFDVCxPQUFPRDtJQUNUO0lBQ0EsTUFBTUcsWUFBWTtRQUFFLEdBQUdILE9BQU87SUFBQztJQUMvQixLQUFLLE1BQU1JLFlBQVlOLHFCQUFzQjtRQUMzQ0ssU0FBUyxDQUFDQyxTQUFTLEdBQUc7Z0JBQUNDLHVFQUFNOzZDQUFPQztnQkFBQUE7O21CQUNsQyxhQUFhO1lBQ2JOLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDSCxPQUFPSSxRQUFRQzs7SUFFckM7SUFDQUgsVUFBVUksT0FBTyxHQUFHO1lBQUNGLHVFQUFNO3lDQUFPcEM7WUFBQUE7O2VBQWUrQixRQUFRTyxPQUFPLENBQUNOLE9BQU9JLFFBQVFwQyxZQUFZTCxJQUFJLENBQUMsQ0FBQzRDLE9BQVNBLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQyxPQUFTQSxLQUFLZCxLQUFLLENBQUNLLEtBQUtKLE1BQU07O0lBQ3BKLE9BQU9NO0FBQ1Q7QUFDQSxTQUFTUSxhQUFhTixHQUFHO0lBQ3ZCLElBQUksQ0FBQ0EsS0FBSztRQUNSLE9BQU87SUFDVDtJQUNBLE9BQU9BLElBQUlPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDQyxPQUFPLENBQUMsVUFBVSxLQUFLQSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsVUFBVTtBQUN4RjtBQUNBLFNBQVNDO0lBQVM7UUFBR04sS0FBSCx1QkFBTzs7SUFDdkIsT0FBT0csYUFBYUgsS0FBS08sSUFBSSxDQUFDO0FBQ2hDO0FBQ0EsU0FBU2IsaUJBQWlCRCxJQUFJO0lBQzVCQSxPQUFPVSxhQUFhVjtJQUNwQixPQUFPQSxPQUFPQSxPQUFPLE1BQU07QUFDN0I7QUFFK0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3Vuc3RvcmFnZS9kaXN0L3NoYXJlZC91bnN0b3JhZ2UuODU4MWY1NjEubWpzPzcyY2MiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd3JhcFRvUHJvbWlzZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZS50aGVuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBhc3luY0NhbGwoZnVuY3Rpb25fLCAuLi5hcmd1bWVudHNfKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdyYXBUb1Byb21pc2UoZnVuY3Rpb25fKC4uLmFyZ3VtZW50c18pKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlICE9PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1B1cmVPYmplY3QodmFsdWUpIHtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICByZXR1cm4gIXByb3RvIHx8IHByb3RvLmlzUHJvdG90eXBlT2YoT2JqZWN0KTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgaWYgKGlzUHVyZU9iamVjdCh2YWx1ZSkgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KHZhbHVlLnRvSlNPTigpKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJbdW5zdG9yYWdlXSBDYW5ub3Qgc3RyaW5naWZ5IHZhbHVlIVwiKTtcbn1cbmZ1bmN0aW9uIGNoZWNrQnVmZmVyU3VwcG9ydCgpIHtcbiAgaWYgKHR5cGVvZiBCdWZmZXIgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbdW5zdG9yYWdlXSBCdWZmZXIgaXMgbm90IHN1cHBvcnRlZCFcIik7XG4gIH1cbn1cbmNvbnN0IEJBU0U2NF9QUkVGSVggPSBcImJhc2U2NDpcIjtcbmZ1bmN0aW9uIHNlcmlhbGl6ZVJhdyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNoZWNrQnVmZmVyU3VwcG9ydCgpO1xuICBjb25zdCBiYXNlNjQgPSBCdWZmZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gIHJldHVybiBCQVNFNjRfUFJFRklYICsgYmFzZTY0O1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVSYXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoIXZhbHVlLnN0YXJ0c1dpdGgoQkFTRTY0X1BSRUZJWCkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY2hlY2tCdWZmZXJTdXBwb3J0KCk7XG4gIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZS5zbGljZShCQVNFNjRfUFJFRklYLmxlbmd0aCksIFwiYmFzZTY0XCIpO1xufVxuXG5jb25zdCBzdG9yYWdlS2V5UHJvcGVydGllcyA9IFtcbiAgXCJoYXNJdGVtXCIsXG4gIFwiZ2V0SXRlbVwiLFxuICBcImdldEl0ZW1SYXdcIixcbiAgXCJzZXRJdGVtXCIsXG4gIFwic2V0SXRlbVJhd1wiLFxuICBcInJlbW92ZUl0ZW1cIixcbiAgXCJnZXRNZXRhXCIsXG4gIFwic2V0TWV0YVwiLFxuICBcInJlbW92ZU1ldGFcIixcbiAgXCJnZXRLZXlzXCIsXG4gIFwiY2xlYXJcIixcbiAgXCJtb3VudFwiLFxuICBcInVubW91bnRcIlxuXTtcbmZ1bmN0aW9uIHByZWZpeFN0b3JhZ2Uoc3RvcmFnZSwgYmFzZSkge1xuICBiYXNlID0gbm9ybWFsaXplQmFzZUtleShiYXNlKTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgcmV0dXJuIHN0b3JhZ2U7XG4gIH1cbiAgY29uc3QgbnNTdG9yYWdlID0geyAuLi5zdG9yYWdlIH07XG4gIGZvciAoY29uc3QgcHJvcGVydHkgb2Ygc3RvcmFnZUtleVByb3BlcnRpZXMpIHtcbiAgICBuc1N0b3JhZ2VbcHJvcGVydHldID0gKGtleSA9IFwiXCIsIC4uLmFyZ3MpID0+IChcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHN0b3JhZ2VbcHJvcGVydHldKGJhc2UgKyBrZXksIC4uLmFyZ3MpXG4gICAgKTtcbiAgfVxuICBuc1N0b3JhZ2UuZ2V0S2V5cyA9IChrZXkgPSBcIlwiLCAuLi5hcmd1bWVudHNfKSA9PiBzdG9yYWdlLmdldEtleXMoYmFzZSArIGtleSwgLi4uYXJndW1lbnRzXykudGhlbigoa2V5cykgPT4ga2V5cy5tYXAoKGtleTIpID0+IGtleTIuc2xpY2UoYmFzZS5sZW5ndGgpKSk7XG4gIHJldHVybiBuc1N0b3JhZ2U7XG59XG5mdW5jdGlvbiBub3JtYWxpemVLZXkoa2V5KSB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgcmV0dXJuIGtleS5zcGxpdChcIj9cIilbMF0ucmVwbGFjZSgvWy9cXFxcXS9nLCBcIjpcIikucmVwbGFjZSgvOisvZywgXCI6XCIpLnJlcGxhY2UoL146fDokL2csIFwiXCIpO1xufVxuZnVuY3Rpb24gam9pbktleXMoLi4ua2V5cykge1xuICByZXR1cm4gbm9ybWFsaXplS2V5KGtleXMuam9pbihcIjpcIikpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZUtleShiYXNlKSB7XG4gIGJhc2UgPSBub3JtYWxpemVLZXkoYmFzZSk7XG4gIHJldHVybiBiYXNlID8gYmFzZSArIFwiOlwiIDogXCJcIjtcbn1cblxuZXhwb3J0IHsgbm9ybWFsaXplS2V5IGFzIGEsIGFzeW5jQ2FsbCBhcyBiLCBzZXJpYWxpemVSYXcgYXMgYywgZGVzZXJpYWxpemVSYXcgYXMgZCwgam9pbktleXMgYXMgaiwgbm9ybWFsaXplQmFzZUtleSBhcyBuLCBwcmVmaXhTdG9yYWdlIGFzIHAsIHN0cmluZ2lmeSBhcyBzIH07XG4iXSwibmFtZXMiOlsid3JhcFRvUHJvbWlzZSIsInZhbHVlIiwidGhlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiYXN5bmNDYWxsIiwiZnVuY3Rpb25fIiwiYXJndW1lbnRzXyIsImVycm9yIiwicmVqZWN0IiwiaXNQcmltaXRpdmUiLCJ0eXBlIiwiaXNQdXJlT2JqZWN0IiwicHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImlzUHJvdG90eXBlT2YiLCJzdHJpbmdpZnkiLCJTdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJKU09OIiwidG9KU09OIiwiRXJyb3IiLCJjaGVja0J1ZmZlclN1cHBvcnQiLCJCdWZmZXIiLCJUeXBlRXJyb3IiLCJCQVNFNjRfUFJFRklYIiwic2VyaWFsaXplUmF3IiwiYmFzZTY0IiwiZnJvbSIsInRvU3RyaW5nIiwiZGVzZXJpYWxpemVSYXciLCJzdGFydHNXaXRoIiwic2xpY2UiLCJsZW5ndGgiLCJzdG9yYWdlS2V5UHJvcGVydGllcyIsInByZWZpeFN0b3JhZ2UiLCJzdG9yYWdlIiwiYmFzZSIsIm5vcm1hbGl6ZUJhc2VLZXkiLCJuc1N0b3JhZ2UiLCJwcm9wZXJ0eSIsImtleSIsImFyZ3MiLCJnZXRLZXlzIiwia2V5cyIsIm1hcCIsImtleTIiLCJub3JtYWxpemVLZXkiLCJzcGxpdCIsInJlcGxhY2UiLCJqb2luS2V5cyIsImpvaW4iLCJhIiwiYiIsImMiLCJkIiwiaiIsIm4iLCJwIiwicyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/unstorage/dist/shared/unstorage.8581f561.mjs\n"));

/***/ })

}]);